
// --------------------------------------------------------------------------------
// Copyright (c) 2024-2025 Igor Ryabov (https://github.com/IgorRyaboff/Instrumentiki)
// License: https://github.com/IgorRyaboff/Instrumentiki/blob/main/LICENSE
// --------------------------------------------------------------------------------

#Область ПрограммныйИнтерфейс

// Функция получения сведений о внешней обработке
// Используется для добавления обработки в список дополнительных обработок в конфигурациях на основе БСП
// В работе Инструментиков не используется
//
Функция СведенияОВнешнейОбработке() Экспорт
	МодульДополнительныеОтчетыИОбработки = Вычислить("ДополнительныеОтчетыИОбработки");
	МодульДополнительныеОтчетыИОбработкиКлиентСервер = Вычислить("ДополнительныеОтчетыИОбработкиКлиентСервер");
	ПараметрыРегистрации = МодульДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке("3.1.7.226");

	ПараметрыРегистрации.Наименование = "Инструментики";
	ПараметрыРегистрации.Информация = "Рябов Игорь, 2025";
	ПараметрыРегистрации.Версия = Версия;
	ПараметрыРегистрации.БезопасныйРежим = Ложь;
	ПараметрыРегистрации.Вид = МодульДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиЗаполнениеОбъекта();
	
	ПараметрыРегистрации.Назначение.Добавить("Справочник.*");
	ПараметрыРегистрации.Назначение.Добавить("Документ.*");
	ПараметрыРегистрации.Назначение.Добавить("ПланСчетов.*");
	ПараметрыРегистрации.Назначение.Добавить("ПланВидовРасчета.*");
	ПараметрыРегистрации.Назначение.Добавить("БизнесПроцесс.*");
	ПараметрыРегистрации.Назначение.Добавить("Задача.*");
	ПараметрыРегистрации.Назначение.Добавить("ПланОбмена.*");

	НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
	НоваяКоманда.Идентификатор = "ОткрытьФорму";
	НоваяКоманда.Использование = МодульДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	НоваяКоманда.Представление = НСтр("ru='Открыть Инструментики'");
	
	НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
	НоваяКоманда.Идентификатор = "ОткрытьОбъектВРедактореОбъектов";
	НоваяКоманда.Использование = МодульДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовКлиентскогоМетода();
	НоваяКоманда.Представление = НСтр("ru='Открыть в Редакторе объектов (Инструментики)'");
	
	НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
	НоваяКоманда.Идентификатор = "СравнитьОбъекты";
	НоваяКоманда.Использование = МодульДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовКлиентскогоМетода();
	НоваяКоманда.Представление = НСтр("ru='Сравнить реквизиты объектов (Инструментики)'");
	
	Возврат ПараметрыРегистрации;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗагрузкаСохранениеXDTO

// Формирует объект фабрики XDTO из встроенной в обработку XSD-схемы
//
// Параметры:
//  ВерсияФормата - Число -
//
// Возвращаемое значение:
//  ФабрикаXDTO -
//  Неопределено - Если данная версия формата не поддерживается
Функция ФабрикаXDTO(ВерсияФормата) Экспорт
	Попытка
		Макет = ПолучитьМакет("XSD_" + Формат(ВерсияФормата, "ЧН=0; ЧГ="));
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(Макет.ПолучитьТекст());
	
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	
	ПостроительСхем = Новый ПостроительСхемXML;
	СхемаXML = ПостроительСхем.СоздатьСхемуXML(ДокументDOM);
	
	НаборСхемXML = Новый НаборСхемXML;
	НаборСхемXML.Добавить(СхемаXML);
	
	Фабрика = Новый ФабрикаXDTO(НаборСхемXML);
	
	Возврат Фабрика;
КонецФункции

// Читает данные из содержимого универсального пакета
//
// Параметры:
//  ТекстXML - Строка -
//  ОжидаемыйТип - Строка - Какой тип объекта необходим. При попытке чтения универсального пакета с другим типом объекта вызывается исключение
//
// Возвращаемое значение:
//  Структура при корректном разборе:
//  * ВерсияФормата - Число - Версия формата открытого файла
//  * Объект - ОбъектXDTO -
//  Структура при возникновении ошибки:
//  * Ошибка - Строка - Описание ошибки для вывода пользователю
Функция ДанныеИзУниверсальногоПакета(ТекстXML, ОжидаемыйТип) Экспорт
	Фабрика = ФабрикаXDTO(1);
	ТипУниверсальныйПакет = Фабрика.Тип("instrumentiki", "УниверсальныйПакет");
	Если ТипУниверсальныйПакет = Неопределено Тогда
		ВызватьИсключение "1-я версия формата не содержит описание типа объекта УниверсальныйПакет";
	КонецЕсли;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ТекстXML);
	Попытка
		УниверсальныйПакет = Фабрика.ПрочитатьXML(ЧтениеXML, ТипУниверсальныйПакет);
	Исключение
		ЧтениеXML.Закрыть();
		
		КраткоеПредставлениеОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		СообщениеОбОшибке = СтрШаблон(НСтр("ru = 'Файл не является файлом Инструментиков, либо он поврежден.
                                  |%1'"), КраткоеПредставлениеОшибки);
		
		ЗаписьЖурналаРегистрации("Инструментики", УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки);
		Возврат Новый Структура("Ошибка", СообщениеОбОшибке);
	КонецПопытки;
	ЧтениеXML.Закрыть();
	УниверсальныйПакет.Проверить();
	
	Фабрика = ФабрикаXDTO(УниверсальныйПакет.ВерсияФормата);
	Если Фабрика = Неопределено Тогда
		// BSLLS:LineLength-off непереносимый строковый литерал
		СообщениеОбОшибке = СтрШаблон(НСтр("ru = 'Данный файл был сохранен в более новой версии Инструментиков и не может быть открыт в текущей.
                                  |Обновите Инструментики и повторите попытку.
                                  |Версия формата, указанная в файле: %1'"), УниверсальныйПакет.ВерсияФормата);
		// BSLLS:LineLength-on
		Возврат Новый Структура("Ошибка", СообщениеОбОшибке);
	КонецЕсли;
	
	Если УниверсальныйПакет.ИмяТипаОбъекта <> ОжидаемыйТип Тогда
		СообщениеОбОшибке = СтрШаблон(НСтр("ru = 'Этот файл принадлежит инструменту ""%1""'"),
			УниверсальныйПакет.ИмяИнструмента);
		//
		Возврат Новый Структура("Ошибка", СообщениеОбОшибке);
	КонецЕсли;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ПолучитьСтрокуИзДвоичныхДанных(УниверсальныйПакет.Объект));
	ТипXDTO = Фабрика.Тип("instrumentiki", УниверсальныйПакет.ИмяТипаОбъекта);
	РаспакованныйОбъект = Фабрика.ПрочитатьXML(ЧтениеXML, ТипXDTO);
	ЧтениеXML.Закрыть();
	РаспакованныйОбъект.Проверить();
	
	Возврат Новый Структура("ВерсияФормата, Объект", УниверсальныйПакет.ВерсияФормата, РаспакованныйОбъект);
КонецФункции

// Читает данные из содержимого универсального пакета, помещенного во временное хранилище
//
// Параметры:
//  АдресВХ - Строка - Адрес текста или двоичных данных текста, помещенного во временное хранилище
//  ОжидаемыйТип - Строка - Какой тип объекта необходим. При попытке чтения универсального пакета с другим типом объекта вызывается исключение
//
// Возвращаемое значение: См. ДанныеВУниверсальныйПакет()
Функция ДанныеИзУниверсальногоПакетаВХ(АдресВХ, ОжидаемыйТип) Экспорт
	Текст = ПолучитьИзВременногоХранилища(АдресВХ);
	Если ТипЗнч(Текст) = Тип("ДвоичныеДанные") Тогда
		Текст = ПолучитьСтрокуИзДвоичныхДанных(Текст);
	КонецЕсли;
	
	Возврат ДанныеИзУниверсальногоПакета(Текст, ОжидаемыйТип);
КонецФункции

// Упаковывает данные в универсальный пакет и сериализует их в строку
//
// Параметры:
//  ОбъектXDTO - ОбъектXDTO - Упаковываемый объект
//  ИмяИнструмента - Строка - Имя инструмента, из которого выгружаются данные
//
// Возвращаемое значение:
//  Строка - Содержимое финального XML-файла для дальнейшей записи
Функция ДанныеВУниверсальныйПакет(ВерсияФормата, ОбъектXDTO, ИмяИнструмента) Экспорт
	Фабрика = ФабрикаXDTO(ВерсияФормата);
	
	ТипКорневойЭлемент = Фабрика.Тип("instrumentiki", "УниверсальныйПакет");
	УпакованныйОбъект = Фабрика.Создать(ТипКорневойЭлемент);
	УпакованныйОбъект.ВерсияФормата = ВерсияФормата;
	УпакованныйОбъект.ИмяИнструмента = ИмяИнструмента;
	УпакованныйОбъект.ИмяТипаОбъекта = ОбъектXDTO.Тип().Имя;
	
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку();
	Фабрика.ЗаписатьXML(Запись, ОбъектXDTO);
	УпакованныйОбъект.Объект = ПолучитьДвоичныеДанныеИзСтроки(Запись.Закрыть());
	УпакованныйОбъект.Проверить();
	
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку();
	Фабрика.ЗаписатьXML(Запись, УпакованныйОбъект);
	
	ТекстXML = Запись.Закрыть();
	// BSLLS:LineLength-off
	// Цельная строка для вывода в файл, сократить не получится
	Возврат СтрШаблон("<!-- Файл сохранён из обработки ""Инструментики"" версии %1 (https://github.com/IgorRyaboff/Instrumentiki) -->
	                  |
					  |%2", Версия, ТекстXML);
	// BSLLS:LineLength-on
КонецФункции

// Упаковывает данные в универсальный пакет, сериализует их в строку и помещает во временное хранилище
//
// Параметры:
//  ОбъектXDTO - ОбъектXDTO - Упаковываемый объект
//  ИмяИнструмента - Строка - Имя инструмента, из которого выгружаются данные
//  УникальныйИдентификаторФормы - УникальныйИдентификатор - GUID формы, из которой идёт сохранение, либо случайный GUID
//
// Возвращаемое значение:
//  Строка - Адрес во временном хранилище
Функция ДанныеВУниверсальныйПакетВХ(ВерсияФормата, ОбъектXDTO, ИмяИнструмента, УникальныйИдентификаторФормы) Экспорт
	ТекстXML = ДанныеВУниверсальныйПакет(ВерсияФормата, ОбъектXDTO, ИмяИнструмента);
	АдресВХ = ПоместитьВоВременноеХранилище(ТекстXML, УникальныйИдентификаторФормы);
	Возврат АдресВХ;
КонецФункции

#КонецОбласти

#Область ЗагрузкаСохранениеНастроек

// Возвращает сохраненное значение настройки инструмента
//
// Параметры:
//  ИмяИнструмента - Строка -
//  ИмяНастройки - Строка -
//  ЗначениеПоУмолчанию - Произвольный - Будет возвращено, если сохраненная настройка отсутствует
//
// Возвращаемое значение:
//  Произвольный - Значение настройки, либо значение параметра ЗначениеПоУмолчанию
Функция СохраненнаяНастройка(ИмяИнструмента, ИмяНастройки, ЗначениеПоУмолчанию = Неопределено) Экспорт
	Если Не ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	КлючХранилища = ?(ЗначениеЗаполнено(ИмяИнструмента), "Инструментики." + ИмяИнструмента, "Инструментики");
	Значение = ХранилищеОбщихНастроек.Загрузить(КлючХранилища, ИмяНастройки);
	Если Значение = Неопределено Тогда
		Возврат ЗначениеПоУмолчанию;
	Иначе
		Возврат Значение;
	КонецЕсли;
КонецФункции

// Сохраняет значение настройки инструмента
//
// Параметры:
//  ИмяИнструмента - Строка -
//  ИмяНастройки - Строка -
//  Значение - Произвольный - Записываемое значение
Процедура СохранитьНастройку(ИмяИнструмента, ИмяНастройки, Значение) Экспорт
	Если Не ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
		Возврат;
	КонецЕсли;
	
	КлючХранилища = ?(ЗначениеЗаполнено(ИмяИнструмента), "Инструментики." + ИмяИнструмента, "Инструментики");
	ХранилищеОбщихНастроек.Сохранить(КлючХранилища, ИмяНастройки, Значение);
КонецПроцедуры                                                                                      

#КонецОбласти

Функция РежимСовместимостиКонфигурации()
	Если Метаданные.РежимСовместимости = Метаданные.СвойстваОбъектов.РежимСовместимости.НеИспользовать Тогда
		СистемнаяИнформация = Новый СистемнаяИнформация;
		ПолнаяВерсия = СистемнаяИнформация.ВерсияПриложения;
	Иначе
		РежимСтрокой = Строка(Метаданные.РежимСовместимости);
		РежимСтрокой = СтрЗаменить(РежимСтрокой, "Версия", "");
		ПолнаяВерсия = РежимСтрокой;
	КонецЕсли;
	
	Возврат ВерсияПлатформыВДесятичноеЧисло(ПолнаяВерсия);
КонецФункции

Функция ВерсияПлатформы()
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Возврат ВерсияПлатформыВДесятичноеЧисло(СистемнаяИнформация.ВерсияПриложения);
КонецФункции

// Преобразует версию платформы формата "8.3.22.2208" или "8_3_22" в десятичное число вида "3.22"
//
// Параметры:
//  ПолнаяВерсия - Строка -
// 
// Возвращаемое значение:
//  Число
Функция ВерсияПлатформыВДесятичноеЧисло(ПолнаяВерсия)
	ЧастиВерсии = СтрРазделить(ПолнаяВерсия, "_.");
	
	Если ЧастиВерсии.Количество() >= 3 Тогда
		Возврат Число(ЧастиВерсии[1]) + (Число(ЧастиВерсии[2]) / 100);
	Иначе
		Возврат Число(ЧастиВерсии[1]);
	КонецЕсли;
КонецФункции

#Область КрасивыйРедакторКода

//
//
// Параметры:
//  ИдентификаторФормы - УникальныйИдентификатор -
Процедура ИнициализироватьКрасивыйРедакторКода(ИдентификаторФормы) Экспорт
	Если ИмяПриложенияСеанса = "WebClient" Тогда
		Возврат;
	КонецЕсли;
	
	ПутьККрасивомуРедакторуКода = СохраненнаяНастройка(Неопределено, "ПутьККрасивомуРедакторуКода");
	Если ЗначениеЗаполнено(ПутьККрасивомуРедакторуКода) Тогда
		Возврат;
	КонецЕсли;
	
	ДвоичныеДанныеРедактора = ПолучитьМакет("КрасивыйРедакторКода");
	ПутьККрасивомуРедакторуКода = ПоместитьВоВременноеХранилище(ДвоичныеДанныеРедактора, ИдентификаторФормы);
КонецПроцедуры

Функция ВключенаЗащитаОтОпасныхДействий()
	ПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
	Возврат (ЗначениеЗаполнено(ПользовательИБ.Имя) И ПользовательИБ.ЗащитаОтОпасныхДействий.ПредупреждатьОбОпасныхДействиях);
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Инициализация

// BSLLS:UnusedLocalVariable-off
// Ложные срабатывания на реквизиты обработки как на "неиспользуемые переменные"

Версия = "1.6"; // <ВСТАВКА ПАТЧ-ВЕРСИИ>
ИмяМетаданныхОбработки = Метаданные().ПолноеИмя();
БезопасныйРежим = (БезопасныйРежим() <> Ложь);
ИмяПриложенияСеанса = ПолучитьТекущийСеансИнформационнойБазы().ИмяПриложения;
ПравоСохранениеНастроек = ПравоДоступа("СохранениеДанныхПользователя", Метаданные);
РежимСовместимостиКонфигурации = РежимСовместимостиКонфигурации();
ВерсияПлатформы = ВерсияПлатформы();
ВключенаЗащитаОтОпасныхДействий = ВключенаЗащитаОтОпасныхДействий();

НеНапоминатьОбОбновленииДо = СохраненнаяНастройка(Неопределено, "НеНапоминатьОбОбновленииДо");
ЭкспериментальныеФункции = СохраненнаяНастройка(Неопределено, "ЭкспериментальныеФункции");

// BSLLS:UnusedLocalVariable-on

#КонецОбласти
