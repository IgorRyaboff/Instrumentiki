
// --------------------------------------------------------------------------------
// Copyright (c) 2024-2025 Igor Ryabov (https://github.com/IgorRyaboff/Instrumentiki)
// License: https://github.com/IgorRyaboff/Instrumentiki/blob/main/LICENSE
// --------------------------------------------------------------------------------

#Область ОписаниеПеременных

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Параметры.Свойство("ИмяТаблицы", ИмяТаблицы);
	Параметры.Свойство("ИмяТаблицы", ЭтотОбъект.Заголовок);
	
	ТекстЗапроса = "ВЫБРАТЬ * ИЗ " + ИмяТаблицы; // BSLLS:QueryParseError-off (слишком простой запрос)
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	
	ПоляПоУмолчанию = Новый Массив;
	СтандартныеРеквизиты = Новый Массив;
	
	Мета = Метаданные.НайтиПоПолномуИмени(ИмяТаблицы);
	Если Мета <> Неопределено Тогда
		Для Каждого Реквизит Из Мета.СтандартныеРеквизиты Цикл
			СтандартныеРеквизиты.Добавить(Реквизит.Имя);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Колонка Из СхемаЗапроса.ПакетЗапросов[0].Колонки Цикл
		Если ТипЗнч(Колонка) <> Тип("КолонкаСхемыЗапроса") Тогда
			Продолжить;
		КонецЕсли;
		
		Если Колонка.ТипЗначения.СодержитТип(Тип("ХранилищеЗначения")) Тогда
			Продолжить;
		КонецЕсли;
		
		ЭтоСтандартныйРеквизит = (СтандартныеРеквизиты.Найти(Колонка.Псевдоним) <> Неопределено);
		ВключитьПоУмолчанию = (СтандартныеРеквизиты.Количество() = 0 Или ЭтоСтандартныйРеквизит);
		Если ВключитьПоУмолчанию Тогда
			ПоляПоУмолчанию.Добавить(Колонка.Псевдоним);
		КонецЕсли;
		
		ДоступныеРеквизиты.Добавить(Колонка.Псевдоним,, ВключитьПоУмолчанию);
	КонецЦикла;
	
	СписокОбъектов.ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	Если Не Параметры.Свойство("НеУстанавливатьОсновнуюТаблицу") Тогда
		СписокОбъектов.ОсновнаяТаблица = ИмяТаблицы;
	КонецЕсли;
	
	РазместитьВыбранныеПоляНаФорме();
	
	СписокОбъектов.АвтоматическоеСохранениеПользовательскихНастроек = Ложь;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
// Код процедур и функций
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокОбъектов
// Код процедур и функций
#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыбратьПоля(Команда)
	ПараметрыФормы = Новый Структура("Список, Режим", ДоступныеРеквизиты, "ВыборЭлементов");
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораПолей", ЭтотОбъект);
	ОткрытьФорму(Объект.ИмяМетаданныхОбработки + ".Форма.Общая_СписокЗначений", ПараметрыФормы,,,,, ОписаниеОповещения);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Обработчик закрытия формы выбора полей для вывода в списке
//
// Параметры:
//  Результат - Неопределено, СписокЗначений - Список значений с пометками
//  ДополнительныеПараметры - Произвольный - Не используется данной процедурой
&НаКлиенте
Процедура ПослеВыбораПолей(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ДоступныеРеквизиты = Результат;
	
	Поля = Новый Массив;
	Для Каждого ЭлементСписка Из ДоступныеРеквизиты Цикл
		Если Не ЭлементСписка.Пометка Тогда
			Продолжить;
		КонецЕсли;
		Поля.Добавить(ЭлементСписка.Значение);
	КонецЦикла;
	
	РазместитьВыбранныеПоляНаФорме();
КонецПроцедуры

// Удаляет все поля из таблицы Список и создаёт поля для переданных полей динамического списка
//
&НаСервере
Процедура РазместитьВыбранныеПоляНаФорме()
	Пока Элементы.СписокОбъектов.ПодчиненныеЭлементы.Количество() <> 0 Цикл
		Элементы.Удалить(Элементы.СписокОбъектов.ПодчиненныеЭлементы[0]);
	КонецЦикла;
	
	Для Каждого Элемент Из ДоступныеРеквизиты Цикл
		ИмяПоля = Элемент.Значение;
		СписокОбъектов.УстановитьОбязательноеИспользование(ИмяПоля, Элемент.Пометка);
		
		Если Элемент.Пометка Тогда
			Поле = Элементы.Добавить("СписокОбъектов" + ИмяПоля, Тип("ПолеФормы"), Элементы.СписокОбъектов);
			Поле.ПутьКДанным = "СписокОбъектов." + ИмяПоля;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти
