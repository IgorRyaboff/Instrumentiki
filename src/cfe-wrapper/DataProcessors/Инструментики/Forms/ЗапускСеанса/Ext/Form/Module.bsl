
// --------------------------------------------------------------------------------
// Copyright (c) 2025 Igor Ryabov (https://github.com/IgorRyaboff/Instrumentiki)
// License: https://github.com/IgorRyaboff/Instrumentiki/blob/main/LICENSE
// --------------------------------------------------------------------------------

#Область ОписаниеПеременных

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Для Каждого Пользователь Из ПользователиИнформационнойБазы.ПолучитьПользователей() Цикл
		Элементы.ИмяПользователя.СписокВыбора.Добавить(Пользователь.Имя);
	КонецЦикла;
	
	РежимЗапуска = "ТонкийКлиент";
	ИспользоватьАутентификациюОС = ПользователиИнформационнойБазы.ТекущийПользователь().АутентификацияОС;
	ИмяПользователя = ПользователиИнформационнойБазы.ТекущийПользователь().Имя;
	
	МодульОбъекта = РеквизитФормыВЗначение("Объект");
	Если СтрНачинаетсяС(МодульОбъекта.Метаданные().ПолноеИмя(), "ВнешняяОбработка.") Тогда
		ПутьКФайлуОбработки = МодульОбъекта.ИспользуемоеИмяФайла;
	КонецЕсли;
	
	ВариантВыбораИБ = "СтрокаСоединения";
	
	ГСЧ = Новый ГенераторСлучайныхЧисел;
	ВременныйПароль = Формат(ГСЧ.СлучайноеЧисло(1000, 9999), "ЧГ=");
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	СтрокаСоединенияИБ = СтрокаСоединенияИнформационнойБазы();
	ПараметрЗапускаИБ = ПараметрЗапуска;
	
	ПриОткрытииАсинх();
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	Если ВариантВыбораИБ = "ИзСписка" Тогда
		ПроверяемыеРеквизиты.Добавить("ИмяИБВсписке");
	ИначеЕсли ВариантВыбораИБ = "СтрокаСоединения" Тогда
		ПроверяемыеРеквизиты.Добавить("СтрокаСоединенияИБ");
	Иначе
		ВызватьИсключение "Некорректный вариант выбора ИБ: " + ВариантВыбораИБ;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтрокаПодключенияИБПриИзменении(Элемент)
	НастроитьЭлементыФормы();
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьАутентификациюОСПриИзменении(Элемент)
	НастроитьЭлементыФормы();
КонецПроцедуры

&НаКлиенте
Процедура РежимЗапускаПриИзменении(Элемент)
	НастроитьЭлементыФормы();
КонецПроцедуры

&НаКлиенте
Процедура ВариантВыбораИБПриИзменении(Элемент)
	НастроитьЭлементыФормы();
	
	Если ВариантВыбораИБ = "ИзСписка" Тогда
		ТекущийЭлемент = Элементы.ИмяИБВсписке;
	ИначеЕсли ВариантВыбораИБ = "СтрокаСоединения" Тогда
		ТекущийЭлемент = Элементы.СтрокаСоединенияИБ;
	Иначе
		ВызватьИсключение "Некорректный вариант выбора ИБ " + ВариантВыбораИБ;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Асинх Процедура ЗапуститьСеанс(Команда)
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбойтиПароль И Не ИспользоватьАутентификациюОС И Объект.ВключенаЗащитаОтОпасныхДействий Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Защита от опасных действий может препятствовать нормальной работе функции ""Обойти пароль"".
                                       |Перейдите на главную форму обработки, отключите защиту от опасных действий и перезапустите сеанс 1С.'")
			,, НСтр("ru='Включена защита от опасных действий'"));
		//
		Возврат;
	КонецЕсли;
	
	ПараметрыЗапуска = ПараметрыЗапускаСеанса();
	
	ВидКлиента = Неопределено;
	
	Если URLВебКлиента(СтрокаСоединенияИБ) = Неопределено Тогда // Это строка соединения десктопного клиента
		#Если ВебКлиент Тогда
			ПоказатьПредупреждение(, "Из веб-клиента доступно только начало сеанса веб-клиента",, "Ой, у вас веб-клиент!");
			Возврат;
		#Иначе
			ВидКлиента = "Десктоп";
		#КонецЕсли
	Иначе // Это строка соединения через веб-сервер
		#Если Не ВебКлиент Тогда
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить("Веб", "Веб-клиент");
			Кнопки.Добавить("Десктоп", "Десктопный клиент");
			Кнопки.Добавить(Неопределено, "Отмена");
			
			ВидКлиента = Ждать ВопросАсинх("Как запустить сеанс?", Кнопки);
			Если ВидКлиента = Неопределено Тогда
				Возврат;
			КонецЕсли;
		#Иначе
			ВидКлиента = "Веб";
		#КонецЕсли
	КонецЕсли;
	
	Если ВыполняетсяПодменаПароля() Тогда
		Состояние("Подменяем пароль...");
		ОригинальныеНастройкиАутентификацииПользователя = ПодменитьПарольПользователя(ИмяПользователя, ВременныйПароль);
		Состояние("Пароль подменен");
	КонецЕсли;
	
	Если ВидКлиента = "Веб" Тогда
		СтрокаЗапуска = СтрокаЗапускаВеб(ПараметрыЗапуска);
		Если СтрокаЗапуска = Неопределено Тогда
			ПоказатьПредупреждение(, "Указана некорректная строка соединения");
			Возврат;
		КонецЕсли;
		
		Попытка
			ПерейтиПоНавигационнойСсылке(СтрокаЗапуска);
		Исключение
			ЭтоОшибкаПерехода = ИнформацияОбОшибке().ЯвляетсяОшибкойКатегории(КатегорияОшибки.ОшибкаПереходаПоНавигационнойСсылке);
			Если СтрНачинаетсяС(СтрокаЗапуска, "http:") И ЭтоОшибкаПерехода Тогда
				ПоказатьПредупреждение(, "Платформа не позволила перейти по ссылке. Нажмите ""ОК"", скопируйте ссылку внизу окна и перейдите по ней вручную");
				Сообщить(СтрокаЗапуска);
				ВызватьВосстановлениеНастроекАутентификацииПользователяАсинх();
				Возврат;
			Иначе
				ВызватьИсключение;
			КонецЕсли;
		КонецПопытки;
	ИначеЕсли ВидКлиента = "Десктоп" Тогда
		Ждать ЗапуститьПриложениеАсинх(СтрокаЗапускаДесктоп(ПараметрыЗапуска));
	КонецЕсли;
	
	Если ЗакрытьЭтуФорму Тогда
		Ждать ВызватьВосстановлениеНастроекАутентификацииПользователяАсинх();
		Закрыть();
	КонецЕсли;
	
	Если ЗавершитьТекущийСеанс Тогда
		Ждать ВызватьВосстановлениеНастроекАутентификацииПользователяАсинх();
		ЗавершитьРаботуСистемы();
	КонецЕсли;
	
	ВызватьВосстановлениеНастроекАутентификацииПользователяАсинх();
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКомандуКоманднойСтроки(Команда)
	Если Объект.ИмяПриложенияСеанса = "WebClient" Тогда
		ПоказатьПредупреждение(, НСтр("ru='Данная функция недоступна в веб-клиенте'"),, НСтр("ru='Ой, у вас веб-клиент!'"));
		Возврат;
	КонецЕсли;
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаЗапуска = СтрокаЗапускаДесктоп(ПараметрыЗапускаСеанса());
	ВвестиСтрокуАсинх(СтрокаЗапуска, НСтр("ru='Вот ваша команда :)'"));
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ПараметрыЗапускаСеанса()
	ПараметрыЗапуска = Новый Структура;
	ПараметрыЗапуска.Вставить("РежимЗапуска", РежимЗапуска);
	
	Если ВариантВыбораИБ = "ИзСписка" Тогда
		ПараметрыЗапуска.Вставить("ИмяИБВсписке", ИмяИБВсписке);
	ИначеЕсли ВариантВыбораИБ = "СтрокаСоединения" Тогда
		ПараметрыЗапуска.Вставить("СтрокаСоединения", СтрокаСоединенияИБ);
	Иначе
		ВызватьИсключение "Некорректный вариант выбора ИБ: " + ВариантВыбораИБ;
	КонецЕсли;
	
	
	Если ИспользоватьАутентификациюОС Тогда
		ПараметрыЗапуска.Вставить("ИспользоватьАутентификациюОС", Истина);
	Иначе
		ПараметрыЗапуска.Вставить("ИспользоватьАутентификациюОС", Ложь);
		Если ЗначениеЗаполнено(ИмяПользователя) Тогда
			ПараметрыЗапуска.Вставить("ИмяПользователя", ИмяПользователя);
		КонецЕсли;
		
		Если ВыполняетсяПодменаПароля() Тогда
			ПараметрыЗапуска.Вставить("Пароль", ВременныйПароль);
		ИначеЕсли ЗначениеЗаполнено(Пароль) Тогда
			ПараметрыЗапуска.Вставить("Пароль", Пароль);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КодРазрешения) Тогда
		ПараметрыЗапуска.Вставить("КодРазрешения", КодРазрешения);
	КонецЕсли;
	Если АвтозапускИнструментиков Тогда
		ПараметрыЗапуска.Вставить("ПутьКФайлуОбработки", ПутьКФайлуОбработки);
	КонецЕсли;
	
	Возврат ПараметрыЗапуска;
КонецФункции

Функция ВыполняетсяПодменаПароля()
	Возврат ОбойтиПароль И Не ИспользоватьАутентификациюОС И Не ЗакрытьЭтуФорму И Не ЗавершитьТекущийСеанс;
КонецФункции

// Оборачивает строку в кавычки, экранируя при этом имеющиеся в строке кавычки
//
// Параметры:
//  Строка - Строка -
//
// Возвращаемое значение:
//  Строка -
&НаКлиентеНаСервереБезКонтекста
Функция СтрокаВКавычках(Строка)
	Возврат """" + СтрЗаменить(Строка, """", """""") + """";
КонецФункции

// Устанавливает доступность и другие параметры элементов форм в зависимости от данных
//
&НаКлиенте
Процедура НастроитьЭлементыФормы()
	Элементы.ВариантВыбораИБИзСписка.Доступность = (Объект.ИмяПриложенияСеанса <> "WebClient");
	Элементы.ИмяИБВсписке.Доступность = (ВариантВыбораИБ = "ИзСписка");
	Элементы.СтрокаСоединенияИБ.Доступность = (ВариантВыбораИБ = "СтрокаСоединения");
	
	ЭтоСтрокаСоединенияДесктопногоКлиента = (URLВебКлиента(СтрокаСоединенияИБ) = Неопределено);
	Если Не ЭтоСтрокаСоединенияДесктопногоКлиента Тогда
		РежимЗапуска = "ТонкийКлиент";
		ИспользоватьАутентификациюОС = Ложь;
		АвтозапускИнструментиков = Ложь;
	КонецЕсли;
	
	Если РежимЗапуска <> "ТонкийКлиент" И РежимЗапуска <> "ТолстыйКлиентУФ" Тогда
		АвтозапускИнструментиков = Ложь;
	КонецЕсли;
	
	Элементы.ГруппаАутентификация1С.Доступность = Не ИспользоватьАутентификациюОС;
	Элементы.АвтозапускИнструментиков.Доступность = Не ПустаяСтрока(ПутьКФайлуОбработки)
		И ЭтоСтрокаСоединенияДесктопногоКлиента
		И (РежимЗапуска = "ТонкийКлиент" Или РежимЗапуска = "ТолстыйКлиентУФ");
	Элементы.ИспользоватьАутентификациюОС.Доступность = ЭтоСтрокаСоединенияДесктопногоКлиента;
	Элементы.РежимЗапуска.Доступность = ЭтоСтрокаСоединенияДесктопногоКлиента;
КонецПроцедуры

&НаКлиенте
Асинх Процедура ПриОткрытииАсинх()
	#Если ВебКлиент Тогда
		ПутьКФайлуОбработки = Неопределено;
	#Иначе
		Если ЗначениеЗаполнено(ПутьКФайлуОбработки) Тогда
			Файл = Новый Файл(ПутьКФайлуОбработки);
			Если Ждать Файл.СуществуетАсинх() Тогда
				АвтозапускИнструментиков = Истина;
			Иначе
				Сообщить(СтрШаблон("Не удалось настроить автозапуск Инструментиков, т.к. путь %1 не является корректным", ПутьКФайлуОбработки));
				ПутьКФайлуОбработки = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьСписокВыбораИБ();
	#КонецЕсли
	
	НастроитьЭлементыФормы();
КонецПроцедуры

&НаКлиенте
Асинх Процедура ЗаполнитьСписокВыбораИБ()
	#Если Не ВебКлиент Тогда
		СистемнаяИнформация = Новый СистемнаяИнформация;
		Если СистемнаяИнформация.ТипПлатформы <> ТипПлатформы.Windows_x86
			И СистемнаяИнформация.ТипПлатформы <> ТипПлатформы.Windows_x86_64 Тогда
			
			Возврат;
			
		КонецЕсли;
		
		// BSLLS:UsingObjectNotAvailableUnix-off
		// Поддержка Linux и macOS не планируется
		Shell = Новый COMОбъект("WScript.Shell");
		// BSLLS:UsingObjectNotAvailableUnix-on
		ИмяФайла = Shell.ExpandEnvironmentStrings("%appdata%") + "\1C\1CEStart\ibases.v8i";
		
		ФайлОС = Новый Файл(ИмяФайла);
		Если Не Ждать ФайлОС.СуществуетАсинх() Тогда
			Возврат;
		КонецЕсли;
		
		ЧтениеТекста = Новый ЧтениеТекста(ИмяФайла);
		СодержимоеФайла = ЧтениеТекста.Прочитать();
		ЧтениеТекста.Закрыть();
		
		ТекущееИмяИБ = Неопределено;
		
		Для Каждого СтрокаФайла Из СтрРазделить(СодержимоеФайла, Символы.ПС, Ложь) Цикл
			ЭтоИмяИБ = (СтрНачинаетсяС(СтрокаФайла, "[") И СтрЗаканчиваетсяНа(СтрокаФайла, "]"));
			ЭтоСтрокаПодключения = СтрНачинаетсяС(СтрокаФайла, "Connect=");
			
			Если ЭтоИмяИБ Тогда
				ТекущееИмяИБ = Сред(СтрокаФайла, 2, СтрДлина(СтрокаФайла) - 2);
			КонецЕсли;
			
			Если ЭтоСтрокаПодключения Тогда
				ОтрезаемаяДлина = СтрДлина("Connect=");
				СтрокаСоединения = Сред(СтрокаФайла, ОтрезаемаяДлина + 1);
				
				Представление = СтрШаблон("%1 (%2)", ТекущееИмяИБ, СтрокаСоединения);
				Элементы.ИмяИБВсписке.СписокВыбора.Добавить(ТекущееИмяИБ, Представление);
				
				Если СтрокаСоединения = СтрокаСоединенияИБ Тогда
					ИмяИБВсписке = ТекущееИмяИБ;
					
					ВариантВыбораИБ = "ИзСписка";
					НастроитьЭлементыФормы();
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Элементы.ИмяИБВсписке.СписокВыбора.СортироватьПоЗначению();
		Элементы.ИмяИБВсписке.КнопкаВыпадающегоСписка = (Элементы.ИмяИБВсписке.СписокВыбора.Количество() > 0);
	#КонецЕсли
КонецПроцедуры

// Подготавливает строку запуска для процедуры ЗапуститьПриложениеАсинх
//
// Параметры:
//  ПараметрыЗапуска - Структура -
//
// Возвращаемое значение:
//  Строка -
&НаКлиентеНаСервереБезКонтекста
Функция СтрокаЗапускаДесктоп(ПараметрыЗапуска)
	# Если Не ВебКлиент Тогда
		Если ПараметрыЗапуска.РежимЗапуска = "ТонкийКлиент" Тогда
			ПутьКИсполняемомуФайлу = КаталогПрограммы() + "1cv8c.exe";
		Иначе
			ПутьКИсполняемомуФайлу = КаталогПрограммы() + "1cv8.exe";
		КонецЕсли;
		
		Аргументы = Новый Массив;
		Аргументы.Добавить(?(ПараметрыЗапуска.РежимЗапуска = "Конфигуратор", "DESIGNER", "ENTERPRISE"));
		
		Если ПараметрыЗапуска.Свойство("СтрокаСоединения") Тогда
			Аргументы.Добавить("/IBConnectionString " + СтрокаВКавычках(ПараметрыЗапуска.СтрокаСоединения));
		ИначеЕсли ПараметрыЗапуска.Свойство("ИмяИБВСписке") Тогда
			Аргументы.Добавить("/IBName " + СтрокаВКавычках(ПараметрыЗапуска.ИмяИБВСписке));
		Иначе
			ВызватьИсключение "Невозможно определить информационную базу";
		КонецЕсли;
		
		Если ПараметрыЗапуска.Свойство("ИмяПользователя") Тогда
			Аргументы.Добавить("/N " + СтрокаВКавычках(ПараметрыЗапуска.ИмяПользователя));
		КонецЕсли;
		
		Если ПараметрыЗапуска.Свойство("Пароль") Тогда
			Аргументы.Добавить("/P " + СтрокаВКавычках(ПараметрыЗапуска.Пароль));
		КонецЕсли;
		
		Аргументы.Добавить("/WA" + ?(ПараметрыЗапуска.ИспользоватьАутентификациюОС, "+", "-"));
		
		Если ПараметрыЗапуска.Свойство("КодРазрешения") Тогда
			Аргументы.Добавить("/UC " + СтрокаВКавычках(ПараметрыЗапуска.КодРазрешения));
		КонецЕсли;
		
		Если ПараметрыЗапуска.Свойство("ПутьКФайлуОбработки") Тогда
			Аргументы.Добавить("/Execute " + СтрокаВКавычках(ПараметрыЗапуска.ПутьКФайлуОбработки));
		КонецЕсли;
		
		Результат = СтрокаВКавычках(ПутьКИсполняемомуФайлу) + " " + СтрСоединить(Аргументы, " ");
		Если ПараметрыЗапуска.Свойство("ДополнительныеПараметры") Тогда
			Результат = Результат + ПараметрыЗапуска.ДополнительныеПараметры;
		КонецЕсли;
		
		Возврат Результат;
	#КонецЕсли
КонецФункции

// Подготавливает URL для запуска сеанса в веб-клиенте
//
// Параметры:
//  ПараметрыЗапуска - Структура -
//
// Возвращаемое значение:
//  Строка -
&НаКлиенте
Функция СтрокаЗапускаВеб(ПараметрыЗапуска)
	Аргументы = Новый Соответствие;
	
	Если ПараметрыЗапуска.Свойство("ИмяПользователя") Тогда
		Аргументы.Вставить("N", ПараметрыЗапуска.ИмяПользователя);
	КонецЕсли;
	
	Если ПараметрыЗапуска.Свойство("Пароль") Тогда
		Аргументы.Вставить("P", ПараметрыЗапуска.Пароль);
	КонецЕсли;
	
	Если ПараметрыЗапуска.Свойство("КодРазрешения") Тогда
		Аргументы.Вставить("UC", ПараметрыЗапуска.КодРазрешения);
	КонецЕсли;
	
	КодироватьСтрокиВСтруктуреКакПараметрURL(Аргументы);
	АргументыКлючЗначение = Новый Массив;
	Для Каждого КлючЗнч Из Аргументы Цикл
		Если ЗначениеЗаполнено(КлючЗнч.Значение) Тогда
			АргументыКлючЗначение.Добавить(КлючЗнч.Ключ + "=" + КлючЗнч.Значение);
		Иначе
			АргументыКлючЗначение.Добавить(КлючЗнч.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	АдресРесурса = URLВебКлиента(ПараметрыЗапуска.СтрокаСоединения);
	Если АдресРесурса = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = АдресРесурса;
	АргументыРезультат = СтрСоединить(АргументыКлючЗначение, "&");
	Если Не ПустаяСтрока(АргументыРезультат) Тогда
		Результат = Результат + "?" + АргументыРезультат;
	КонецЕсли;
	Возврат Результат;
КонецФункции

// Получает адрес веб-клиента из строки соединения, содержащей параметр "ws"
//
// Параметры:
//  СтрокаСоединения - Строка
//
// Возвращаемое значение:
//  Строка, Неопределено -
&НаКлиентеНаСервереБезКонтекста
Функция URLВебКлиента(СтрокаСоединения)
	Для Каждого КлючЗнч Из СтрРазделить(СтрокаСоединения, ";", Ложь) Цикл
		Ключ = СокрЛП(Лев(КлючЗнч, СтрНайти(КлючЗнч, "=") - 1));
		Если НРег(Ключ) <> "ws" Тогда
			Продолжить;
		КонецЕсли;
		
		Значение = Сред(КлючЗнч, СтрНайти(КлючЗнч, "=") + 1);

		Значение = Сред(Значение, 2, СтрДлина(Значение) - 2);
		Значение = СтрЗаменить(Значение, """""", """");
		Возврат Значение;
	КонецЦикла;
КонецФункции

&НаСервереБезКонтекста
Процедура КодироватьСтрокиВСтруктуреКакПараметрURL(Структура)
	ИменаСвойств = СтрРазделить(СтрЗаменить(ИменаСвойств, " ", ""), ",");
	
	Для Каждого КлючЗнч Из Структура Цикл
		Если ТипЗнч(КлючЗнч.Значение) = Тип("Строка") Тогда
			Структура[КлючЗнч.Ключ] = КодироватьСтроку(КлючЗнч.Значение, СпособКодированияСтроки.КодировкаURL);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Меняет пароль пользователя на переданный и устанавливает свойство "Аутентификация стандартная" в значение Истина
//
// Параметры:
//  ИмяПользователя - Строка -
//  ВременныйПароьль - Строка - Устанавливаемый пароль
//
// Возвращаемое значение:
//  ХранилищеЗначения - Содержит значение типа Структура:
//  * Имя - Строка - Совпадает со значением параметра ИмяПользователя
//  * АутентификацияСтандартная - Булево -
//  * СохраняемоеЗначениеПароля - Строка -
&НаСервереБезКонтекста
Функция ПодменитьПарольПользователя(Знач ИмяПользователя, Знач ВременныйПароль)
	Пользователь = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователя);
	Если Пользователь = Неопределено Тогда
		ВызватьИсключение "Пользователь не найден";
	КонецЕсли;
	
	ОригинальныеНастройки = Новый Структура("Имя, АутентификацияСтандартная, СохраняемоеЗначениеПароля");
	ЗаполнитьЗначенияСвойств(ОригинальныеНастройки, Пользователь);
	
	Пользователь.АутентификацияСтандартная = Истина;
	// Устанавливаем напрямую хеш-сумму пароля для обхода ограничений по сложности паролей в ИБ
	Пользователь.СохраняемоеЗначениеПароля = ХешСуммаПароляПользователяИБ(ВременныйПароль);
	Пользователь.Записать();
	
	Возврат Новый ХранилищеЗначения(ОригинальныеНастройки);
КонецФункции

&НаСервереБезКонтекста
Функция ХешСуммаПароляПользователяИБ(ИсходныйПароль)
	ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.SHA1);
	ХешированиеДанных.Добавить(ИсходныйПароль);
	ХешСумма = Base64Строка(ХешированиеДанных.ХешСумма);
	
	ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.SHA1);
	ХешированиеДанных.Добавить(ВРег(ИсходныйПароль));
	ХешСумма = ХешСумма + "," + Base64Строка(ХешированиеДанных.ХешСумма);
	
	Возврат ХешСумма;
КонецФункции

// Выдает диалоговое окно, после нажатия в нем "ОК" вызывает ВернутьОригинальныеНастройкиАутентификацииПользователя()
//
&НаКлиенте
Асинх Функция ВызватьВосстановлениеНастроекАутентификацииПользователяАсинх()
	Если ОригинальныеНастройкиАутентификацииПользователя = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЧастиТекстаПредупреждения = Новый Массив;
	ЧастиТекстаПредупреждения.Добавить(НСтр("ru = 'Пароль пользователя был заменен на временный для возможности аутентификации без пароля
                                             |После запуска сеанса нажмите ""ОК"" в данном окне, чтобы восстановить прежние настройки аутентификации
                                             |Временно установленный пароль: '") + ВременныйПароль);
	
	Ждать ПредупреждениеАсинх(Новый ФорматированнаяСтрока(ЧастиТекстаПредупреждения));
	
	Состояние("Возвращаем настройки...");
	ВернутьОригинальныеНастройкиАутентификацииПользователя(ОригинальныеНастройкиАутентификацииПользователя);
	ОригинальныеНастройкиАутентификацииПользователя = Неопределено;
	Состояние("Вернули все как было");
КонецФункции

// Возвращает старые настройки аутентификации пользователя
//
// Параметры:
//  Настройки - ХранилищеЗначения - Должно содержать структуру:
//  * Имя - Строка -
//  * АутентификацияСтандартная - Булево -
//  * СохраняемоеЗначениеПароля - Строка -
&НаСервереБезКонтекста
Процедура ВернутьОригинальныеНастройкиАутентификацииПользователя(Знач Настройки)
	ОригинальныеНастройки = Настройки.Получить();
	
	Пользователь = ПользователиИнформационнойБазы.НайтиПоИмени(ОригинальныеНастройки.Имя);
	ЗаполнитьЗначенияСвойств(Пользователь, ОригинальныеНастройки, "АутентификацияСтандартная, СохраняемоеЗначениеПароля");
	Пользователь.Записать();
КонецПроцедуры

#КонецОбласти
