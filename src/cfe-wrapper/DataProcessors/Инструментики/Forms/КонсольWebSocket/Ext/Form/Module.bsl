
// --------------------------------------------------------------------------------
// Copyright (c) 2024-2025 Igor Ryabov (https://github.com/IgorRyaboff/Instrumentiki)
// License: https://github.com/IgorRyaboff/Instrumentiki/blob/main/LICENSE
// --------------------------------------------------------------------------------

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	АдресСервера = "wss://echo.websocket.org";
	Таймаут = 30;
	НастроитьФорму(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если Объект.ВерсияПлатформы < 3.27 Тогда
		ПоказатьПредупреждение(, НСтр("ru='Для использования WebSocket требуется платформа версии 8.3.27 или выше'"));
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если ЗначениеЗаполнено(ИдентификаторСоединения) Тогда
		Соединение = ТекущееСоединение();
		Соединение.Закрыть();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСообщения

&НаКлиенте
Процедура СообщенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле.Имя = "СообщенияТекст" Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = Элементы.Сообщения.ТекущиеДанные.Текст;
		Сообщение.Сообщить();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УстановитьРазорватьСоединение(Команда)
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	СоединениеСуществует = ЗначениеЗаполнено(ИдентификаторСоединения);
	
	Если СоединениеСуществует Тогда
		Соединение = ТекущееСоединение();
		ДобавитьСообщение(ТипСообщенияСостояниеСоединения(), НСтр("ru = 'Инициировано закрытие соединения пользователем';
			|en = 'Connection closing initiated by user'"));
		Соединение.Закрыть();
	Иначе
		Обработчики = Новый("ОбработчикиWebSocketКлиентСоединения");
		Обработчики.Модуль = ЭтотОбъект;
		Обработчики.ОбработчикОткрытияСоединения = "ПриОткрытииWebSocketСоединения";
		Обработчики.ОбработчикПолученияСообщения = "ПриПолученииСообщенияПоWebSocket";
		Обработчики.ОбработчикЗакрытияСоединения = "ПриЗакрытииWebSocketСоединения";
		Обработчики.ОбработчикОшибки = "ПриВозникновенииОшибкиWebSocketСоединения";
		
		ПараметрыСоединения = Новый("ПараметрыWebSocketКлиентСоединения");
		ПараметрыСоединения.Пользователь = Логин;
		ПараметрыСоединения.Пароль = Пароль;
		ПараметрыСоединения.Таймаут = Таймаут;
		Для Каждого СтрЗаголовки Из Заголовки Цикл
			ПараметрыСоединения.Заголовки[СтрЗаголовки.Имя] = СтрЗаголовки.Значение;
		КонецЦикла;
		
		ИдентификаторСоединения = Новый УникальныйИдентификатор;
		Попытка
			МенеджерСоединений = Вычислить("WebSocketКлиентСоединения");
			МенеджерСоединений.ОткрытьСоединение(ИдентификаторСоединения,
				АдресСервера, Обработчики, ПараметрыСоединения);
			//
		Исключение
			ИдентификаторСоединения = Неопределено;
			ВызватьИсключение;
		КонецПопытки;
		
		ДобавитьСообщение(ТипСообщенияСостояниеСоединения(), НСтр("ru = 'Начало установки соединения...';
			|en = 'Establishing connection...'"));
		НастроитьФорму(ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Асинх Процедура ОтправитьТекст(Команда)
	Текст = Ждать ВвестиСтрокуАсинх("",,, Истина);
	Если Текст = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Соединение = ТекущееСоединение();
	Соединение.ОтправитьСообщение(Текст);
	ДобавитьСообщение(ТипСообщенияИсходящееСообщение(), Текст);
КонецПроцедуры

&НаКлиенте
Асинх Процедура ОтправитьФайл(Команда)
	ПараметрыДиалога = Новый ПараметрыДиалогаПомещенияФайлов;
	
	ОписаниеПомещенногоФайла = Ждать ПоместитьФайлНаСерверАсинх(,,, ПараметрыДиалога, УникальныйИдентификатор);
	Если ОписаниеПомещенногоФайла = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДвоичныеДанные = Ждать ОписаниеПомещенногоФайла.СсылкаНаФайл.ПолучитьКакДвоичныеДанныеАсинх();
	
	Соединение = ТекущееСоединение();
	Соединение.ОтправитьСообщение(ДвоичныеДанные);
	ДобавитьСообщение(ТипСообщенияИсходящееСообщение(), НСтр("ru = '<двоичные данные>'; en = '<binary data>'"));
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСообщенияКоманда(Команда)
	Сообщения.Очистить();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиWebSocketКлиентСоединения

&НаКлиенте
Процедура ПриОткрытииWebSocketСоединения(Соединение) Экспорт
	Если Не Открыта() Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьСообщение(ТипСообщенияСостояниеСоединения(), НСтр("ru = 'Соединение открыто';
		|en = 'Connection has been opened'"));
	
	СоединениеОткрыто = Истина;
	НастроитьФорму(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПриПолученииСообщенияПоWebSocket(Соединение, Сообщение) Экспорт
	Если Не Открыта() Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьСообщение(ТипСообщенияВходящееСообщение(), Сообщение);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытииWebSocketСоединения(Соединение, КодЗакрытия) Экспорт
	Если Не Открыта() Тогда
		Возврат;
	КонецЕсли;
	
	Шаблон = НСтр("ru = 'Соединение закрыто с кодом %1';
		|en = 'Connection has been closed with code %1'");
	ДобавитьСообщение(ТипСообщенияСостояниеСоединения(), СтрШаблон(Шаблон, Формат(КодЗакрытия, "ЧН=0; ЧГ=")));
	
	ИдентификаторСоединения = Неопределено;
	СоединениеОткрыто = Ложь;
	НастроитьФорму(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПриВозникновенииОшибкиWebSocketСоединения(Соединение, КодОшибки, Описание) Экспорт
	Если Не Открыта() Тогда
		Возврат;
	КонецЕсли;
	
	Шаблон = НСтр("ru = 'Возникла ошибка соединения. Код: %1, описание: %2';
		|en = 'An error has occurred. Code: %1, description: %2'");
	ДобавитьСообщение(ТипСообщенияСостояниеСоединения(), СтрШаблон(Шаблон, КодОшибки, Описание));
	
	Если Не СоединениеОткрыто Тогда
		// Это ошибка открытия соединения. Обработчик закрытия соединения не будет вызван, т.к. соединение не было открыто
		ИдентификаторСоединения = Неопределено;
		НастроитьФорму(ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьФорму(Форма)
	СоединениеСуществует = ЗначениеЗаполнено(Форма.ИдентификаторСоединения);
	СоединениеОткрыто = Форма.СоединениеОткрыто;
	
	ЗаголовокКнопки = "";
	Если СоединениеСуществует Тогда
		ЗаголовокКнопки = НСтр("ru = 'Разорвать соединение'; en = 'Close connection'");
	Иначе
		ЗаголовокКнопки = НСтр("ru = 'Установить соединение'; en = 'Open connection'");
	КонецЕсли;
	Форма.Элементы.ФормаУстановитьРазорватьСоединение.Заголовок = ЗаголовокКнопки;
	
	Форма.Элементы.ФормаУстановитьРазорватьСоединение.Доступность = Не СоединениеСуществует Или СоединениеОткрыто;
	Форма.Элементы.ГруппаПараметрыПодключения.ТолькоПросмотр = СоединениеСуществует;
	
	Форма.Элементы.СообщенияОтправитьТекст.Доступность = СоединениеОткрыто;
	Форма.Элементы.СообщенияОтправитьФайл.Доступность = СоединениеОткрыто;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСообщение(ТипСообщения, Текст)
	Сообщение = Сообщения.Вставить(0);
	// BSLLS:DeprecatedCurrentDate-off
	// Согласование даты с сервером не требуется
	Сообщение.Дата = ТекущаяДата();
	Сообщение.Миллисекунды = ТекущаяУниверсальнаяДатаВМиллисекундах() % 1000;
	// BSLLS:DeprecatedCurrentDate-on
	Сообщение.ТипСообщения = ТипСообщения;
	Сообщение.Текст = Текст;
	
	ИндексыКартинок = Новый Соответствие;
	ИндексыКартинок[ТипСообщенияСостояниеСоединения()] = 1;
	ИндексыКартинок[ТипСообщенияВходящееСообщение()] = 2;
	ИндексыКартинок[ТипСообщенияИсходящееСообщение()] = 3;
	Сообщение.ИндексКартинки = ИндексыКартинок[ТипСообщения];
	
	Элементы.Сообщения.ТекущаяСтрока = Сообщение.ПолучитьИдентификатор();
КонецПроцедуры

&НаКлиенте
Функция ТипСообщенияСостояниеСоединения()
	Возврат "СостояниеСоединения";
КонецФункции

&НаКлиенте
Функция ТипСообщенияВходящееСообщение()
	Возврат "ВходящееСообщение";
КонецФункции

&НаКлиенте
Функция ТипСообщенияИсходящееСообщение()
	Возврат "ИсходящееСообщение";
КонецФункции

&НаКлиенте
Функция ТекущееСоединение()
	МенеджерСоединений = Вычислить("WebSocketКлиентСоединения");
	Соединение = МенеджерСоединений.ПолучитьСоединение(ИдентификаторСоединения);
	Если Соединение <> Неопределено Тогда
		Возврат Соединение;
	Иначе
		ВызватьИсключение НСтр("ru = 'Соединение не существует'; en = 'Connection does not exist'");
	КонецЕсли;
КонецФункции

#КонецОбласти
