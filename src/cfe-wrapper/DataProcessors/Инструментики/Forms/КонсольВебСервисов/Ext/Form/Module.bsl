
#Область ОбработчикиСобытийФормы

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДерево

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоПараметрыФайла

&НаКлиенте
Процедура ДеревоПараметрыФайлаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле.Имя = "ДеревоПараметрыФайлаЗначение" Тогда
		СтрПараметры = Элемент.ТекущиеДанные;
		Если СтрПараметры.ЭтоОбъект Тогда
			СтандартнаяОбработка = Ложь;
			РедактироватьЗначениеПараметраОбъекта(СтрПараметры);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Асинх Процедура ПолучитьОпределениеПоURL(Команда)
	URL = Ждать ВвестиСтрокуАсинх("", "Введите URL");
	Если URL = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекстОпределения = ОпределениеПоURL(URL);
	ПослеЗагрузкиТекстаОпределения();
КонецПроцедуры

&НаКлиенте
Асинх Процедура ПолучитьОпределениеИзФайла(Команда)
	Фильтр = "Файлы определений WSDL (*.xml)|*.xml|Все файлы|*";
	ПараметрыДиалога = Новый ПараметрыДиалогаПомещенияФайлов(,, Фильтр);
	
	ОписаниеПомещенногоФайла = Ждать ПоместитьФайлНаСерверАсинх(,,, ПараметрыДиалога, УникальныйИдентификатор);
	Если ОписаниеПомещенногоФайла <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекстОпределения = Ждать ОписаниеПомещенногоФайла.СсылкаНаФайл.ПолучитьКакСтрокуАсинх();
	ПослеЗагрузкиТекстаОпределения();
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОперацию(Команда)
	СтрДерево = Элементы.Дерево.ТекущиеДанные;
	Если СтрДерево = Неопределено Или СтрДерево.ТипСтроки <> "Файл" Тогда
		ПоказатьПредупреждение(, "Выберите файл в списке слева");
		Возврат;
	КонецЕсли;
	
	ВыполнитьОперациюНаСервере(СтрДерево.ПолучитьИдентификатор());
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ОпределениеПоURL(Знач URL)
	СтруктураURI = СтруктураURI(URL);
	
	ЗащищенноеСоединение = Неопределено;
	Если ВРег(СтруктураURI.Схема) = "HTTP" Тогда
		ЗащищенноеСоединение = Неопределено;
	ИначеЕсли ВРег(СтруктураURI.Схема) = "HTTPS" Тогда
		ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL;
	Иначе
		ВызватьИсключение "Недопустимая схема (допускается HTTP и HTTPS)";
	КонецЕсли;
	
	Соединение = Новый HTTPСоединение(СтруктураURI.Хост, СтруктураURI.Порт, СтруктураURI.Логин, СтруктураURI.Пароль,,
		10, ЗащищенноеСоединение);
	//
	Запрос = Новый HTTPЗапрос(СтруктураURI.ПутьНаСервере);
	
	РезультатЗапроса = Соединение.Получить(Запрос);
	Если РезультатЗапроса.КодСостояния <> 200 Тогда
		ВызватьИсключение СтрШаблон("Удаленный сервер сообщил код состояния HTTP %1", РезультатЗапроса.КодСостояния);
	КонецЕсли;
	
	Если РезультатЗапроса.Заголовки["Content-Type"] = Неопределено Тогда
		ВызватьИсключение "Удаленный сервер не передал заголовок Content-Type";
	КонецЕсли;
	Если СтрРазделить(РезультатЗапроса.Заголовки["Content-Type"], ";")[0] <> "text/xml" Тогда
		Шаблон = "Удаленный сервер вернул данные недопустимого типа (%1)";
		ВызватьИсключение СтрШаблон(Шаблон, РезультатЗапроса.Заголовки["Content-Type"]);
	КонецЕсли;
	
	Возврат РезультатЗапроса.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
// Разбирает строку URI на составные части и возвращает в виде структуры.
// На основе RFC 3986.
//
///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////
//
//
// Параметры:
//  СтрокаURI - Строка - ссылка на ресурс в формате:
//                       <схема>://<логин>:<пароль>@<хост>:<порт>/<путь>?<параметры>#<якорь>.
//
// Возвращаемое значение:
//  Структура - составные части URI согласно формату:
//   * Схема         - Строка - схема из URI.
//   * Логин         - Строка - логин из URI.
//   * Пароль        - Строка - пароль из URI.
//   * ИмяСервера    - Строка - часть <хост>:<порт> из URI.
//   * Хост          - Строка - хост из URI.
//   * Порт          - Строка - порт из URI.
//   * ПутьНаСервере - Строка - часть <путь>?<параметры>#<якорь> из URI.
//
Функция СтруктураURI(Знач СтрокаURI) Экспорт
	
	СтрокаURI = СокрЛП(СтрокаURI);
	
	// схема
	Схема = "";
	Позиция = СтрНайти(СтрокаURI, "://");
	Если Позиция > 0 Тогда
		Схема = НРег(Лев(СтрокаURI, Позиция - 1));
		СтрокаURI = Сред(СтрокаURI, Позиция + 3);
	КонецЕсли;
	
	// Строка соединения и путь на сервере.
	СтрокаСоединения = СтрокаURI;
	ПутьНаСервере = "";
	Позиция = СтрНайти(СтрокаСоединения, "/");
	Если Позиция > 0 Тогда
		ПутьНаСервере = Сред(СтрокаСоединения, Позиция + 1);
		СтрокаСоединения = Лев(СтрокаСоединения, Позиция - 1);
	КонецЕсли;
	
	// Информация пользователя и имя сервера.
	СтрокаАвторизации = "";
	ИмяСервера = СтрокаСоединения;
	Позиция = СтрНайти(СтрокаСоединения, "@", НаправлениеПоиска.СКонца);
	Если Позиция > 0 Тогда
		СтрокаАвторизации = Лев(СтрокаСоединения, Позиция - 1);
		ИмяСервера = Сред(СтрокаСоединения, Позиция + 1);
	КонецЕсли;
	
	// логин и пароль
	Логин = СтрокаАвторизации;
	Пароль = "";
	Позиция = СтрНайти(СтрокаАвторизации, ":");
	Если Позиция > 0 Тогда
		Логин = Лев(СтрокаАвторизации, Позиция - 1);
		Пароль = Сред(СтрокаАвторизации, Позиция + 1);
	КонецЕсли;
	
	// хост и порт
	Хост = ИмяСервера;
	Порт = "";
	Позиция = СтрНайти(ИмяСервера, ":");
	Если Позиция > 0 Тогда
		Хост = Лев(ИмяСервера, Позиция - 1);
		Порт = Сред(ИмяСервера, Позиция + 1);
		Если Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Порт) Тогда
			Порт = "";
		КонецЕсли;
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Схема", Схема);
	Результат.Вставить("Логин", Логин);
	Результат.Вставить("Пароль", Пароль);
	Результат.Вставить("ИмяСервера", ИмяСервера);
	Результат.Вставить("Хост", Хост);
	Результат.Вставить("Порт", ?(ПустаяСтрока(Порт), Неопределено, Число(Порт)));
	Результат.Вставить("ПутьНаСервере", ПутьНаСервере);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ПослеЗагрузкиТекстаОпределения()
	Дерево.ПолучитьЭлементы().Очистить();
	
	Определение = ОпределениеПоТексту(ТекстОпределения);
	ЗаполнитьДеревоСервисами(Дерево, Определение.Сервисы);
	ЗаполнитьПредставленияСтрокДереваРекурсивно(Дерево.ПолучитьЭлементы());
КонецПроцедуры

#Область ЗаполнениеДереваПоОпределению

&НаСервереБезКонтекста
Процедура ЗаполнитьДеревоСервисами(Дерево, Сервисы)
	Строки = Дерево.ПолучитьЭлементы();
	Для Каждого Сервис Из Сервисы Цикл
		СтрСервис = Строки.Добавить();
		СтрСервис.ТипСтроки = "Сервис";
		СтрСервис.ПространствоИмен = Сервис.URIПространстваИмен;
		СтрСервис.ИмяСервиса = Сервис.Имя;
		
		ЗаполнитьДеревоТочкамиПодключения(СтрСервис, Сервис.ТочкиПодключения)
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДеревоТочкамиПодключения(СтрСервис, ТочкиПодключения)
	Строки = СтрСервис.ПолучитьЭлементы();
	Для Каждого Точка Из ТочкиПодключения Цикл
		СтрТочка = Строки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрТочка, СтрСервис,, "ПараметрыОперации, ПараметрыФайла");
		СтрТочка.ТипСтроки = "ТочкаПодключения";
		СтрТочка.ИмяТочкиПодключения = Точка.Имя;
		
		ЗаполнитьДеревоОперациями(СтрТочка, Точка.Интерфейс.Операции);
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДеревоОперациями(СтрТочка, Операции)
	Строки = СтрТочка.ПолучитьЭлементы();
	Для Каждого Операция Из Операции Цикл
		СтрОперация = Строки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрОперация, СтрТочка,, "ПараметрыОперации, ПараметрыФайла");
		СтрОперация.ТипСтроки = "Операция";
		СтрОперация.ИмяОперации = Операция.Имя;
		
		Для Каждого Параметр Из Операция.Параметры Цикл
			СтрПараметры = СтрОперация.ПараметрыОперации.Добавить();
			СтрПараметры.Имя = Параметр.Имя;
			СтрПараметры.ТипЗначения = СтрШаблон("%1 %2", Параметр.Тип.URIПространстваИмен, Параметр.Тип.Имя);
			СтрПараметры.ЭтоОбъект = (ТипЗнч(Параметр.Тип) = Тип("ТипОбъектаXDTO"));
		КонецЦикла;
		
		ЗаполнитьДеревоФайломПоУмолчанию(СтрОперация);
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДеревоФайломПоУмолчанию(СтрОперация)
	СтрФайл = СтрОперация.ПолучитьЭлементы().Добавить();
	ЗаполнитьЗначенияСвойств(СтрФайл, СтрОперация,, "ПараметрыОперации, ПараметрыФайла");
	СтрФайл.ТипСтроки = "Файл";
	СтрФайл.ИмяФайла = "Файл 1";
	
	Для Каждого СтрПараметрыОперации Из СтрОперация.ПараметрыОперации Цикл
		СтрПараметрыФайла = СтрФайл.ПараметрыФайла.Добавить();
		ЗаполнитьЗначенияСвойств(СтрПараметрыФайла, СтрПараметрыОперации);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

&НаСервереБезКонтекста
Функция ОпределениеПоТексту(ТекстОпределения)
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	
	ЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла, КодировкаТекста.UTF8);
	ЗаписьТекста.Записать(ТекстОпределения);
	ЗаписьТекста.Закрыть();
	
	Определение = Новый WSОпределения(ИмяВременногоФайла);
	УдалитьФайлы(ИмяВременногоФайла);
	
	Возврат Определение;
КонецФункции

&НаСервере
Процедура ВыполнитьОперациюНаСервере(Знач ИдентификаторСтрокиДерева)
	СтрДерево = Дерево.НайтиПоИдентификатору(ИдентификаторСтрокиДерева);
	
	Определение = ОпределениеПоТексту(ТекстОпределения);
	Сервис = Новый WSПрокси(Определение, СтрДерево.ПространствоИмен, СтрДерево.ИмяСервиса, СтрДерево.ИмяТочкиПодключения,,
		60,, АдресВебСервиса); // TODO: SSL
	//
	Сервис.Пользователь = Логин;
	Сервис.Пароль = Пароль;
	
	ЗначенияПараметров = Новый Массив;
	Для Каждого СтрПараметры Из СтрДерево.ПараметрыФайла Цикл
		Значение = СтрПараметры.Значение;
		ЧастиТипаXDTO = СтрРазделить(СтрПараметры.ТипЗначения, " ");
		ТипXDTO = Сервис.ФабрикаXDTO.Тип(ЧастиТипаXDTO[0], ЧастиТипаXDTO[1]);
		Если СтрПараметры.ЭтоОбъект Тогда
			ЧтениеXML = Новый ЧтениеXML;
			ЧтениеXML.УстановитьСтроку(СтрПараметры.Значение);
			Попытка
				Значение = Сервис.ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ТипXDTO);
			Исключение
				Шаблон = "Ошибка в значении параметра %1:
					|%2";
				ПредставлениеОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				РезультатВызова = СтрШаблон(Шаблон, СтрПараметры.Имя, ПредставлениеОшибки);
				ЧтениеXML.Закрыть();
				Возврат;
			КонецПопытки;
		Иначе
			Попытка
				Значение = Сервис.ФабрикаXDTO.Создать(ТипXDTO, Значение);
			Исключение
				Шаблон = "Ошибка в значении параметра %1:
					|%2";
				ПредставлениеОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				РезультатВызова = СтрШаблон(Шаблон, СтрПараметры.Имя, ПредставлениеОшибки);
				Возврат;
			КонецПопытки;
		КонецЕсли;
		
		ЗначенияПараметров.Добавить(Значение);
	КонецЦикла;
	
	Результат = Неопределено;
	Попытка
		Результат = ВызватьОперацию(Сервис, СтрДерево.ИмяОперации, ЗначенияПараметров);
	Исключение
		Если ИнформацияОбОшибке().Код = "ИнструментикиОшибкаВызоваВебСервиса" Тогда
			ПредставлениеОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке().Причина);
			Шаблон = "При выполнении операции веб-сервиса произошла ошибка:
				|%1";
			РезультатВызова = СтрШаблон(Шаблон, ПредставлениеОшибки);
			Возврат;
		КонецЕсли;
	КонецПопытки;
	
	ПредставлениеТела = "";
	Если ТипЗнч(Результат) = Тип("ОбъектXDTO")
		Или ТипЗнч(Результат) = Тип("СписокXDTO")
		Или ТипЗнч(Результат) = Тип("ЗначениеXDTO") Тогда
		
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.УстановитьСтроку();
		Сервис.ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, Результат);
		РезультатXML = ЗаписьXML.Закрыть();
		ПредставлениеТела = РезультатXML;
		ПредставлениеТипа = СтрШаблон("{%1}%2", Результат.Тип().URIПространстваИмен, Результат.Тип().Имя);
	Иначе
		ПредставлениеТела = Строка(Результат);
		ПредставлениеТипа = Строка(ТипЗнч(Результат));
	КонецЕсли;
	
	Шаблон = "Операция выполнена успешно.
		|Тип значения результата: %1
		|
		|Результат:
		|%2";
	РезультатВызова = СтрШаблон(Шаблон, ПредставлениеТипа, ПредставлениеТела);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВызватьОперацию(Сервис, ИмяОперации, ЗначенияПараметров)
	// TODO: Обезопасить параметры от инъекции кода
	ВыраженияПараметров = Новый Массив;
	Для Индекс = 0 По ЗначенияПараметров.ВГраница() Цикл
		ВыраженияПараметров.Добавить(СтрШаблон("ЗначенияПараметров[%1]", Формат(Индекс, "ЧН=0; ЧГ=")));
	КонецЦикла;
	
	КонечноеВыражение = СтрШаблон("Сервис.%1(%2)", ИмяОперации, СтрСоединить(ВыраженияПараметров, ", "));
	Попытка
		Возврат Вычислить(КонечноеВыражение);
	Исключение
		Если Не ИнформацияОбОшибке().ЯвляетсяОшибкойКатегории(КатегорияОшибки.ОшибкаКомпиляцииВстроенногоЯзыка) Тогда
			ВызватьИсключение("Ошибка при вызове операции веб-сервиса",,
				"ИнструментикиОшибкаВызоваВебСервиса",, ИнформацияОбОшибке());
		КонецЕсли;
	КонецПопытки;
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьПредставленияСтрокДереваРекурсивно(СтрокиДерева)
	Для Каждого Строка Из СтрокиДерева Цикл
		Если Строка.ТипСтроки = "Сервис" Тогда
			Строка.ИндексКартинки = 1;
			Строка.Представление = "Web-сервис: " + Строка.ИмяСервиса;
		ИначеЕсли Строка.ТипСтроки = "ТочкаПодключения" Тогда
			Строка.ИндексКартинки = 2;
			Строка.Представление = "Точка подключения: " + Строка.ИмяТочкиПодключения;
		ИначеЕсли Строка.ТипСтроки = "Операция" Тогда
			Строка.ИндексКартинки = 3;
			Строка.Представление = "Операция: " + Строка.ИмяОперации;
		ИначеЕсли Строка.ТипСтроки = "Файл" Тогда
			Строка.ИндексКартинки = 4;
			Строка.Представление = "Файл: " + Строка.ИмяФайла;
		Иначе
			ВызватьИсключение "Недопустимый тип строки";
		КонецЕсли;
		
		Строка.Представление = Новый ФорматированнаяСтрока(Строка.Представление,, WebЦвета.Красный); // TODO: Убрать
		ЗаполнитьПредставленияСтрокДереваРекурсивно(Строка.ПолучитьЭлементы());
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Асинх Процедура РедактироватьЗначениеПараметраОбъекта(СтрПараметры)
	ЗавершитьРедактирование = Ложь;
	ТекстXML = СтрПараметры.Значение;
	Пока Не ЗавершитьРедактирование Цикл
		ТекстXML = Ждать ВвестиСтрокуАсинх(ТекстXML, "Введите значение объекта",, Истина);
		Если ТекстXML = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Попытка
			ПроверитьЗначениеПараметраОбъекта(ТекстОпределения, СтрПараметры.ТипЗначения, ТекстXML);
		Исключение
			Если ИнформацияОбОшибке().Код = "ИнструментикиНекорректныйТекстXML" Тогда
				ПредставлениеОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				Шаблон = "В тексте XML найдены ошибки:
					|%1";
				Ждать ПредупреждениеАсинх(СтрШаблон(Шаблон, ПредставлениеОшибки));
				Продолжить;
			Иначе
				ВызватьИсключение;
			КонецЕсли;
		КонецПопытки;
		
		ЗавершитьРедактирование = Истина;
	КонецЦикла;
	
	СтрПараметры.Значение = ТекстXML;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПроверитьЗначениеПараметраОбъекта(Знач ТекстОпределения, Знач ТипЗначенияСтрокой, Знач ТекстXML)
	Определение = ОпределениеПоТексту(ТекстОпределения);
	
	ЧастиТипаXDTO = СтрРазделить(ТипЗначенияСтрокой, " ");
	ТипXDTO = Определение.ФабрикаXDTO.Тип(ЧастиТипаXDTO[0], ЧастиТипаXDTO[1]);
	Если ТипЗнч(ТипXDTO) = Тип("ТипОбъектаXDTO") Тогда
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(ТекстXML);
		Попытка
			Определение.ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ТипXDTO);
		Исключение
			ВызватьИсключение(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),,
				"ИнструментикиНекорректныйТекстXML");
		КонецПопытки;
		ЧтениеXML.Закрыть();
	Иначе
		Значение = Определение.ФабрикаXDTO.Создать(ТипXDTO, Значение);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
