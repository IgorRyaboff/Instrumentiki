
// --------------------------------------------------------------------------------
// Copyright (c) 2024-2025 Igor Ryabov (https://github.com/IgorRyaboff/Instrumentiki)
// License: https://github.com/IgorRyaboff/Instrumentiki/blob/main/LICENSE
// --------------------------------------------------------------------------------

// Допускается передача данных в форму через Параметры:
//  ТекстЗапроса - Строка -
//  ПараметрыЗапроса - Массив - Содержит объекты Структура со следующими свойствами:
//  * Имя - Строка -
//  * Значение - Произвольный -
// Если переданы какие-либо из параметров выше, данные формы сразу будут отмечены как модифицированные

#Область ОписаниеПеременных

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ОграничениеКоличестваСтрок = 500;
	МетодВыполненияЗапроса = "Выполнить";
	
	Элементы.ГруппаРезультатНеактуален.Видимость = Ложь;
	
	Если Параметры.Свойство("ТекстЗапроса") Тогда
		ТекстЗапроса = Параметры.ТекстЗапроса;
		Модифицированность = Истина;
	КонецЕсли;
	
	Если Параметры.Свойство("ПараметрыЗапроса") Тогда
		Для Каждого СтрИсточник Из Параметры.ПараметрыЗапроса Цикл
			СтрПриемник = ПараметрыЗапроса.Добавить();
			ЗаполнитьЗначенияСвойств(СтрПриемник, СтрИсточник, "Имя, Значение");
			ДобавляемыеТипы = Новый Массив;
			ДобавляемыеТипы.Добавить(ТипЗнч(СтрПриемник.Значение));
			СтрПриемник.ОграничениеТипа = Новый ОписаниеТипов(ДобавляемыеТипы);
			
			Если ТипЗнч(СтрПриемник.Значение) = Тип("СписокЗначений") Тогда
				СтрПриемник.ВидПараметра = "Список";
			Иначе
				СтрПриемник.ВидПараметра = "Простой"
			КонецЕсли;
		КонецЦикла;
		
		Модифицированность = Истина;
	КонецЕсли;
	
	УМ_ПриСозданииНаСервере();
	УМ_КрасивыйРедактор_ПриСозданииНаСервере();
	УМ_Сохранение_ПриСозданииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УМ_ПриОткрытии();
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	Для Сч = 0 По ПараметрыЗапроса.Количество() - 1 Цикл
		Стр = ПараметрыЗапроса[Сч];
		
		Попытка
			Структура = Новый Структура(Стр.Имя);
		Исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Неверное имя параметра запроса: " + Стр.Имя;
			Сообщение.Поле = СтрШаблон("ПараметрыЗапроса[%1].Имя", Сч);
			Сообщение.УстановитьДанные(Объект);
			Сообщение.Сообщить();
			Отказ = Истина;
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	УМ_ПередЗакрытием(Отказ, ЗавершениеРаботы);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	УМ_ПриЗакрытии(ЗавершениеРаботы);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область УниверсальныеМеханизмы1

#Область КрасивыйРедактор

// Обработчик ДокументСформирован HTML-документов красивого редактора
//  Подключается программно при вызове УМ_КрасивыйРедактор_ПриСозданииНаСервере
//
// Параметры:
//  Элемент - ПолеФормы - HTML-документ
//
&НаКлиенте
Процедура УМ_КрасивыйРедактор_СобытиеДокументСформирован(Элемент)
	Редактор = Неопределено;
	Для Каждого РедакторВнутриЦикла Из ЭтотОбъект.УМ_Данные.КрасивыйРедактор.Редакторы Цикл
		Если РедакторВнутриЦикла.ИмяЭлементаHTML = Элемент.Имя Тогда
			Редактор = РедакторВнутриЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если Редактор = Неопределено Тогда
		Шаблон = НСтр("ru = 'Не найдено описание красивого редактора для элемента %1';
			|en = 'Did not found HTML editor description for form element %1'");
		ВызватьИсключение СтрШаблон(Шаблон, Элемент.Имя);
	КонецЕсли;
	
	Вью = _УМ_КрасивыйРедактор_ОбъектВьюРедактора(Элемент);
	Вью.setContent(ЭтотОбъект[Редактор.ИмяРеквизита]);
	Вью.setOption("generateModificationEvent", Истина);
	Вью.setOption("generateOnKeyDownEvent", Истина);
	Вью.updateMetadata(_УМ_КрасивыйРедактор_СтруктураМетаданных());
	
	// См. https://vk.cc/cs5MzW
	Если Редактор.Язык = "ВстроенныйЯзык" Тогда
		Вью.setLanguageMode("bsl");
	ИначеЕсли Редактор.Язык = "ЯзыкЗапросов" Тогда
		Вью.setLanguageMode("bsl_query");
	Иначе
		ВызватьИсключение НСтр("ru = 'Недопустимый язык редактора';
			|en = 'Invalid editor language'");
	КонецЕсли;
КонецПроцедуры

// Обработчик ПриНажатии HTML-документов красивого редактора
//  Подключается программно при вызове УМ_КрасивыйРедактор_ПриСозданииНаСервере
//
// Параметры:
//  Элемент - ПолеФормы - См. Синтакс-помощник
//  ДанныеСобытия - ФиксированнаяСтруктура - См. Синтакс-помощник
//  СтандартнаяОбработка - Булево - См. Синтакс-помощник
//
&НаКлиенте
Процедура УМ_КрасивыйРедактор_СобытиеПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	СобытиеРедактора = ДанныеСобытия.Event.EventData1C;
	Если СобытиеРедактора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Редактор = Неопределено;
	Для Каждого РедакторВнутриЦикла Из ЭтотОбъект.УМ_Данные.КрасивыйРедактор.Редакторы Цикл
		Если РедакторВнутриЦикла.ИмяЭлементаHTML = Элемент.Имя Тогда
			Редактор = РедакторВнутриЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если Редактор = Неопределено Тогда
		Шаблон = НСтр("ru = 'Не найдено описание красивого редактора для элемента %1';
			|en = 'Did not found HTML editor description for form element %1'");
		ВызватьИсключение СтрШаблон(Шаблон, Элемент.Имя);
	КонецЕсли;
	
	Если СобытиеРедактора.event = "EVENT_CONTENT_CHANGED" Тогда
		НовыйТекст = _УМ_КрасивыйРедактор_ОбъектВьюРедактора(Элемент).getText();
		Если НовыйТекст <> ЭтотОбъект[Редактор.ИмяРеквизита] Тогда
			ЭтотОбъект[Редактор.ИмяРеквизита] = НовыйТекст;
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если СобытиеРедактора.event = "EVENT_ON_KEY_DOWN" Тогда
		Если СобытиеРедактора.params.keyCode = 9 Тогда // ESC
			Закрыть();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#КонецОбласти

&НаКлиенте
Процедура ОтображаемаяТаблицаПриИзменении(Элемент)
	ВывестиРезультатЗапросаНаФорму();
КонецПроцедуры

&НаКлиенте
Процедура ТекстЗапросаПриИзменении(Элемент)
	Элементы.ГруппаРезультатНеактуален.Видимость = Истина;
КонецПроцедуры

&НаКлиенте
Процедура МетодВыполненияЗапросаПриИзменении(Элемент)
	Элементы.ГруппаРезультатНеактуален.Видимость = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОграничениеКоличестваСтрокПриИзменении(Элемент)
	Элементы.ГруппаРезультатНеактуален.Видимость = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СохранятьВременныеТаблицыМеждуЗапросамиПриИзменении(Элемент)
	Если ЭтоАдресВременногоХранилища(АдресСохраненныхВременныхТаблиц) Тогда
		УдалитьИзВременногоХранилища(АдресСохраненныхВременныхТаблиц);
	КонецЕсли;
	АдресСохраненныхВременныхТаблиц = Неопределено;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПараметрыЗапроса

&НаКлиенте
Процедура ПараметрыЗапросаПриИзменении(Элемент)
	Для Каждого Стр Из ПараметрыЗапроса Цикл
		Если Не ЗначениеЗаполнено(Стр.ВидПараметра) Тогда
			Стр.ВидПараметра = "Простой";
		КонецЕсли;
	КонецЦикла;
	
	Элементы.ГруппаРезультатНеактуален.Видимость = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗапросаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекДанные = Элементы.ПараметрыЗапроса.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле = Элементы.ПараметрыЗапросаВидПараметра Тогда
		СтандартнаяОбработка = Ложь;
		ВыбратьВидПараметраАсинх(ТекДанные);
	КонецЕсли;
	
	Если ТекДанные.ВидПараметра = "Таблица" И Поле = Элементы.ПараметрыЗапросаЗначение Тогда
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура("Таблица", ТекДанные.Значение);
		ОписаниеЗакрытия = Новый ОписаниеОповещения("ОкончаниеРедактированияТаблицыЗначенийВПараметрахЗапроса", ЭтотОбъект, ТекДанные);
		ОткрытьФорму(Объект.ИмяМетаданныхОбработки + ".Форма.КонсольЗапросов_ТаблицаЗначений", ПараметрыФормы,,,,, ОписаниеЗакрытия);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗапросаЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекДанные = Элементы.ПараметрыЗапроса.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекДанные.ВидПараметра = "Список" Тогда
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура("Список", ТекДанные.Значение);
		ОписаниеЗакрытия = Новый ОписаниеОповещения("ОкончаниеРедактированияСпискаЗначенийВПараметрахЗапроса", ЭтотОбъект, ТекДанные);
		ОткрытьФорму(Объект.ИмяМетаданныхОбработки + ".Форма.Общая_СписокЗначений", ПараметрыФормы,,,,, ОписаниеЗакрытия);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТекущийРезультатЗапроса

&НаКлиенте
Процедура ТекущийРезультатЗапросаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекДанные = Элементы.ТекущийРезультатЗапроса.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКолонкиТаблицы = Сред(Поле.Имя, СтрДлина("ТекущийРезультатЗапроса") + 1);
	ПоказатьЗначение(, ТекДанные[ИмяКолонкиТаблицы]);
КонецПроцедуры

&НаКлиенте
Процедура ТекущийРезультатЗапросаПриАктивизацииСтроки(Элемент)
	ТекДанные = Элементы.ТекущийРезультатЗапроса.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрСвойства Из СвойстваТекущейСтрокиРезультатаЗапроса Цикл
		СтрСвойства.Значение = ТекДанные[СтрСвойства.Свойство];
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСвойстваТекущейСтрокиРезультатаЗапроса

&НаКлиенте
Процедура СвойстваТекущейСтрокиРезультатаЗапросаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекДанные = Элементы.СвойстваТекущейСтрокиРезультатаЗапроса.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(, ТекДанные.Значение);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыФактическиУстановленныеПараметрыЗапроса

&НаКлиенте
Процедура ФактическиУстановленныеПараметрыЗапросаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтрПараметры = Элемент.ТекущиеДанные;
	Если СтрПараметры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(СтрПараметры.Значение) = Тип("СписокЗначений") Тогда
		ПараметрыФормы = Новый Структура("Режим, Список", "Просмотр", СтрПараметры.Значение);
		ОткрытьФорму(Объект.ИмяМетаданныхОбработки + ".Форма.Общая_СписокЗначений", ПараметрыФормы);
	Иначе
		ПоказатьЗначение(, СтрПараметры.Значение);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область УниверсальныеМеханизмы1

#Область Сохранение

// Обработчик команды открытия сохраненного файла
//
// Параметры:
//  Команда - КомандаФормы - Вызванная команда
//
&НаКлиенте
Асинх Процедура УМ_Сохранение_ОткрытьФайл(Команда)
	Если Не Ждать УМ_Сохранение_ЗапроситьСохранениеАсинх() Тогда
		Возврат;
	КонецЕсли;
	
	АдресВХ = Неопределено;
	Если ЗначениеЗаполнено(ЭтотОбъект.УМ_Данные.Сохранение.АдресДанныхАвтосохранения) Тогда
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Открыть сохраненные данные';
			|en = 'Open previously saved data'"));
		Кнопки.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Открыть данные из файла...';
			|en = 'Open a file...'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		Ответ = Ждать ВопросАсинх(НСтр("ru = 'Есть сохраненные данные с прошлого сеанса использования инструмента';
			|en = 'There are autosaved data from previous tool usage'"), Кнопки);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			АдресВХ = ЭтотОбъект.УМ_Данные.Сохранение.АдресДанныхАвтосохранения;
		ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
			ЭтотОбъект.УМ_Данные.Сохранение.АдресДанныхАвтосохранения = Неопределено;
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(АдресВХ) Тогда
		ПараметрыДиалогаПомещенияФайлов = Новый ПараметрыДиалогаПомещенияФайлов;
		ПараметрыДиалогаПомещенияФайлов.МножественныйВыбор = Ложь;
		ПараметрыДиалогаПомещенияФайлов.Фильтр = НСтр("ru = 'Сохранённые данные Инструментиков (*.xml)|*.xml|Все файлы|*';
			|en = 'Instrumentiki saved data (*.xml)|*.xml|All files|*'");
		
		ОписаниеПомещенногоФайла = Ждать ПоместитьФайлНаСерверАсинх(,,,
			ПараметрыДиалогаПомещенияФайлов, ЭтотОбъект.УникальныйИдентификатор);
		//
		Если ОписаниеПомещенногоФайла = Неопределено Тогда
			Возврат;
		КонецЕсли;
		АдресВХ = ОписаниеПомещенногоФайла.Адрес;
	КонецЕсли;
	
	УМ_Сохранение_ПрочитатьУниверсальныйПакет(АдресВХ);
	УМ_Сохранение_ПослеЧтенияУниверсальногоПакетаПереопределяемый();
КонецПроцедуры

// Обработчик команды сохранения данных инструмента в файл
//
// Параметры:
//  Команда - КомандаФормы - Вызванная команда
//
&НаКлиенте
Процедура УМ_Сохранение_СохранитьФайл(Команда)
	УМ_Сохранение_СохранитьАсинх();
КонецПроцедуры

#КонецОбласти

#КонецОбласти

&НаКлиенте
Процедура ПереключитьРедакторКода(Команда)
	УМ_КрасивыйРедактор_ПереключитьРедакторКода(Элементы.ПереключитьРедакторКода);
КонецПроцедуры

&НаКлиенте
Асинх Процедура ОткрытьКонструкторЗапроса(Команда)
	Если ПустаяСтрока(ТекстЗапроса) Тогда
		// На одном из окружений с 8.3.18 не открывался конструктор с пустым запросом в толстом клиенте ("ожидается выражение ВЫБРАТЬ")
		// Отказ от передачи каких-либо параметров вместо передачи пустой строки решил проблему
		Конструктор = Новый КонструкторЗапроса;
	Иначе
		Попытка
			Конструктор = Новый КонструкторЗапроса(ТекстЗапроса);
		Исключение
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить(КодВозвратаДиалога.Да, "Открыть пустой конструктор");
			Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
			
			ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			Ответ = Ждать ВопросАсинх(НСтр("ru = 'В запросе допущена синтаксическая ошибка:
                                            |'") + ТекстОшибки, Кнопки,, КодВозвратаДиалога.Нет);
			
			Если Ответ = КодВозвратаДиалога.Да Тогда
				Конструктор = Новый КонструкторЗапроса;
			Иначе
				Возврат;
			КонецЕсли;
		КонецПопытки;
	КонецЕсли;
	
	Результат = Ждать Конструктор.ОткрытьАсинх();
	Если Результат = Неопределено Или Результат = ТекстЗапроса Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = Результат;
	УМ_КрасивыйРедактор_ОбновитьТекст();
	
	Модифицированность = Истина;
	ЭтотОбъект.Открыть(); // Фокусировка этой формы при закрытии конструктора
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗапрос(Команда)
	Состояние("Выполняем запрос...");
	
	ТекстОшибки = Неопределено;
	Попытка
		ВыполнитьЗапросНаСервере(ТекстОшибки);
	Исключение
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Если ТекстОшибки = Неопределено Тогда
		Элементы.ГруппаРезультатНеактуален.Видимость = Ложь;
		Состояние("Запрос выполнен!");
	Иначе
		ПоказатьПредупреждение(, ТекстОшибки);
		Состояние("Запрос не выполнен!");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПараметрыИзЗапроса(Команда)
	Попытка
		СтруктураПараметров = ПараметрыЗапросаПоТексту(ТекстЗапроса);
	Исключение
		ПоказатьПредупреждение(, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),, "Ошибка получения параметров");
		Возврат;
	КонецПопытки;
	
	Для Каждого КлючЗнч Из СтруктураПараметров Цикл
		Имя = КлючЗнч.Ключ;
		ТипЗначенияИлиТаблицаЗначений = КлючЗнч.Значение;
		
		Если ПараметрыЗапроса.НайтиСтроки(Новый Структура("Имя", Имя)).Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрПараметры = ПараметрыЗапроса.Добавить();
		СтрПараметры.Имя = Имя;
		
		Если ТипЗнч(ТипЗначенияИлиТаблицаЗначений) = Тип("ОписаниеТипов") Тогда
			СтрПараметры.ВидПараметра = "Простой";
			СтрПараметры.ОграничениеТипа = ТипЗначенияИлиТаблицаЗначений;
			СтрПараметры.Значение = ТипЗначенияИлиТаблицаЗначений.ПривестиЗначение();
		ИначеЕсли ТипЗнч(ТипЗначенияИлиТаблицаЗначений) = Тип("ХранилищеЗначения") Тогда
			СтрПараметры.ВидПараметра = "Таблица";
			СтрПараметры.ОграничениеТипа = Тип("ХранилищеЗначения");
			СтрПараметры.Значение = ТипЗначенияИлиТаблицаЗначений;
		КонецЕсли;
		
		Модифицированность = Истина;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Асинх Процедура СгенерироватьТекстДляКонфигуратора(Команда)
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить(Истина, "Да");
	Кнопки.Добавить(Ложь, "Нет, только текст запроса");
	ФормироватьПрограммныйКод = Ждать ВопросАсинх("Сформировать также шаблон программного кода (создание объекта Запрос и цикл выборки)?", Кнопки);
	
	Строки = СтрРазделить(СтрЗаменить(ТекстЗапроса, """", """"""), Символы.ПС);
	
	ОпциональныйТаб = ?(ФормироватьПрограммныйКод, Символы.Таб, "");
	ТекстЗапросаКонвертированный = ОпциональныйТаб + """" + Строки[0];
	
	Для Сч = 1 По Строки.Количество() - 1 Цикл
		ТекстЗапросаКонвертированный = ТекстЗапросаКонвертированный + Символы.ПС + ОпциональныйТаб + "|" + Строки[Сч];
	КонецЦикла;
	
	ТекстЗапросаКонвертированный = ТекстЗапросаКонвертированный + """";
	
	СтрокиПараметровЗапроса = "";
	
	Попытка
		СтруктураПараметров = ПараметрыЗапросаПоТексту(ТекстЗапроса);
	Исключение
		ПоказатьПредупреждение(, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),, "Ошибка получения параметров");
		Возврат;
	КонецПопытки;
	
	Для Каждого КлючЗнч Из СтруктураПараметров Цикл
		СтрокиПараметровЗапроса = СтрокиПараметровЗапроса + Символы.ПС + СтрШаблон("Запрос.УстановитьПараметр(""%1"", %1);", КлючЗнч.Ключ);
	КонецЦикла;
	
	Если ФормироватьПрограммныйКод Тогда
		КонечныйТекст = СтрШаблон("Запрос = Новый Запрос(
		                          |%1);
								  |%2
								  |
								  |РезультатЗапроса = Запрос.Выполнить();
								  |Выборка = РезультатЗапроса.Выбрать();
								  |
								  |Пока Выборка.Следующий() Цикл
								  |	//
								  |КонецЦикла;", ТекстЗапросаКонвертированный, СтрокиПараметровЗапроса);
	Иначе
		КонечныйТекст = ТекстЗапросаКонвертированный;
	КонецЕсли;
	
	ПоказатьОкноДляКопированияТекста = Истина;
	
	#Если Не ВебКлиент Тогда
		Если Объект.ВерсияПлатформы >= 3.24 Тогда
			Выполнить("ЭлементБуфера = Новый ЭлементБуфераОбмена(СтандартныйФорматДанныхБуфераОбмена.Текст, КонечныйТекст);
			          |СредстваБуфераОбмена.ПоместитьДанныеАсинх(ЭлементБуфера);");
			ПоказатьПредупреждение(, "Текст был скопирован в буфер обмена");
			ПоказатьОкноДляКопированияТекста = Ложь;
		КонецЕсли;
	#КонецЕсли
	
	Если ПоказатьОкноДляКопированияТекста Тогда
		ВвестиСтрокуАсинх(КонечныйТекст, "Текст для конфигуратора",, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Асинх Процедура ЗаполнитьИзКонфигуратора(Команда)
	#Если ВебКлиент Тогда
		ПоказатьПредупреждение(, "Недоступно в веб-клиенте. Используйте десктопный клиент 1С",, "Ой, у вас веб-клиент");
	#Иначе
		Ответ = Ждать ВвестиСтрокуАсинх("", "Строка запроса из конфигуратора",, Истина);
		Если Ответ = Неопределено Или ПустаяСтрока(Ответ) Тогда
			Возврат;
		КонецЕсли;
		
		Попытка
			Выполнить("ТекстЗапроса = " + Ответ);
			Модифицированность = Истина;
			Элементы.ГруппаРезультатНеактуален.Видимость = Истина;
			УМ_КрасивыйРедактор_ОбновитьТекст();
		Исключение
			ПоказатьПредупреждение(, "Вы дали некорректную строку. Ниже пример, как должно быть
			                         |
									 |""ВЫБРАТЬ
									 ||Таблица.Ссылка КАК Ссылка
									 ||ИЗ Таблица""");
		КонецПопытки;
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Асинх Процедура УстановитьЗначениеПараметраИзНавигационнойСсылки(Команда)
	ТекДанные = Элементы.ПараметрыЗапроса.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекДанные.ВидПараметра <> "Простой" Тогда
		ПоказатьПредупреждение(, "Доступно только для простых параметров");
		Возврат;
	КонецЕсли;
	
	НоваяСсылка = Ждать УМ_ПолучениеСсылок_ЗапроситьСсылкуИзНавигационнойАсинх();
	Если НоваяСсылка <> Неопределено Тогда
		ТекДанные.Значение = НоваяСсылка;
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Асинх Процедура УстановитьЗначениеПараметраИзОткрытогоОкна(Команда)
	ТекДанные = Элементы.ПараметрыЗапроса.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекДанные.ВидПараметра <> "Простой" Тогда
		ПоказатьПредупреждение(, "Доступно только для простых параметров");
		Возврат;
	КонецЕсли;
	
	ТекДанные = Элементы.ПараметрыЗапроса.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекДанные.ВидПараметра <> "Простой" Тогда
		ПоказатьПредупреждение(, "Доступно только для простых параметров");
		Возврат;
	КонецЕсли;
	
	НоваяСсылка = Ждать УМ_ПолучениеСсылок_ЗапроситьСсылкуИзОткрытыхОконАсинх();
	Если НоваяСсылка <> Неопределено Тогда
		ТекДанные.Значение = НоваяСсылка;
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Асинх Процедура УстановитьЗначениеПараметраИзСтрокиВнутр(Команда)
	ТекДанные = Элементы.ПараметрыЗапроса.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекДанные.ВидПараметра <> "Таблица" Тогда
		ПоказатьПредупреждение(, "Доступно только для параметров-таблиц");
		Возврат;
	КонецЕсли;
	
	Значение = Ждать ВвестиСтрокуАсинх("", "Введите значение",, Истина);
	Если Значение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НовоеЗначение = ТаблицаЗначенийИзСтрокиВнутр(Значение);
	Если НовоеЗначение = Неопределено Тогда
		ПоказатьПредупреждение(, "Переданная строка не является внутренним представлением таблицы значений 1С");
		Возврат;
	КонецЕсли;
	
	ТекДанные.Значение = НовоеЗначение;
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СортироватьТекущийРезультатЗапросаВозр(Команда)
	СортироватьТаблицуЗначений("ТекущийРезультатЗапроса", "Возр");
КонецПроцедуры

&НаКлиенте
Процедура СортироватьТекущийРезультатЗапросаУбыв(Команда)
	СортироватьТаблицуЗначений("ТекущийРезультатЗапроса", "Убыв");
КонецПроцедуры

&НаКлиенте
Асинх Процедура ЗаполнитьИзНабораДанныхСКД(Команда)
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПослеВыбораСКДДляЗаполнения", ЭтотОбъект);
	ОткрытьФорму(Объект.ИмяМетаданныхОбработки + ".Форма.Общее_ОткрытиеСКД",,,,,, ОповещениеОЗакрытии);
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьИтогПоВыделеннымСтрокамВРезультатеЗапроса(Команда)
	ПоказатьИтогТекущегоРезультатаЗапроса(Элементы.ТекущийРезультатЗапроса.ВыделенныеСтроки);
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьИтогПоВсемСтрокамВРезультатеЗапроса(Команда)
	ПоказатьИтогТекущегоРезультатаЗапроса();
КонецПроцедуры

&НаКлиенте
Асинх Процедура ВыгрузитьРезультатЗапросаВСтрокуВнутр(Команда)
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить(Истина, "С переносами строк");
	Кнопки.Добавить(Ложь, "Без переносов строк");
	ПереноситьСтроки = Ждать ВопросАсинх("Выберите вариант вывода строки", Кнопки);
	
	ВвестиСтрокуАсинх(ТекущийРезультатЗапросаВСтрокуВнутр(ПереноситьСтроки),,, ПереноситьСтроки);
КонецПроцедуры

&НаКлиенте
Асинх Процедура ЗаменитьПараметрЛитералом(Команда)
	СтрПараметры = Элементы.ПараметрыЗапроса.ТекущиеДанные;
	Если СтрПараметры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрВсеПараметры Из ПараметрыЗапроса Цикл
		Если СтрВсеПараметры <> СтрПараметры И СтрНачинаетсяС(СтрВсеПараметры.Имя, СтрПараметры.Имя) Тогда
			Шаблон = НСтр("ru='Имя параметра %1 начинается на имя выбранного параметра. Замена невозможна'");
			ПоказатьПредупреждение(, СтрШаблон(Шаблон, СтрВсеПараметры.Имя));
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	ПодставляемоеВыражение = Неопределено;
	
	Если СтрПараметры.ВидПараметра = "Простой" Тогда
		Если СтрПараметры.Значение = Неопределено Тогда
			ПоказатьПредупреждение(, НСтр("ru='Данный параметр не содержит никакого значения'"));
			Возврат;
		КонецЕсли;
		
		Литерал = ЗначениеВЛитералЯзыкаЗапросов(СтрПараметры.Значение);
		Если Литерал = Неопределено Тогда
			ПоказатьПредупреждение(, НСтр("ru='Невозможно представить значение данного параметра в виде литерала'"));
			Возврат;
		КонецЕсли;
		
		ПодставляемоеВыражение = Литерал;
	ИначеЕсли СтрПараметры.ВидПараметра = "Список" Тогда
		ИсходныеЗначения = СтрПараметры.Значение.ВыгрузитьЗначения();
		Если ИсходныеЗначения.Количество() = 0 Тогда
			ПоказатьПредупреждение(, НСтр("ru='Список пуст'"));
			Возврат;
		КонецЕсли;
		
		Литералы = ЗначенияВЛитералыЯзыкаЗапросов(ИсходныеЗначения);
		
		Выражения = Новый Массив;
		Для Сч = 0 По Литералы.ВГраница() Цикл
			Литерал = Литералы[Сч];
			Если Литерал = Неопределено Тогда
				Шаблон = НСтр("ru='%1-е значение списка (%2) невозможно представить в виде литерала'");
				ПоказатьПредупреждение(, СтрШаблон(Шаблон, Формат(Сч + 1, "ЧГ="), ИсходныеЗначения[Сч]));
				Возврат;
			КонецЕсли;
			
			Выражения.Добавить(Литерал);
		КонецЦикла;
		
		ПодставляемоеВыражение = СтрСоединить(Выражения, ", ");
	Иначе
		ПоказатьПредупреждение(, НСтр("ru='Эта команда недоступна для данного вида параметра запроса'"));
		Возврат;
	КонецЕсли;
	
	Если ПодставляемоеВыражение = Неопределено Тогда
		ВызватьИсключение "Не заполнено подставляемое выражение";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&" + СтрПараметры.Имя, ПодставляемоеВыражение);
	Модифицированность = Истина;
	
	УМ_КрасивыйРедактор_ОбновитьТекст();
	ПараметрыЗапроса.Удалить(СтрПараметры);
	ПоказатьПредупреждение(, НСтр("ru='Параметр успешно заменен'"));
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьОтображениеСвойствТекущейСтрокиРезультатаЗапроса(Команда)
	Кнопка = Элементы.ФормаПереключитьОтображениеСвойствТекущейСтрокиРезультатаЗапроса;
	Кнопка.Пометка = Не Кнопка.Пометка;
	Элементы.СвойстваТекущейСтрокиРезультатаЗапроса.Видимость = Кнопка.Пометка;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокСохраненныхВременныхТаблиц(Команда)
	Если Не СохранятьВременныеТаблицыМеждуЗапросами Тогда
		ПоказатьПредупреждение(, НСтр("ru='Сохранение временных таблиц отключено'"));
		Возврат;
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(АдресСохраненныхВременныхТаблиц) Тогда
		Имена = ИменаСохраненныхВременныхТаблиц(АдресСохраненныхВременныхТаблиц);
	Иначе
		Имена = Новый Массив;
	КонецЕсли;
	
	Если Имена.Количество() > 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'В данных Консоли запросов сохранены следующие временные таблицы:
                                       |
                                       |'") + СтрСоединить(Имена, Символы.ПС));
	Иначе
		ПоказатьПредупреждение(, НСтр("ru='В данных Консоли запросов не сохранено временных таблиц'"));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПредупреждениеОСохраненииВременныхТаблиц(Команда)
	ПоказатьПредупреждение(, НСтр("ru = 'Сохранение временных таблиц реализовано путем выгрузки содержимого временных таблиц в таблицы значений.
                                   |Использование данной функции может привести к высокому потреблению дискового пространства на время работы Инструментиков.
                                   |Используйте данную функцию с осторожностью, если предполагается работа с временными таблицами больших размеров.'"));
КонецПроцедуры

&НаКлиенте
Процедура ОтформатироватьТекстЗапроса(Команда)
	Попытка
		ТекстЗапроса = ОтформатироватьТекстЗапросаНаСервере(ТекстЗапроса);
	Исключение
		ПоказатьПредупреждение(, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),, НСтр("ru='Ошибка в тексте запроса'"));
		Возврат;
	КонецПопытки;
	
	Модифицированность = Истина;
	УМ_КрасивыйРедактор_ОбновитьТекст();
КонецПроцедуры

&НаКлиенте
Асинх Процедура ЗаполнитьИзВыгрузкиБСП(Команда)
	СтрокаXML = Ждать ВвестиСтрокуАсинх("", НСтр("ru='Введите XML-строку'"),, Истина);
	Если СтрокаXML = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ЗаполнитьИзВыгрузкиБСПНаСервере(СтрокаXML);
	Исключение
		Если ИнформацияОбОшибке().Код = "ИнструментикиОшибкаВXML" Тогда
			ОбработкаОшибок.ПоказатьИнформациюОбОшибке(ИнформацияОбОшибке(),
				ВариантОтображенияСообщенияОбОшибке.СообщениеОбОшибкеДляПользователя);
			//
		Иначе
			ВызватьИсключение;
		КонецЕсли;
	КонецПопытки;
	
	УМ_КрасивыйРедактор_ОбновитьТекст();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область УниверсальныеМеханизмы1

#Область ОбработчикиСобытийФормы

// Необходимо вызывать внутри обработчика ПриСозданииНаСервере модуля формы
//
&НаСервере
Процедура УМ_ПриСозданииНаСервере()
	Реквизит = Новый РеквизитФормы("УМ_Данные", Новый ОписаниеТипов);
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	ЭтотОбъект.УМ_Данные = Новый Структура;
КонецПроцедуры

// Необходимо вызывать внутри обработчика ПриОткрытии модуля формы
//
&НаКлиенте
Процедура УМ_ПриОткрытии()
	_УМ_КрасивыйРедактор_ПриОткрытии();
КонецПроцедуры

// Необходимо вызывать внутри обработчика ПередЗакрытием модуля формы
//
// Параметры:
//  Отказ - Булево - Параметр из обработчика события формы
//  ЗавершениеРаботы - Булево - Параметр из обработчика события формы
//
&НаКлиенте
Процедура УМ_ПередЗакрытием(Отказ, ЗавершениеРаботы)
	_УМ_Сохранение_ПередЗакрытием(Отказ, ЗавершениеРаботы);
КонецПроцедуры

// Необходимо вызывать внутри обработчика ПриЗакрытии модуля формы
//
// Параметры:
//  ЗавершениеРаботы - Булево - Параметр из обработчика события формы
//
&НаКлиенте
Процедура УМ_ПриЗакрытии(ЗавершениеРаботы)
	_УМ_КрасивыйРедактор_ПриЗакрытии(ЗавершениеРаботы);
КонецПроцедуры

#КонецОбласти

#Область Сохранение

// Необходимо вызывать внутри обработчика ПриСозданииНаСервере модуля формы при использовании механизма "Сохранение"
// Вызов должен размещаться после вызова УМ_ПриСозданииНаСервере
//
&НаСервере
Процедура УМ_Сохранение_ПриСозданииНаСервере()
	ЭтотОбъект.УМ_Данные.Вставить("Сохранение", Новый Структура);
	
	КлючНастроек = "";
	ИмяОбъекта = "";
	УМ_Сохранение_ПриЗаполненииНастроекИнструментаПереопределяемый(Неопределено, ИмяОбъекта, Неопределено, КлючНастроек);
	
	МодульОбъекта = РеквизитФормыВЗначение("Объект");
	СохраненныеДанные = МодульОбъекта.СохраненнаяНастройка(КлючНастроек, "ДанныеАвтосохранения");
	
	ЭтотОбъект.УМ_Данные.Сохранение.Вставить("АдресДанныхАвтосохранения");
	Если ЗначениеЗаполнено(СохраненныеДанные) Тогда
		АдресВХ = ПоместитьВоВременноеХранилище(СохраненныеДанные, УникальныйИдентификатор);
		
		МодульОбъекта = РеквизитФормыВЗначение("Объект");
		РезультатЧтения = МодульОбъекта.ДанныеИзУниверсальногоПакетаВХ(АдресВХ, ИмяОбъекта);
		
		Если Не РезультатЧтения.Свойство("Ошибка") Тогда
			ЭтотОбъект.УМ_Данные.Сохранение.АдресДанныхАвтосохранения = АдресВХ;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Загружает данные, ранее сохранённые в этом инструменте
//
// Параметры:
//  Адрес - Строка - Адрес файла во временном хранилище
//
&НаСервере
Процедура УМ_Сохранение_ПрочитатьУниверсальныйПакет(Знач Адрес)
	МодульОбъекта = РеквизитФормыВЗначение("Объект");
	
	ВерсияФормата = 0;
	ИмяИнструмента = "";
	ИмяОбъекта = "";
	УМ_Сохранение_ПриЗаполненииНастроекИнструментаПереопределяемый(ВерсияФормата, ИмяОбъекта,
		ИмяИнструмента, Неопределено);
	//
	
	ДанныеПакета = МодульОбъекта.ДанныеИзУниверсальногоПакетаВХ(Адрес, ИмяОбъекта);
	Если ДанныеПакета.Свойство("Ошибка") Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ДанныеПакета.Ошибка;
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	УМ_Сохранение_ПриЧтенииОбъектаПереопределяемый(ДанныеПакета.Объект, ДанныеПакета.ВерсияФормата);
	
	Модифицированность = Ложь;
КонецПроцедуры

// Выполняет автосохранение данных формы
//
&НаСервере
Процедура УМ_Сохранение_ВыполнитьАвтосохранение()
	КлючНастроек = "";
	УМ_Сохранение_ПриЗаполненииНастроекИнструментаПереопределяемый(Неопределено, Неопределено,
		Неопределено, КлючНастроек);
	//
	
	АдресПакетаВХ = _УМ_Сохранение_СформироватьУниверсальныйПакет();
	ДанныеПакета = ПолучитьИзВременногоХранилища(АдресПакетаВХ);
	УдалитьИзВременногоХранилища(АдресПакетаВХ);
	
	МодульОбъекта = РеквизитФормыВЗначение("Объект");
	МодульОбъекта.СохранитьНастройку(ключНастроек, "ДанныеАвтосохранения", ДанныеПакета);
	ЭтотОбъект.УМ_Данные.Сохранение.АдресДанныхАвтосохранения = Неопределено;
КонецПроцедуры

// Запрашивает сохранение текущих данных
//
// Параметры:
//  ЗакрытьФорму - Булево - Если Истина, форма будет закрыта после сохранения или отказа от сохранения
//
// Возвращаемое значение:
//  Обещание - Результат работы обещания - Булево - Разрешить выполнение действия
//
&НаКлиенте
Асинх Функция УМ_Сохранение_ЗапроситьСохранениеАсинх(ЗакрытьФорму = Ложь)
	Если Не Модифицированность Тогда
		Возврат Истина;
	КонецЕсли;
	
	Ответ = Ждать ВопросАсинх("Данные были изменены. Сохранить изменения?", РежимДиалогаВопрос.ДаНетОтмена);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Результат = Ждать УМ_Сохранение_СохранитьАсинх();
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
		Результат = Истина;
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
	Если Результат И ЗакрытьФорму Тогда
		Модифицированность = Ложь;
		ЭтотОбъект.Закрыть();
	КонецЕсли;
	Возврат Результат;
КонецФункции

// Выполняет сохранение данных
//
// Возвращаемое значение:
//  Обещание - Результат работы обещания - Булево - Данные сохранены
//             Может быть Ложь, если пользователь отменил сохранение в соответствующих диалогах
//
&НаКлиенте
Асинх Функция УМ_Сохранение_СохранитьАсинх()
	ИмяИнструмента = "";
	УМ_Сохранение_ПриЗаполненииНастроекИнструментаПереопределяемый(Неопределено, Неопределено,
		ИмяИнструмента, Неопределено);
	//
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		АдресВХ = _УМ_Сохранение_СформироватьУниверсальныйПакет();
		#Если ВебКлиент Тогда
			Ждать ПолучитьФайлССервераАсинх(АдресВХ, ИмяИнструмента + ".xml", Новый ПараметрыДиалогаПолученияФайлов);
		#Иначе
			Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
			Диалог.Фильтр = "Файл сохраняемых данных (*.xml)|*.xml|Все файлы|*";
			ВыбранныеФайлы = Ждать Диалог.ВыбратьАсинх();
			Если ВыбранныеФайлы = Неопределено Тогда
				Возврат Ложь;
			КонецЕсли;
			
			Ждать ПолучитьФайлССервераАсинх(АдресВХ, ВыбранныеФайлы[0]);
		#КонецЕсли
	Исключение
		ТекстОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Ждать ПредупреждениеАсинх(ТекстОшибки,, НСтр("ru='Ошибка сохранения данных'"));
	КонецПопытки;
	
	Модифицированность = Ложь;
	Возврат Истина;
КонецФункции

// Формирует XML-файл для сохранения текущих данных и помещает его во временное хранилище
//
// Возвращаемое значение:
//  Строка - Адрес во временном хранилище
//
&НаСервере
Функция _УМ_Сохранение_СформироватьУниверсальныйПакет()
	ВерсияФормата = 0;
	ИмяИнструмента = "";
	ИмяОбъекта = "";
	УМ_Сохранение_ПриЗаполненииНастроекИнструментаПереопределяемый(ВерсияФормата, ИмяОбъекта,
		ИмяИнструмента, Неопределено);
	//
	Если ВерсияФормата = 0 Тогда
		ВызватьИсключение "Не определены настройки инструмента XDTO";
	КонецЕсли;
	
	МодульОбъекта = РеквизитФормыВЗначение("Объект");
	Фабрика = МодульОбъекта.ФабрикаXDTO(ВерсияФормата);
	
	ОбъектXDTO = Фабрика.Создать(Фабрика.Тип("instrumentiki", ИмяОбъекта));
	УМ_Сохранение_ПриЗаполненииСохраняемогоОбъектаПереопределяемый(Фабрика, ОбъектXDTO);
	ОбъектXDTO.Проверить();
	
	АдресВХ = МодульОбъекта.ДанныеВУниверсальныйПакетВХ(ВерсияФормата, ОбъектXDTO,
		ИмяИнструмента, ЭтотОбъект.УникальныйИдентификатор);
	//
	Возврат АдресВХ;
КонецФункции

&НаКлиенте
Процедура _УМ_Сохранение_ПередЗакрытием(Отказ, ЗавершениеРаботы)
	Если Не ЭтотОбъект.УМ_Данные.Свойство("Сохранение") Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		Отказ = Истина;
		Если Не ЗавершениеРаботы Тогда
			УМ_Сохранение_ЗапроситьСохранениеАсинх(Истина);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область КрасивыйРедактор

// Необходимо вызывать внутри обработчика ПриСозданииНаСервере модуля формы при использовании
// механизма "КрасивыйРедактор"
// Вызов должен размещаться после вызова УМ_ПриСозданииНаСервере
//
&НаСервере
Процедура УМ_КрасивыйРедактор_ПриСозданииНаСервере()
	ЭтотОбъект.УМ_Данные.Вставить("КрасивыйРедактор", Новый Структура);
	ЭтотОбъект.УМ_Данные.КрасивыйРедактор.Вставить("Используется", Ложь);
	
	Редакторы = Новый Массив;
	УМ_КрасивыйРедактор_ПриОпределенииРедакторовПереопределяемый(Редакторы);
	ЭтотОбъект.УМ_Данные.КрасивыйРедактор.Вставить("Редакторы", Редакторы);
	
	Для Каждого Редактор Из Редакторы Цикл
		Элементы[Редактор.ИмяЭлементаТекстовыйДокумент].Видимость = Истина;
		Элементы[Редактор.ИмяЭлементаHTML].Видимость = Ложь;
		
		Элементы[Редактор.ИмяЭлементаHTML].УстановитьДействие(
			"ДокументСформирован", "УМ_КрасивыйРедактор_СобытиеДокументСформирован");
		Элементы[Редактор.ИмяЭлементаHTML].УстановитьДействие(
			"ПриНажатии", "УМ_КрасивыйРедактор_СобытиеПриНажатии");
	КонецЦикла;
	
	МодульОбъекта = РеквизитФормыВЗначение("Объект");
	МодульОбъекта.ИнициализироватьКрасивыйРедакторКода(УникальныйИдентификатор);
	ЗначениеВРеквизитФормы(МодульОбъекта, "Объект");
КонецПроцедуры

// Переключает редактор кода между текстовым документом и HTML-редактором
//
// Параметры:
//  Кнопка - КнопкаФормы - Кнопка, на которой необходимо отразить новое состояние использования красивого редактора
//
&НаКлиенте
Процедура УМ_КрасивыйРедактор_ПереключитьРедакторКода(Кнопка)
	#Если ВебКлиент Тогда
		ПоказатьПредупреждение(, "Красивый редактор кода недоступен в веб-клиенте",, "Ой, у вас веб-клиент");
		Возврат;
	#КонецЕсли
	
	ИспользуетсяКрасивыйРедактор = Не ЭтотОбъект.УМ_Данные.КрасивыйРедактор.Используется;
	ЭтотОбъект.УМ_Данные.КрасивыйРедактор.Используется = ИспользуетсяКрасивыйРедактор;
	
	Для Каждого Редактор Из ЭтотОбъект.УМ_Данные.КрасивыйРедактор.Редакторы Цикл
		Элементы[Редактор.ИмяЭлементаТекстовыйДокумент].Видимость = Не ИспользуетсяКрасивыйРедактор;
		Элементы[Редактор.ИмяЭлементаHTML].Видимость = ИспользуетсяКрасивыйРедактор;
		Кнопка.Пометка = ИспользуетсяКрасивыйРедактор;
	КонецЦикла;
КонецПроцедуры

// Обновляет код в HTML-полях красивого редактора
// Может вызываться при программном изменении значения исходного реквизита с кодом
//
&НаКлиенте
Процедура УМ_КрасивыйРедактор_ОбновитьТекст()
	Для Каждого Редактор Из ЭтотОбъект.УМ_Данные.КрасивыйРедактор.Редакторы Цикл
		Вью = _УМ_КрасивыйРедактор_ОбъектВьюРедактора(Элементы[Редактор.ИмяЭлементаHTML]);
		Если Вью <> Неопределено Тогда
			Вью.setContent(ЭтотОбъект[Редактор.ИмяРеквизита]);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция _УМ_КрасивыйРедактор_ОбъектВьюРедактора(Элемент)
	Возврат ?(Элемент.Документ = Неопределено, Неопределено, Элемент.Документ.defaultView);
КонецФункции

&НаКлиенте
Процедура _УМ_КрасивыйРедактор_ПриОткрытии()
	Если Не ЭтотОбъект.УМ_Данные.Свойство("КрасивыйРедактор") Тогда
		Возврат;
	КонецЕсли;
	
	#Если Не ВебКлиент Тогда
		Если ЭтоАдресВременногоХранилища(Объект.ПутьККрасивомуРедакторуКода) Тогда
			_УМ_КрасивыйРедактор_РаспаковатьРедактор();
		Иначе
			ЭтотОбъект.УМ_КрасивыйРедакторКода_Путь = Объект.ПутьККрасивомуРедакторуКода;
		КонецЕсли;
	#КонецЕсли
КонецПроцедуры

// Получает ZIP-файл из временного хранилища и распаковывает архив во временную директорию
//
&НаКлиенте
Асинх Процедура _УМ_КрасивыйРедактор_РаспаковатьРедактор()
	#Если Не ВебКлиент Тогда
		// BSLLS:MissingTemporaryFileDeletion-off
		// Каталог нужен на весь период, пока открыта форма. Удаляется в обработчике ПриЗакрытии
		Каталог = ПолучитьИмяВременногоФайла() + "\";
		// BSLLS:MissingTemporaryFileDeletion-on
		ПутьКАрхиву = Каталог + "archive.zip";
		
		Ждать СоздатьКаталогАсинх(Каталог);
		Ждать ПолучитьФайлССервераАсинх(Объект.ПутьККрасивомуРедакторуКода, ПутьКАрхиву);
		
		ЧтениеZIP = Новый ЧтениеZipФайла(ПутьКАрхиву);
		ЧтениеZIP.ИзвлечьВсе(Каталог);
		ЧтениеZIP.Закрыть();
		Ждать УдалитьФайлыАсинх(ПутьКАрхиву);
		
		ЭтотОбъект.УМ_КрасивыйРедакторКода_Путь = "file://" + СтрЗаменить(Каталог, "\", "/") + "index.html";
	#КонецЕсли
КонецПроцедуры

// См. https://github.com/salexdv/bsl_console/blob/develop/docs/update_metadata.md
//
// Возвращаемое значение:
//  Структура
//
&НаСервереБезКонтекста
Функция _УМ_КрасивыйРедактор_СтруктураМетаданных()
	Результат = Новый Структура;
	
	Результат.Вставить("catalogs",
		_УМ_КрасивыйРедактор_ИменаОбъектовМетаданныхИзКоллекции(Метаданные.Справочники));
	//
	Результат.Вставить("documents",
		_УМ_КрасивыйРедактор_ИменаОбъектовМетаданныхИзКоллекции(Метаданные.Документы));
	//
	Результат.Вставить("informationregisters",
		_УМ_КрасивыйРедактор_ИменаОбъектовМетаданныхИзКоллекции(Метаданные.РегистрыСведений));
	//
	Результат.Вставить("accumulationregisters",
		_УМ_КрасивыйРедактор_ИменаОбъектовМетаданныхИзКоллекции(Метаданные.РегистрыНакопления));
	//
	Результат.Вставить("accountingregisters",
		_УМ_КрасивыйРедактор_ИменаОбъектовМетаданныхИзКоллекции(Метаданные.РегистрыБухгалтерии));
	//
	Результат.Вставить("calculationregisters",
		_УМ_КрасивыйРедактор_ИменаОбъектовМетаданныхИзКоллекции(Метаданные.РегистрыРасчета));
	//
	Результат.Вставить("dataprocessors",
		_УМ_КрасивыйРедактор_ИменаОбъектовМетаданныхИзКоллекции(Метаданные.Обработки));
	//
	Результат.Вставить("reports",
		_УМ_КрасивыйРедактор_ИменаОбъектовМетаданныхИзКоллекции(Метаданные.Отчеты));
	//
	Результат.Вставить("enums",
		_УМ_КрасивыйРедактор_ИменаОбъектовМетаданныхИзКоллекции(Метаданные.Перечисления));
	//
	Результат.Вставить("chartsofaccounts",
		_УМ_КрасивыйРедактор_ИменаОбъектовМетаданныхИзКоллекции(Метаданные.ПланыСчетов));
	//
	Результат.Вставить("businessprocesses",
		_УМ_КрасивыйРедактор_ИменаОбъектовМетаданныхИзКоллекции(Метаданные.БизнесПроцессы));
	//
	Результат.Вставить("tasks",
		_УМ_КрасивыйРедактор_ИменаОбъектовМетаданныхИзКоллекции(Метаданные.Задачи));
	//
	Результат.Вставить("exchangeplans",
		_УМ_КрасивыйРедактор_ИменаОбъектовМетаданныхИзКоллекции(Метаданные.ПланыОбмена));
	//
	Результат.Вставить("chartsofcharacteristictypes",
		_УМ_КрасивыйРедактор_ИменаОбъектовМетаданныхИзКоллекции(Метаданные.ПланыВидовХарактеристик));
	//
	Результат.Вставить("chartsofcalculationtypes",
		_УМ_КрасивыйРедактор_ИменаОбъектовМетаданныхИзКоллекции(Метаданные.ПланыВидовРасчета));
	//
	Результат.Вставить("constants",
		_УМ_КрасивыйРедактор_ИменаОбъектовМетаданныхИзКоллекции(Метаданные.Константы));
	//
	
	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, Результат);
	
	Возврат Запись.Закрыть();
КонецФункции

// Формирует структуру с именами метаданных для красивого редактора кода
// См. https://github.com/salexdv/bsl_console/blob/develop/docs/update_metadata.md
//
// Параметры:
//  КоллекцияОбъектовМетаданных - КоллекцияОбъектовМетаданных - Коллекция объектов метаданных
//
// Возвращаемое значение:
//  Структура
//
&НаСервереБезКонтекста
Функция _УМ_КрасивыйРедактор_ИменаОбъектовМетаданныхИзКоллекции(КоллекцияОбъектовМетаданных)
	Результат = Новый Структура;
	
	Для Каждого Мета Из КоллекцияОбъектовМетаданных Цикл
		Результат.Вставить(Мета.Имя, Новый Структура);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура _УМ_КрасивыйРедактор_ПриЗакрытии(ЗавершениеРаботы)
	Если Не ЭтотОбъект.УМ_Данные.Свойство("КрасивыйРедактор") Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭтотОбъект.УМ_КрасивыйРедакторКода_Путь)
		И СтрНачинаетсяС(ЭтотОбъект.УМ_КрасивыйРедакторКода_Путь, "file")
		И ЭтоАдресВременногоХранилища(Объект.ПутьККрасивомуРедакторуКода) Тогда
		
		Каталог = СтрЗаменить(ЭтотОбъект.УМ_КрасивыйРедакторКода_Путь, "file://", "");
		
		Разд = СтрРазделить(СтрЗаменить(Каталог, "/", "\"), "\", Ложь);
		Разд.Удалить(Разд.ВГраница());
		Каталог = СтрСоединить(Разд, "\");
		
		УдалитьФайлыАсинх(Каталог);
		
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ПолучениеСсылок

// Запрашивает у пользователя навигационную ссылку и возвращает ссылку на объект ИБ
// При возникновении ошибки разбора ссылки формируется предупреждение
//
// Возвращаемое значение:
//  ЛюбаяСсылка - Полученная ссылка
//  Неопределено - При прерывании действия пользователем
//
&НаКлиенте
Асинх Функция УМ_ПолучениеСсылок_ЗапроситьСсылкуИзНавигационнойАсинх()
	ТекстСсылки = Ждать ВвестиСтрокуАсинх(Неопределено, НСтр("ru='Навигационная ссылка'"));
	Если ТекстСсылки = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		Ссылка = _УМ_ПолучениеСсылок_СсылкаИзНавигационной(ТекстСсылки);
		Возврат Ссылка;
	Исключение
		Ждать ПредупреждениеАсинх(НСтр("ru='Ошибка получения ссылки'"));
		Возврат Неопределено;
	КонецПопытки;
КонецФункции

// Запрашивает выбор пользователем открытого окна программы и возвращает соответствующую окну ссылку на объект ИБ
// При возникновении ошибки разбора ссылки формируется предупреждение
//
// Возвращаемое значение:
//  ЛюбаяСсылка - Полученная ссылка
//  Неопределено - При прерывании действия пользователем
//
&НаКлиенте
Асинх Функция УМ_ПолучениеСсылок_ЗапроситьСсылкуИзОткрытыхОконАсинх()
	Окна = ПолучитьОкна();
	СписокДляВыбора = Новый СписокЗначений;
	
	Для Каждого ОткрытоеОкно Из Окна Цикл
		Если ОткрытоеОкно.НачальнаяСтраница Тогда
			Продолжить;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ОткрытоеОкно.ПолучитьНавигационнуюСсылку()) Тогда
			Продолжить;
		КонецЕсли;
		
		СписокДляВыбора.Добавить(ОткрытоеОкно.ПолучитьНавигационнуюСсылку(), ОткрытоеОкно.Заголовок);
	КонецЦикла;
	
	Если СписокДляВыбора.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru='Нет доступных для выбора окон'"));
		Возврат Неопределено;
	КонецЕсли;
	
	ВыбранныйЭлемент = Ждать СписокДляВыбора.ВыбратьЭлементАсинх(НСтр("ru='Выберите окно'"));
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		Ссылка = _УМ_ПолучениеСсылок_СсылкаИзНавигационной(ВыбранныйЭлемент.Значение);
		Возврат Ссылка;
	Исключение
		Ждать ПредупреждениеАсинх(НСтр("ru='Ошибка получения ссылки'"));
		Возврат Неопределено;
	КонецПопытки;
КонецФункции

// Формирует ссылку на объект ИБ из навигационной ссылки вида "e1cib/data/Справочник.Контрагенты?ref=<GUID>"
// При невозможности сформировать ссылку вызывает исключение
//
// Параметры:
//  НавигационнаяСсылка - Строка - Навигационная ссылка
//
// Возвращаемое значение:
//  Произвольный - Ссылка на объект ИБ
//
&НаСервереБезКонтекста
Функция _УМ_ПолучениеСсылок_СсылкаИзНавигационной(Знач НавигационнаяСсылка)
	ПерваяТочка = СтрНайти(НавигационнаяСсылка, "e1cib/data/");
    ВтораяТочка = СтрНайти(НавигационнаяСсылка, "?ref=");
    
    ПредставлениеТипа = Сред(НавигационнаяСсылка, ПерваяТочка + 11, ВтораяТочка - ПерваяТочка - 11);
    ШаблонЗначения = ЗначениеВСтрокуВнутр(ПредопределенноеЗначение(ПредставлениеТипа + ".ПустаяСсылка"));
	НулевойИдентификатор = "00000000000000000000000000000000";
    ЗначениеСсылки = СтрЗаменить(ШаблонЗначения, НулевойИдентификатор, Сред(НавигационнаяСсылка, ВтораяТочка + 5));
	Возврат ЗначениеИзСтрокиВнутр(ЗначениеСсылки);
КонецФункции

#КонецОбласти

#КонецОбласти

#Область УниверсальныеМеханизмыПереопределяемый

#Область Сохранение

// BSLLS:TransferringParametersBetweenClientAndServer-off
// Параметры процедуры возвратные

// Процедура, определяющая параметры интеграции инструмента с функциями сохранения данных
//
// Параметры:
//  ВерсияФормата - Число - Версия формата XDTO
//  ИмяОбъекта - Строка - Имя объекта XDTO
//  ИмяИнструмента - Строка - Пользовательское представление названия текущего инструмента
//  КлючНастроек - Строка - Ключ настроек хранилища общих настроек для данных автосохранения
//
&НаСервереБезКонтекста
Процедура УМ_Сохранение_ПриЗаполненииНастроекИнструментаПереопределяемый(ВерсияФормата, ИмяОбъекта,
	ИмяИнструмента, КлючНастроек)
	
	ВерсияФормата = 5;
	ИмяОбъекта = "КонсольЗапросов_Данные";
	ИмяИнструмента = НСтр("ru='Консоль запросов'");
	КлючНастроек = "КонсольЗапросов";
	
КонецПроцедуры

// BSLLS:TransferringParametersBetweenClientAndServer-on

// Функция формирования пакета XDTO для сохранения в файл
//
// Параметры:
//  Фабрика - ФабрикаXDTO - Фабрика, инициализированная по XSD-схемам Инструментиков
//  Пакет - ОбъектXDTO - Объект для заполнения
//
&НаСервере
Процедура УМ_Сохранение_ПриЗаполненииСохраняемогоОбъектаПереопределяемый(Фабрика, Пакет)
	ТипХДТОПараметрЗапроса = Фабрика.Тип("instrumentiki", "КонсольЗапросов_ПараметрЗапроса");
	
	Пакет.ТекстЗапроса = ТекстЗапроса;
	Пакет.МетодВыполненияЗапроса = МетодВыполненияЗапроса;
	Пакет.ОграничениеКоличестваСтрок = ОграничениеКоличестваСтрок;
	Пакет.СохранятьВременныеТаблицыМеждуЗапросами = СохранятьВременныеТаблицыМеждуЗапросами;
	
	Пакет.ПередВыполнением = ПередВыполнением;
	Пакет.ПриВыборке = ПриВыборке;
	Пакет.ПослеВыполнения = ПослеВыполнения;
	
	Для Каждого СтрИсточник Из ПараметрыЗапроса Цикл
		СтрХДТО = Фабрика.Создать(ТипХДТОПараметрЗапроса);
		
		СтрХДТО.Имя = СтрИсточник.Имя;
		СтрХДТО.ВидПараметра = СтрИсточник.ВидПараметра;
		СтрХДТО.Значение = Новый ХранилищеЗначения(СтрИсточник.Значение, Новый СжатиеДанных(9));
		
		Пакет.ПараметрыЗапроса.Добавить(СтрХДТО);
	КонецЦикла;
КонецПроцедуры

// Процедура чтения данных из файла
//
// Параметры:
//  Пакет - ОбъектXDTO - Объект для заполнения
//  ВерсияФормата - Число - Версия формата XDTO
//
&НаСервере
Процедура УМ_Сохранение_ПриЧтенииОбъектаПереопределяемый(Пакет, ВерсияФормата)
	ТекстЗапроса = Пакет.ТекстЗапроса;
	ОграничениеКоличестваСтрок = Пакет.ОграничениеКоличестваСтрок;
	МетодВыполненияЗапроса = Пакет.МетодВыполненияЗапроса;
	ТекстЗапроса = Пакет.ТекстЗапроса;
	
	ПередВыполнением = "";
	ПриВыборке = "";
	ПослеВыполнения = "";
	
	Если ВерсияФормата >= 2 Тогда
		ПередВыполнением = Пакет.ПередВыполнением;
		ПриВыборке = Пакет.ПриВыборке;
		ПослеВыполнения = Пакет.ПослеВыполнения;
	КонецЕсли;
	
	Если ВерсияФормата >= 5 Тогда
		СохранятьВременныеТаблицыМеждуЗапросами = Пакет.СохранятьВременныеТаблицыМеждуЗапросами;
	Иначе
		СохранятьВременныеТаблицыМеждуЗапросами = Ложь;
	КонецЕсли;
	
	Если Не СохранятьВременныеТаблицыМеждуЗапросами И ЭтоАдресВременногоХранилища(АдресСохраненныхВременныхТаблиц) Тогда
		УдалитьИзВременногоХранилища(АдресСохраненныхВременныхТаблиц);
		АдресСохраненныхВременныхТаблиц = Неопределено;
	КонецЕсли;
	
	ПараметрыЗапроса.Очистить();
	Для Каждого СтрХДТО Из Пакет.ПараметрыЗапроса Цикл
		СтрПриемник = ПараметрыЗапроса.Добавить();
		
		СтрПриемник.Имя = СтрХДТО.Имя;
		СтрПриемник.ВидПараметра = СтрХДТО.ВидПараметра;
		
		Значение = СтрХДТО.Значение.Получить();
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(ТипЗнч(Значение));
		СтрПриемник.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
		
		СтрПриемник.Значение = Значение;
	КонецЦикла;
	
	Элементы.ГруппаРезультатНеактуален.Видимость = Истина;
КонецПроцедуры

// Позволяет выполнить произвольные действия на клиенте после успешной загрузки данных инструмента из файла
//
&НаКлиенте
Процедура УМ_Сохранение_ПослеЧтенияУниверсальногоПакетаПереопределяемый()
	УМ_КрасивыйРедактор_ОбновитьТекст();
КонецПроцедуры

#КонецОбласти

#Область КрасивыйРедактор

// Определяет используемые красивые редакторы кода
//
// Параметры:
//  Редакторы - Массив - Массив структур со следующими свойствами:
//  * ИмяРеквизита - Строка - Имя реквизита формы, хранящего код
//  * ИмяЭлементаТекстовыйДокумент - Строка - Имя элемента формы с текстовым документом редактора кода
//  * ИмяЭлементаHTML - Строка - Имя элемента формы, содержащего связанный HTML-документ
//  * Язык - Строка - Редактируемый язык:
//           "ВстроенныйЯзык" - встроенный язык 1С
//           "ЯзыкЗапросов" - язык запросов 1С
//
&НаСервере
Процедура УМ_КрасивыйРедактор_ПриОпределенииРедакторовПереопределяемый(Редакторы)
	Редактор = Новый Структура;
	Редактор.Вставить("ИмяРеквизита", "ТекстЗапроса");
	Редактор.Вставить("ИмяЭлементаТекстовыйДокумент", Элементы.ТекстЗапросаПростойРедактор.Имя);
	Редактор.Вставить("ИмяЭлементаHTML", Элементы.ТекстЗапросаКрасивыйРедактор.Имя);
	Редактор.Вставить("Язык", "ЯзыкЗапросов");
	Редакторы.Добавить(Редактор);
	
	Редактор = Новый Структура;
	Редактор.Вставить("ИмяРеквизита", "ПередВыполнением");
	Редактор.Вставить("ИмяЭлементаТекстовыйДокумент", Элементы.ПередВыполнениемПростойРедактор.Имя);
	Редактор.Вставить("ИмяЭлементаHTML", Элементы.ПередВыполнениемКрасивыйРедактор.Имя);
	Редактор.Вставить("Язык", "ВстроенныйЯзык");
	Редакторы.Добавить(Редактор);
	
	Редактор = Новый Структура;
	Редактор.Вставить("ИмяРеквизита", "ПриВыборке");
	Редактор.Вставить("ИмяЭлементаТекстовыйДокумент", Элементы.ПриВыборкеПростойРедактор.Имя);
	Редактор.Вставить("ИмяЭлементаHTML", Элементы.ПриВыборкеКрасивыйРедактор.Имя);
	Редактор.Вставить("Язык", "ВстроенныйЯзык");
	Редакторы.Добавить(Редактор);
	
	Редактор = Новый Структура;
	Редактор.Вставить("ИмяРеквизита", "ПослеВыполнения");
	Редактор.Вставить("ИмяЭлементаТекстовыйДокумент", Элементы.ПослеВыполненияПростойРедактор.Имя);
	Редактор.Вставить("ИмяЭлементаHTML", Элементы.ПослеВыполненияКрасивыйРедактор.Имя);
	Редактор.Вставить("Язык", "ВстроенныйЯзык");
	Редакторы.Добавить(Редактор);
КонецПроцедуры

#КонецОбласти

#КонецОбласти

// Преобразует все переданные значения в литералы языка запросов
//
// Параметры:
//  Значения - Массив - Массив произвольных значений
// 
// Возвращаемое значение:
// 	Массив - Массив полученных выражений языка запросов
//           Если для значения нет имени предопределенного, значением будет Неопределено
&НаСервереБезКонтекста
Функция ЗначенияВЛитералыЯзыкаЗапросов(Знач Значения)
	Результат = Новый Массив;
	
	Для Каждого Значение Из Значения Цикл
		Результат.Добавить(ЗначениеВЛитералЯзыкаЗапросов(Значение));
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Преобразует переданное значение в литерал языка запросов
//
// Параметры:
//  Значение - Произвольный -
//
// Возвращаемое значение:
//  Строка - Выражение языка запросов. Например, "ЗНАЧЕНИЕ(Справочник.ГруппыДоступа.Администраторы)" или "ИСТИНА"
//  Неопределено - Если значение невозможно представить в виде литерала
&НаСервереБезКонтекста
Функция ЗначениеВЛитералЯзыкаЗапросов(Знач Значение)
	Если Значение = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Пустая ссылка
	Попытка
		ОбъектМетаданных = Значение.Метаданные();
		МетаданныеСсылка = ОбъектМетаданных.СтандартныеРеквизиты.Ссылка;
		
		Если Значение.Пустая() Тогда
			Возврат СтрШаблон("ЗНАЧЕНИЕ(%1.ПустаяСсылка)", ОбъектМетаданных.ПолноеИмя());
		КонецЕсли;
	Исключение
		// Продолжаем, это не пустая ссылка
	КонецПопытки;
	
	ТипЗначения = ТипЗнч(Значение);
	
	Если ТипЗначения = Тип("Число") Тогда
		Возврат Формат(Значение, "ЧРД=.; ЧН=0; ЧГ=");
	ИначеЕсли ТипЗначения = Тип("Строка") Тогда
		Возврат """" + СтрЗаменить(Значение, """", """""") + """";
	ИначеЕсли ТипЗначения = Тип("Дата") Тогда
		Возврат Формат(Значение, "ДФ='''ДАТАВРЕМЯ''(гггг, М, д, Ч, м, с)'");
	ИначеЕсли ТипЗначения = Тип("Булево") Тогда
		Возврат ?(Значение, "ИСТИНА", "ЛОЖЬ");
	ИначеЕсли ТипЗначения = Тип("Неопределено") Тогда
		Возврат "НЕОПРЕДЕЛЕНО";
	ИначеЕсли ТипЗначения = Тип("Null") Тогда
		Возврат "NULL";
	ИначеЕсли ТипЗначения = Тип("ВидДвиженияНакопления") Тогда
		Если Значение = ВидДвиженияНакопления.Приход Тогда
			Возврат "ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)";
		Иначе
			Возврат "ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)";
		КонецЕсли;
	ИначеЕсли ТипЗначения = Тип("ВидДвиженияБухгалтерии") Тогда
		Если Значение = ВидДвиженияБухгалтерии.Дебет Тогда
			Возврат "ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет)";
		Иначе
			Возврат "ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Кредит)";
		КонецЕсли;
	ИначеЕсли Справочники.ТипВсеСсылки().СодержитТип(ТипЗначения)
		Или ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(ТипЗначения)
		Или ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(ТипЗначения)
		Или ПланыСчетов.ТипВсеСсылки().СодержитТип(ТипЗначения) Тогда
		
		ПолноеИмяМетаданных = Значение.Метаданные().ПолноеИмя();
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Таблица.ИмяПредопределенныхДанных КАК Имя
			|ИЗ
			|	[ИмяТаблицы] КАК Таблица
			|ГДЕ
			|	Таблица.Ссылка = &Ссылка
			|	И Таблица.Предопределенный";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "[ИмяТаблицы]", ПолноеИмяМетаданных);
		Запрос.УстановитьПараметр("Ссылка", Значение);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			ИмяЗначения = РезультатЗапроса.Выгрузить()[0].Имя;
			Возврат СтрШаблон("ЗНАЧЕНИЕ(%1)", ПолноеИмяМетаданных + "." + ИмяЗначения);
		КонецЕсли;
	ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(ТипЗначения) Тогда
		ОбъектМетаданных = Значение.Метаданные();
		
		ИндексЗначения = Перечисления[ОбъектМетаданных.Имя].Индекс(Значение);
		Возврат СтрШаблон("ЗНАЧЕНИЕ(%1)", ОбъектМетаданных.ПолноеИмя() + "." + ОбъектМетаданных.ЗначенияПеречисления[ИндексЗначения].Имя);
	КонецЕсли;
КонецФункции

// Запрашивает и отображает пользователю итоговые значения по текущей колонке таблицы текущего результата запроса
//
// Параметры:
//  ИдентификаторыСтрок - Массив, Неопределено - Массив идентификаторов строк, по значениям которых необходимо рассчитать итоги
//                                               Если Неопределено, итоги будут рассчитаны по всей таблице
&НаКлиенте
Процедура ПоказатьИтогТекущегоРезультатаЗапроса(ИдентификаторыСтрок = Неопределено)
	Итоги = ИтогиПоКолонкеТекущегоРезультатаЗапроса(ИдентификаторыСтрок);
	Сумма = Формат(Окр(Итоги.Сумма, 4), "ЧН=0");
	Среднее = Формат(Окр(Итоги.Среднее, 4), "ЧН=0");
	Минимум = ?(Итоги.Минимум = Неопределено, "<не было строк для расчета>", Формат(Окр(Итоги.Минимум, 4), "ЧН=0"));
	Максимум = ?(Итоги.Максимум = Неопределено, "<не было строк для расчета>", Формат(Окр(Итоги.Максимум, 4), "ЧН=0"));
	
	Сообщить(СтрШаблон("Сумма: %1
	                   |Среднее: %2
					   |Минимум: %3
					   |Максимум: %4", Сумма, Среднее, Минимум, Максимум));
КонецПроцедуры

// Сравнивает две версии
//
// Параметры
//  ВерсияСлева - Строка -
//  ВерсияСправа - Строка -
//
// Возвращаемое значение:
//  Число - "0", если версии совпадают; "1", если ВерсияСлева > ВерсияСправа; "-1", если ВерсияСлева < ВерсияСправа
&НаКлиентеНаСервереБезКонтекста
Функция СравнитьВерсии(ВерсияСлева, ВерсияСправа)
	ЧастиСлева = СтрРазделить(ВерсияСлева, ".");
	ЧастиСправа = СтрРазделить(ВерсияСправа, ".");
	КоличествоЧастей = ?(ЧастиСлева.Количество() > ЧастиСправа.Количество(), ЧастиСлева.Количество(), ЧастиСправа.Количество());
	
	Пока ЧастиСлева.Количество() < КоличествоЧастей Цикл
		ЧастиСлева.Добавить("0");
	КонецЦикла;
	Пока ЧастиСправа.Количество() < КоличествоЧастей Цикл
		ЧастиСправа.Добавить("0");
	КонецЦикла;
	
	Для Сч = 0 По КоличествоЧастей - 1 Цикл
		Слева = Число(ЧастиСлева[Сч]);
		Справа = Число(ЧастиСправа[Сч]);
		
		Если Слева > Справа Тогда
			Возврат -1;
		ИначеЕсли Слева < Справа Тогда
			Возврат 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат 0;
КонецФункции

// Выполняет запрос к базе данных
//
// Параметры:
//  ТекстОшибки - Строка, Неопределено - Параметр, через который на клиент передается текст ошибки, если таковая произошла
&НаСервере
Процедура ВыполнитьЗапросНаСервере(ТекстОшибки)
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	УМ_Сохранение_ВыполнитьАвтосохранение();
	
	Запрос = Новый Запрос;
	Если СохранятьВременныеТаблицыМеждуЗапросами Тогда
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Если ЭтоАдресВременногоХранилища(АдресСохраненныхВременныхТаблиц) Тогда
			СохраненныеВременныеТаблицы = ПолучитьИзВременногоХранилища(АдресСохраненныхВременныхТаблиц);
			
			Для Каждого СтрСохраненныеТаблицы Из СохраненныеВременныеТаблицы Цикл
				Запрос.Текст = "ВЫБРАТЬ
				               |	*
				               |ПОМЕСТИТЬ [ИмяТаблицы]
				               |ИЗ
				               |	&ВременнаяТаблица КАК ВременнаяТаблица";
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "[ИмяТаблицы]", СтрСохраненныеТаблицы.Имя);
				Запрос.УстановитьПараметр("ВременнаяТаблица", СтрСохраненныеТаблицы.Таблица);
				Запрос.Выполнить();
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	ИменаВременныхТаблиц = ИменаВременныхТаблиц(ТекстЗапроса);
	
	Для Каждого Стр Из ПараметрыЗапроса Цикл
		Если Стр.ВидПараметра = "Простой" Тогда
			Запрос.УстановитьПараметр(Стр.Имя, Стр.Значение);
		ИначеЕсли Стр.ВидПараметра = "Список" Тогда
			Запрос.УстановитьПараметр(Стр.Имя, Стр.Значение.ВыгрузитьЗначения());
		ИначеЕсли Стр.ВидПараметра = "Таблица" Тогда
			Запрос.УстановитьПараметр(Стр.Имя, Стр.Значение.Получить());
		Иначе
			ВызватьИсключение "Неизвестный вид параметра: " + Стр.ВидПараметра;
		КонецЕсли;
	КонецЦикла;
	
	ОбменМеждуОбработчиками = Неопределено;
	Попытка
		ВыполнитьОбработчикПередВыполнением(ПередВыполнением, ОбменМеждуОбработчиками, Запрос);
	Исключение
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибки = НСтр("ru = 'Ошибка при выполнении обработчика ""Перед выполнением"":
                            |'") + ТекстОшибки;
		Возврат;
	КонецПопытки;
	
	ФактическиВыполненныйЗапрос = Запрос.Текст;
	
	ФактическиУстановленныеПараметрыЗапроса.Очистить();
	Для Каждого Параметр Из Запрос.Параметры Цикл
		СтрФактическиеПараметры = ФактическиУстановленныеПараметрыЗапроса.Добавить();
		СтрФактическиеПараметры.Имя = Параметр.Ключ;
		СтрФактическиеПараметры.Тип = ТипЗнч(Параметр.Значение);
		
		Если ТипЗнч(Параметр.Значение) = Тип("ТаблицаЗначений") Тогда
			СтрФактическиеПараметры.Значение = НСтр("ru='<таблица значений>'");
		ИначеЕсли ТипЗнч(Параметр.Значение) = Тип("Массив") Тогда
			СтрФактическиеПараметры.Значение = Новый СписокЗначений;
			СтрФактическиеПараметры.Значение.ЗагрузитьЗначения(Параметр.Значение);
		Иначе
			СтрФактическиеПараметры.Значение = Параметр.Значение;
		КонецЕсли;
	КонецЦикла;
	
	НачалоЗамераВремениВыполнения = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Если МетодВыполненияЗапроса = "Выполнить" Тогда
		Результаты = Новый Массив;
		Результаты.Добавить(Запрос.Выполнить());
	ИначеЕсли МетодВыполненияЗапроса = "ВыполнитьПакет" Тогда
		Результаты = Запрос.ВыполнитьПакет();
	ИначеЕсли МетодВыполненияЗапроса = "ВыполнитьПакетСПромежуточнымиДанными" Тогда
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Результаты = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	Иначе
		ВызватьИсключение "Неизвестный метод выполнения запроса: " + МетодВыполненияЗапроса;
	КонецЕсли;
	ВремяВыполненияЗапроса = ТекущаяУниверсальнаяДатаВМиллисекундах() - НачалоЗамераВремениВыполнения;
	
	РезультатыЗапроса.Очистить();
	Элементы.ОтображаемаяТаблица.СписокВыбора.Очистить();
	ИндексТаблицыОтображаемойПоУмолчанию = 0;
	
	Если СохранятьВременныеТаблицыМеждуЗапросами Тогда
		СохраняемыеТаблицы = Новый Массив;
		Для Каждого ВременнаяТаблица Из Запрос.МенеджерВременныхТаблиц.Таблицы Цикл
			СтрСохраняемыеТаблицы = Новый Структура("Имя, Таблица", ВременнаяТаблица.ПолноеИмя);
			СтрСохраняемыеТаблицы.Таблица = ВременнаяТаблица.ПолучитьДанные().Выгрузить();
			СохраняемыеТаблицы.Добавить(СтрСохраняемыеТаблицы);
		КонецЦикла;
		
		АдресСохраненныхВременныхТаблиц = ПоместитьВоВременноеХранилище(СохраняемыеТаблицы, УникальныйИдентификатор);
		
		Запрос.МенеджерВременныхТаблиц.Закрыть();
	КонецЕсли;
	
	Для Каждого Результат Из Результаты Цикл
		ИндексЗапроса = РезультатыЗапроса.Количество();
		
		Если Результат = Неопределено Тогда // Уничтожение временной таблицы
			Попытка
				ВыполнитьОбработчикПослеВыполнения(ПослеВыполнения, ОбменМеждуОбработчиками, ИндексЗапроса, Неопределено);
			Исключение
				ТекстОшибки = СтрШаблон(НСтр("ru = 'Ошибка при выполнении обработчика ""После выполнения"" (запрос №%1):
                                              |
                                              |%2'"), Формат(ИндексЗапроса, "ЧН=0; ЧГ="), КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				Возврат;
			КонецПопытки;
			
			Если МетодВыполненияЗапроса <> "Выполнить" И ЗначениеЗаполнено(ИменаВременныхТаблиц[ИндексЗапроса]) Тогда
				ИмяВТ = " " + ИменаВременныхТаблиц[ИндексЗапроса];
			Иначе
				ИмяВТ = "";
			КонецЕсли;
			ЭлементСпискаЗначений = РезультатыЗапроса.Добавить(Неопределено, СтрШаблон("[%1]: Уничтожение временной таблицы%2", ИндексЗапроса, ИмяВТ));
		Иначе
			Таблица = Новый ТаблицаЗначений;
			КлючСтруктурыВыборки = Новый Массив;
			Для Каждого Колонка Из Результат.Колонки Цикл
				Таблица.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения, Колонка.Имя, Колонка.Ширина);
				КлючСтруктурыВыборки.Добавить(Колонка.Имя);
			КонецЦикла;
			КлючСтруктурыВыборки = СтрСоединить(КлючСтруктурыВыборки, ",");
			
			Выборка = Результат.Выбрать();
			ИндексСтроки = 0;
			Пока Выборка.Следующий() И (ОграничениеКоличестваСтрок = 0 Или Таблица.Количество() < ОграничениеКоличестваСтрок) Цикл
				Если Не ПустаяСтрока(ПриВыборке) Тогда
					Структура = Новый Структура(КлючСтруктурыВыборки);
					ЗаполнитьЗначенияСвойств(Структура, Выборка);
					
					Попытка
						ВыполнитьОбработчикПриВыборке(ПриВыборке, ОбменМеждуОбработчиками, ИндексЗапроса, Структура);
					Исключение
						ТекстОшибки = СтрШаблон(НСтр("ru = 'Ошибка при выполнении обработчика ""При выборке"" (запрос №%1, строка №%2):
                                                      |%3'"), Формат(ИндексЗапроса, "ЧН=0; ЧГ="), Формат(ИндексСтроки, "ЧН=0; ЧГ="), КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
						Возврат;
					КонецПопытки;
					
					Если Структура <> Неопределено Тогда
						СтрТаблица = Таблица.Добавить();
						ЗаполнитьЗначенияСвойств(СтрТаблица, Структура);
					КонецЕсли;
				Иначе
					СтрТаблица = Таблица.Добавить();
					ЗаполнитьЗначенияСвойств(СтрТаблица, Выборка);
				КонецЕсли;
				
				ИндексСтроки = ИндексСтроки + 1;
			КонецЦикла;
			
			Попытка
				ВыполнитьОбработчикПослеВыполнения(ПослеВыполнения, ОбменМеждуОбработчиками, ИндексЗапроса, Таблица);
			Исключение
				ТекстОшибки = СтрШаблон(НСтр("ru = 'Ошибка при выполнении обработчика ""После выполнения"" (запрос №%1):
                                              |%2'"), Формат(ИндексЗапроса, "ЧН=0; ЧГ="), КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				Возврат;
			КонецПопытки;
			
			ХранилищеЗначения = Новый ХранилищеЗначения(Таблица, Новый СжатиеДанных(9));
			
			Если МетодВыполненияЗапроса <> "Выполнить" И ЗначениеЗаполнено(ИменаВременныхТаблиц[ИндексЗапроса]) Тогда
				ИмяВТ = ", таблица " + ИменаВременныхТаблиц[ИндексЗапроса];
			Иначе
				ИмяВТ = "";
			КонецЕсли;
			
			ПредставлениеКоличества = СтрокаСЧислом("; %1 строка; ; %1 строки; %1 строк; %1 строки", Таблица.Количество(), ВидЧисловогоЗначения.Количественное, "ЧН=0");
			
			ЭлементСпискаЗначений = РезультатыЗапроса.Добавить(ХранилищеЗначения, СтрШаблон("[%1]: %2%3", ИндексЗапроса, ПредставлениеКоличества, ИмяВТ));
			Если Таблица.Количество() < Выборка.Количество() Тогда
				ЭлементСпискаЗначений.Представление = ЭлементСпискаЗначений.Представление + СтрШаблон(НСтр("ru=' (из %1)'"), Выборка.Количество());
			КонецЕсли;
			
			ИндексТаблицыОтображаемойПоУмолчанию = ИндексЗапроса;
		КонецЕсли;
		
		Элементы.ОтображаемаяТаблица.СписокВыбора.Добавить(ИндексЗапроса, ЭлементСпискаЗначений.Представление);
	КонецЦикла;
	
	Элементы.СтраницаРезультат.Доступность = Истина;
	Элементы.СтраницаФактическиВыполненныйЗапрос.Доступность = Истина;
	Элементы.СтраницаРезультат.Заголовок = "Результат";
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаРезультат;
	
	ОтображаемаяТаблица = ИндексТаблицыОтображаемойПоУмолчанию;
	Элементы.ОтображаемаяТаблица.ТолькоПросмотр = (МетодВыполненияЗапроса = "Выполнить");
	ВывестиРезультатЗапросаНаФорму();
КонецПроцедуры

// Формирует таблицу формы и выводит выбранную в рекизите ОтображаемаяТаблица таблицу результата запроса
//
&НаСервере
Процедура ВывестиРезультатЗапросаНаФорму()
	ТекущийРезультатЗапроса.Очистить();
	
	УдаляемыеРеквизиты = Новый Массив;
	Для Каждого Реквизит Из ПолучитьРеквизиты("ТекущийРезультатЗапроса") Цикл
		УдаляемыеРеквизиты.Добавить("ТекущийРезультатЗапроса." + Реквизит.Имя);
	КонецЦикла;
	ИзменитьРеквизиты(, УдаляемыеРеквизиты);
	
	Пока Элементы.ТекущийРезультатЗапроса.ПодчиненныеЭлементы.Количество() > 0 Цикл
		Элемент = Элементы.ТекущийРезультатЗапроса.ПодчиненныеЭлементы.Получить(0);
		Элементы.Удалить(Элемент);
	КонецЦикла;
	
	Если РезультатыЗапроса.Количество() > 0 Тогда
		ХранилищеЗначенияСТаблицей = РезультатыЗапроса[ОтображаемаяТаблица].Значение;
		Если ХранилищеЗначенияСТаблицей = Неопределено Тогда // Это запрос на уничтожение врем. таблицы
			Возврат;
		КонецЕсли;
		
		Таблица = ХранилищеЗначенияСТаблицей.Получить();
		
		СвойстваТекущейСтрокиРезультатаЗапроса.Очистить();
		
		ДобавляемыеРеквизиты = Новый Массив;
		Для Каждого Колонка Из Таблица.Колонки Цикл
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(Колонка.Имя, Новый ОписаниеТипов, "ТекущийРезультатЗапроса"));
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("_Инструментики_ЕстьNULL_" + Колонка.Имя, Новый ОписаниеТипов("Булево"), "ТекущийРезультатЗапроса"));
			
			СтрСвойства = СвойстваТекущейСтрокиРезультатаЗапроса.Добавить();
			СтрСвойства.Свойство = Колонка.Имя;
		КонецЦикла;
		ИзменитьРеквизиты(ДобавляемыеРеквизиты);
		
		Для Каждого Колонка Из Таблица.Колонки Цикл
			Поле = Элементы.Добавить("ТекущийРезультатЗапроса" + Колонка.Имя, Тип("ПолеФормы"), Элементы.ТекущийРезультатЗапроса);
			Поле.ПутьКДанным = "ТекущийРезультатЗапроса." + Колонка.Имя;
			
			ЭлементУО = УсловноеОформление.Элементы.Добавить();
			ЭлементУО.Использование = Истина;
			
			ЭлементОтбора = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТекущийРезультатЗапроса._Инструментики_ЕстьNULL_" + Колонка.Имя);
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.ПравоеЗначение = Истина;
			ЭлементОтбора.Использование = Истина;
			
			ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Красный);
			ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", "<NULL>");
			
			ПолеОформления = ЭлементУО.Поля.Элементы.Добавить();
			ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ТекущийРезультатЗапроса" + Колонка.Имя);
			ПолеОформления.Использование = Истина;
		КонецЦикла;
		
		Для Каждого СтрИсточник Из Таблица Цикл
			СтрРезультатЗапроса = ТекущийРезультатЗапроса.Добавить();
			Для Каждого Колонка Из Таблица.Колонки Цикл
				Значение = СтрИсточник[Колонка.Имя];
				СтрРезультатЗапроса[Колонка.Имя] = Значение;
				СтрРезультатЗапроса["_Инструментики_ЕстьNULL_" + Колонка.Имя] = (Значение = NULL);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Получает имена всех временных таблиц запроса
//
// Параметры:
//  ТекстЗапроса - Строка -
//
// Возвращаемое значение:
//  Массив из Строка - Массив имён временных таблиц пакета запросов.
//                     Для запросов, не выгружающих данные во временную таблицу, будет пустая строка
&НаСервереБезКонтекста
Функция ИменаВременныхТаблиц(ТекстЗапроса)
	Схема = Новый СхемаЗапроса;
	Схема.УстановитьТекстЗапроса(ТекстЗапроса);
	
	Результат = Новый Массив;
	
	Для Каждого ЗапросПакета Из Схема.ПакетЗапросов Цикл
		Если ТипЗнч(ЗапросПакета) = Тип("ЗапросВыбораСхемыЗапроса") Тогда
			Результат.Добавить(ЗапросПакета.ТаблицаДляПомещения);
		ИначеЕсли ТипЗнч(ЗапросПакета) = Тип("ЗапросУничтоженияТаблицыСхемыЗапроса") Тогда
			Результат.Добавить(ЗапросПакета.ИмяТаблицы);
		Иначе
			ВызватьИсключение "Неожиданный тип: " + Строка(ТипЗнч(ЗапросПакета));
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Получает все параметры запроса (в т.ч. таблицы)
//
// Параметры:
//  ТекстЗапроса - Строка -
//
// Возвращаемое значение:
//  Структура - Параметры запроса. Значением является ОписаниеТипов, либо ХранилищеЗначений с ТаблицаЗначений для таблиц значений
Функция ПараметрыЗапросаПоТексту(ТекстЗапроса)
	Схема = Новый СхемаЗапроса;
	Попытка
		Схема.УстановитьТекстЗапроса(ТекстЗапроса);
	Исключение
		ВызватьИсключение НСтр("ru='Ошибка в запросе: '") + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Результат = Новый Структура;
	
	Для Каждого ОписаниеПараметра Из Схема.НайтиПараметры() Цикл
		Результат.Вставить(ОписаниеПараметра.Имя, ОписаниеПараметра.ТипЗначения);
	КонецЦикла;
	
	Для Каждого ЗапросПакета Из Схема.ПакетЗапросов Цикл
		Если ТипЗнч(ЗапросПакета) <> Тип("ЗапросВыбораСхемыЗапроса") Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗапросПакета.Операторы.Количество() = 1 Тогда
			Оператор = ЗапросПакета.Операторы[0];
			
			Если Оператор.Источники.Количество() = 1 Тогда
				ИсточникСхемыЗапроса = Оператор.Источники[0];
				ОписаниеВременнойТаблицыСхемыЗапроса = ИсточникСхемыЗапроса.Источник;
				Если ТипЗнч(ОписаниеВременнойТаблицыСхемыЗапроса) <> Тип("ОписаниеВременнойТаблицыСхемыЗапроса") Тогда
					Продолжить;
				КонецЕсли;
				
				Если СтрНачинаетсяС(ОписаниеВременнойТаблицыСхемыЗапроса.ИмяТаблицы, "&") Тогда
					ИмяПараметра = Сред(ОписаниеВременнойТаблицыСхемыЗапроса.ИмяТаблицы, 2);
					
					Таблица = Новый ТаблицаЗначений;
					
					Для Каждого ВыражениеСхемыЗапроса Из Оператор.ВыбираемыеПоля Цикл
						Попытка
							ИмяПоля = СтрРазделить(Строка(ВыражениеСхемыЗапроса), ".")[1];
							Таблица.Колонки.Добавить(ИмяПоля, ВыражениеСхемыЗапроса.ТипЗначения());
						Исключение
							ТекстСообщения = СтрШаблон("Выражение ""%1"" не распознано как имя поля таблицы &%2. Вероятно, часть полей потребуется создать в таблице вручную", ВыражениеСхемыЗапроса, ИмяПараметра);
							Сообщить(ТекстСообщения);
						КонецПопытки;
					КонецЦикла;
					
					Результат.Вставить(ИмяПараметра, Новый ХранилищеЗначения(Таблица));
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Обработка выбора в таблице ПараметрыЗапроса по колонке ВидПараметра - выбор вида параметра запроса
//
// Параметры:
//  СтрПараметрыЗапроса - ДанныеФормыЭлементКоллекции - Строка таблицы ПараметрыЗапроса
&НаКлиенте
Асинх Процедура ВыбратьВидПараметраАсинх(СтрПараметрыЗапроса)
	Список = Новый СписокЗначений;
	Список.Добавить("Простой", "Простой параметр");
	Список.Добавить("Список", "Список значений");
	Список.Добавить("Таблица", "Таблица значений");
	
	Ответ = Ждать Список.ВыбратьЭлементАсинх(, СтрПараметрыЗапроса.ВидПараметра);
	Если Ответ = Неопределено Или Ответ.Значение = СтрПараметрыЗапроса.ВидПараметра Тогда
		Возврат;
	КонецЕсли;
	ВидПараметра = Ответ.Значение;
	
	Если ВидПараметра = "Простой" Тогда
		Если СтрПараметрыЗапроса.ВидПараметра = "Список" И СтрПараметрыЗапроса.Значение.Количество() > 0 Тогда
			СтрПараметрыЗапроса.Значение = СтрПараметрыЗапроса.Значение[0].Значение;
		Иначе
			СтрПараметрыЗапроса.Значение = Неопределено;
		КонецЕсли;
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(ТипЗнч(СтрПараметрыЗапроса.Значение));
		СтрПараметрыЗапроса.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
	ИначеЕсли ВидПараметра = "Список" Тогда
		Если СтрПараметрыЗапроса.ВидПараметра = "Простой" Тогда
			ЗначениеСписка = СтрПараметрыЗапроса.Значение;
		КонецЕсли;
		
		СтрПараметрыЗапроса.ОграничениеТипа = Новый ОписаниеТипов("СписокЗначений");
		СтрПараметрыЗапроса.Значение = Новый СписокЗначений;
		Если ЗначениеСписка <> Неопределено Тогда
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(ТипЗнч(ЗначениеСписка));
			СтрПараметрыЗапроса.Значение.ТипЗначения = Новый ОписаниеТипов(МассивТипов);
			СтрПараметрыЗапроса.Значение.Добавить(ЗначениеСписка);
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура("Список", СтрПараметрыЗапроса.Значение);
		ОписаниеЗакрытия = Новый ОписаниеОповещения("ОкончаниеРедактированияСпискаЗначенийВПараметрахЗапроса", ЭтотОбъект, СтрПараметрыЗапроса);
		ОткрытьФорму(Объект.ИмяМетаданныхОбработки + ".Форма.Общая_СписокЗначений", ПараметрыФормы,,,,, ОписаниеЗакрытия);
		
	ИначеЕсли ВидПараметра = "Таблица" Тогда
		СтрПараметрыЗапроса.ОграничениеТипа = Новый ОписаниеТипов("ХранилищеЗначения");
		СтрПараметрыЗапроса.Значение = СтрПараметрыЗапроса.ОграничениеТипа.ПривестиЗначение(Неопределено);
		
		ПараметрыФормы = Новый Структура("Таблица", СтрПараметрыЗапроса.Значение);
		ОписаниеЗакрытия = Новый ОписаниеОповещения("ОкончаниеРедактированияТаблицыЗначенийВПараметрахЗапроса", ЭтотОбъект, СтрПараметрыЗапроса);
		ОткрытьФорму(Объект.ИмяМетаданныхОбработки + ".Форма.КонсольЗапросов_ТаблицаЗначений", ПараметрыФормы,,,,, ОписаниеЗакрытия);
	Иначе
		ВызватьИсключение "Неизвестный вид параметра: " + ВидПараметра;
	КонецЕсли;
	
	СтрПараметрыЗапроса.ВидПараметра = ВидПараметра;
	Модифицированность = Истина;
КонецПроцедуры

// Обработчик закрытия формы редактирования списка значений, вызванной из значения параметра запроса
//
// Параметры:
//  НовыйСписок - СписокЗначений, Неопределено - Изменённый список значений. Неопределено, если пользователь отказался от изменения
//  ТекДанные - ДанныеФормыЭлементКоллекции - Строка таблицы ПараметрыЗапроса
&НаКлиенте
Процедура ОкончаниеРедактированияСпискаЗначенийВПараметрахЗапроса(НовыйСписок, ТекДанные) Экспорт
	Если НовыйСписок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекДанные.Значение = НовыйСписок;
	Модифицированность = Истина;
КонецПроцедуры

// Обработчик закрытия формы редактирования таблицы значений, вызванной из значения параметра запроса
//
// Параметры:
//  НоваяТаблица - ХранилищеЗначения, Неопределено - Содержит новую таблицу. Неопределено, если пользователь отказался от изменения
//  ТекДанные - ДанныеФормыЭлементКоллекции - Строка таблицы ПараметрыЗапроса
&НаКлиенте
Процедура ОкончаниеРедактированияТаблицыЗначенийВПараметрахЗапроса(НоваяТаблица, ТекДанные) Экспорт
	Если НоваяТаблица = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекДанные.Значение = НоваяТаблица;
	Модифицированность = Истина;
КонецПроцедуры

// Выполняет обработчик "Перед выполнением" без контекста формы
//
// Параметры:
//  ТекстОбработчика - Строка - Выполняемый код
//  ОбменМеждуОбработчиками - Произвольный - Параметр для передачи данных между обработчиками
//  Запрос - Запрос - Объект запроса с подставленными параметрами
&НаСервереБезКонтекста
Процедура ВыполнитьОбработчикПередВыполнением(Знач ТекстОбработчика, ОбменМеждуОбработчиками, Запрос)
	Выполнить(ТекстОбработчика);
КонецПроцедуры

// Выполняет обработчик "При выборке" без контекста формы
//
// Параметры:
//  ТекстОбработчика - Строка - Выполняемый код
//  ОбменМеждуОбработчиками - Произвольный - Параметр для передачи данных между обработчиками
//  ИндексЗапроса - Число - Порядковый (с нуля) номер текущего запроса в пакете
//  ТекущаяСтрока - Структура - Содержимое текущей выборки из результата запроса
&НаСервереБезКонтекста
Процедура ВыполнитьОбработчикПриВыборке(Знач ТекстОбработчика, ОбменМеждуОбработчиками, Знач ИндексЗапроса, ТекущаяСтрока)
	Выполнить(ТекстОбработчика);
КонецПроцедуры

// Выполняет обработчик "После выполнения" без контекста формы
//
// Параметры:
//  ТекстОбработчика - Строка - Выполняемый код
//  ОбменМеждуОбработчиками - Произвольный - Параметр для передачи данных между обработчиками
//  ИндексЗапроса - Число - Порядковый (с нуля) номер текущего запроса в пакете
//  Таблица - ТаблицаЗначений - Сформированная таблица результата запроса
&НаСервереБезКонтекста
Процедура ВыполнитьОбработчикПослеВыполнения(Знач ТекстОбработчика, ОбменМеждуОбработчиками, Знач ИндексЗапроса, Знач Таблица)
	Выполнить(ТекстОбработчика);
КонецПроцедуры

// Универсальная процедура сортировки таблицы значений
//
// Параметры:
//  ИмяТаблицыФормы - Строка - Имя элемента формы, ссылающегося на таблицу
//  Направление - Строка - "Возр" или "Убыв"
&НаСервере
Процедура СортироватьТаблицуЗначений(ИмяТаблицыФормы, Направление)
	ТаблицаФормы = Элементы[ИмяТаблицыФормы];
	ПрефиксПутиКДанным = ТаблицаФормы.ПутьКДанным + ".";
	
	ТекущаяКолонка = ТаблицаФормы.ТекущийЭлемент;
	ИмяКолонки = СтрЗаменить(ТекущаяКолонка.ПутьКДанным, ПрефиксПутиКДанным, "");
	
	ЭтотОбъект[ТаблицаФормы.ПутьКДанным].Сортировать(ИмяКолонки + " " + Направление);
КонецПроцедуры

// См. https://github.com/salexdv/bsl_console/blob/develop/docs/update_metadata.md
//
// Возвращаемое значение:
//  Структура -
&НаСервереБезКонтекста
Функция СтруктураМетаданныхДляКрасивогоРедактора()
	Результат = Новый Структура;
	
	Результат.Вставить("catalogs", ИменаОбъектовМетаданныхИзКоллекции(Метаданные.Справочники));
	Результат.Вставить("documents", ИменаОбъектовМетаданныхИзКоллекции(Метаданные.Документы));
	//Результат.Вставить("informationregisters", ИменаОбъектовМетаданныхИзКоллекции(Метаданные.РегистрыСведений));
	//Результат.Вставить("accumulationregisters", ИменаОбъектовМетаданныхИзКоллекции(Метаданные.РегистрыНакопления));
	//Результат.Вставить("accountingregisters", ИменаОбъектовМетаданныхИзКоллекции(Метаданные.РегистрыБухгалтерии));
	//Результат.Вставить("calculationregisters", ИменаОбъектовМетаданныхИзКоллекции(Метаданные.РегистрыРасчета));
	//Результат.Вставить("dataprocessors", ИменаОбъектовМетаданныхИзКоллекции(Метаданные.Обработки));
	//Результат.Вставить("reports", ИменаОбъектовМетаданныхИзКоллекции(Метаданные.Отчеты));
	//Результат.Вставить("enums", ИменаОбъектовМетаданныхИзКоллекции(Метаданные.Перечисления));
	//Результат.Вставить("chartsofaccounts", ИменаОбъектовМетаданныхИзКоллекции(Метаданные.ПланыСчетов));
	//Результат.Вставить("businessprocesses", ИменаОбъектовМетаданныхИзКоллекции(Метаданные.БизнесПроцессы));
	//Результат.Вставить("tasks", ИменаОбъектовМетаданныхИзКоллекции(Метаданные.Задачи));
	//Результат.Вставить("exchangeplans", ИменаОбъектовМетаданныхИзКоллекции(Метаданные.ПланыОбмена));
	//Результат.Вставить("chartsofcharacteristictypes", ИменаОбъектовМетаданныхИзКоллекции(Метаданные.ПланыВидовХарактеристик));
	//Результат.Вставить("chartsofcalculationtypes", ИменаОбъектовМетаданныхИзКоллекции(Метаданные.ПланыВидовРасчета));
	//Результат.Вставить("constants", ИменаОбъектовМетаданныхИзКоллекции(Метаданные.Константы));
	
	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, Результат);
	
	Возврат Запись.Закрыть();
КонецФункции

// Формирует структуру с именами метаданных для красивого редактора кода
// См. https://github.com/salexdv/bsl_console/blob/develop/docs/update_metadata.md
//
// Параметры:
//  КоллекцияОбъектовМетаданных - КоллекцияОбъектовМетаданных - Коллекция объектов метаданных
//
// Возвращаемое значение:
//  Структура -
&НаСервереБезКонтекста
Функция ИменаОбъектовМетаданныхИзКоллекции(КоллекцияОбъектовМетаданных)
	Результат = Новый Структура;
	
	Для Каждого Мета Из КоллекцияОбъектовМетаданных Цикл
		Результат.Вставить(Мета.Имя, Новый Структура);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Асинх Процедура ПослеВыбораСКДДляЗаполнения(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекстыЗапросов = ТекстыЗапросовИзСКД(Результат.ХранилищеСКД);
	Если ТекстыЗапросов.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru='В выбранной СКД нет наборов данных с типом ""Запрос""'"));
		Возврат;
	КонецЕсли;
	
	ВыбранныйЭлемент = Ждать ТекстыЗапросов.ВыбратьЭлементАсинх();
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = ВыбранныйЭлемент.Значение;
	УМ_КрасивыйРедактор_ОбновитьТекст();
	Модифицированность = Истина;
КонецПроцедуры

// Получает тексты всех наборов данных Запрос переданной СКД
//
// Параметры:
//  ХранилищеСКД - ХранилищеЗначения - Должно содержать значение типа СхемаКомпоновкиДанных
//
// Возвращаемое значение:
//  СписокЗначений - Значением является текст запроса, представлением - имя набора данных
&НаСервереБезКонтекста
Функция ТекстыЗапросовИзСКД(ХранилищеСКД)
	Список = Новый СписокЗначений;
	
	СКД = ХранилищеСКД.Получить();
	ДополнитьТекстыЗапросовСКДВложеннымиНаборамиДанных(Список, СКД.НаборыДанных);
	
	Возврат Список;
КонецФункции

&НаСервереБезКонтекста
Процедура ДополнитьТекстыЗапросовСКДВложеннымиНаборамиДанных(Список, НаборыДанных)
	Для Каждого НаборДанных Из НаборыДанных Цикл
		Если ТипЗнч(НаборДанных) = Тип("НаборДанныхЗапросСхемыКомпоновкиДанных") Тогда
			Список.Добавить(НаборДанных.Запрос, НаборДанных.Имя);
		ИначеЕсли ТипЗнч(НаборДанных) = Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных") Тогда
			ДополнитьТекстыЗапросовСКДВложеннымиНаборамиДанных(Список, НаборДанных.Элементы);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Рассчитывает итоги по выделенной колонке текущего результата запроса
//
// Параметры:
//  ИдентификаторыСтрок - Массив, Неопределено - Массив идентификаторов строк, по значениям которых необходимо рассчитать итоги
//                                               Если Неопределено, итоги будут рассчитаны по всей таблице
//
// Возвращаемое значение:
//  Структура:
//  * Сумма - Число -
//  * Среднее - Число -
//  * Минимум - Число, Неопределено - Неопределено, если не было ни одного числового значения
//  * Максимум - Число, Неопределено - Неопределено, если не было ни одного числового значения
&НаСервере
Функция ИтогиПоКолонкеТекущегоРезультатаЗапроса(Знач ИдентификаторыСтрок = Неопределено)
	ИмяКолонки = СтрЗаменить(Элементы.ТекущийРезультатЗапроса.ТекущийЭлемент.ПутьКДанным, "ТекущийРезультатЗапроса.", "");
	
	Результат = Новый Структура("Сумма, Среднее, Минимум, Максимум", 0, 0, Неопределено, Неопределено);
	
	КоличествоДляРасчетаСреднего = 0;
	Для Каждого СтрРезультатаЗапроса Из ТекущийРезультатЗапроса Цикл
		Если ИдентификаторыСтрок <> Неопределено И ИдентификаторыСтрок.Найти(СтрРезультатаЗапроса.ПолучитьИдентификатор()) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Значение = СтрРезультатаЗапроса[ИмяКолонки];
		Если ТипЗнч(Значение) = Тип("Число") Тогда
			Результат.Сумма = Результат.Сумма + Значение;
			
			Если Результат.Минимум = Неопределено Или Значение < Результат.Минимум Тогда
				Результат.Минимум = Значение;
			КонецЕсли;
			
			Если Результат.Максимум = Неопределено Или Значение > Результат.Максимум Тогда
				Результат.Максимум = Значение;
			КонецЕсли;
			
			КоличествоДляРасчетаСреднего = КоличествоДляРасчетаСреднего + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если КоличествоДляРасчетаСреднего <> 0 Тогда
		Результат.Среднее = Результат.Сумма / КоличествоДляРасчетаСреднего;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Функция ТаблицаЗначенийИзСтрокиВнутр(СтрокаВнутр)
	Попытка
	    ТаблицаЗначений = ЗначениеИзСтрокиВнутр(СтрокаВнутр);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	Если ТипЗнч(ТаблицаЗначений) = Тип("ТаблицаЗначений") Тогда
		Возврат Новый ХранилищеЗначения(ТаблицаЗначений, Новый СжатиеДанных);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

&НаСервере
Функция ТекущийРезультатЗапросаВСтрокуВнутр(ПереноситьСтроки)
	//ТаблицаЗначений = ТекущийРезультатЗапроса.Выгрузить();
	ХранилищеЗначенияСТаблицей = РезультатыЗапроса[ОтображаемаяТаблица].Значение;
	ТаблицаЗначений = ХранилищеЗначенияСТаблицей.Получить();
	
	СтрокаВнутр = ЗначениеВСтрокуВнутр(ТаблицаЗначений);
	Если Не ПереноситьСтроки Тогда
		СтрокаВнутр = СтрЗаменить(СтрокаВнутр, Символы.ПС, "");
	КонецЕсли;
	Возврат СтрокаВнутр;
КонецФункции

&НаСервереБезКонтекста
Функция ИменаСохраненныхВременныхТаблиц(Знач АдресСохраненныхВременныхТаблиц)
	Имена = Новый Массив;
	Таблицы = ПолучитьИзВременногоХранилища(АдресСохраненныхВременныхТаблиц);
	
	Для Каждого СтрТаблицы Из Таблицы Цикл
		Имена.Добавить(СтрТаблицы.Имя);
	КонецЦикла;
	
	Возврат Имена;
КонецФункции

&НаСервереБезКонтекста
Функция ОтформатироватьТекстЗапросаНаСервере(Знач ТекстЗапроса)
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	Возврат СхемаЗапроса.ПолучитьТекстЗапроса();
КонецФункции

&НаСервере
Процедура ЗаполнитьИзВыгрузкиБСПНаСервере(Знач СтрокаXML)
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(СтрокаXML);
	
	ВыгрузкаБСП = Неопределено;
	Попытка
		ВыгрузкаБСП = СериализаторXDTO.ПрочитатьXML(ЧтениеXML, Тип("Структура"));
	Исключение
		КраткоеПредставление = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Шаблон = НСтр("ru='Ошибка разбора XML: %1'");
		ВызватьИсключение(СтрШаблон(Шаблон, КраткоеПредставление),, "ИнструментикиОшибкаВXML",, ИнформацияОбОшибке());
	КонецПопытки;
	
	ТекстЗапросаИзВыгрузки = Неопределено;
	ПараметрыИзВыгрузки = Неопределено;
	ВыгрузкаБСП.Свойство("Текст", ТекстЗапросаИзВыгрузки);
	ВыгрузкаБСП.Свойство("Параметры", ПараметрыИзВыгрузки);
	
	Если ТипЗнч(ТекстЗапросаИзВыгрузки) <> Тип("Строка") Или ТипЗнч(ПараметрыИзВыгрузки) <> Тип("Структура") Тогда
		Текст = НСтр("ru='Структура объекта не соответствует результату функции ЗапросВСтрокуXML'");
		ВызватьИсключение(Текст,, "ИнструментикиОшибкаВXML");
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапросаИзВыгрузки;
	
	ПараметрыЗапроса.Очистить();
	Для Каждого КлючЗначение Из ПараметрыИзВыгрузки Цикл
		ИмяПараметра = КлючЗначение.Ключ;
		ЗначениеПараметра = КлючЗначение.Значение;
		
		СтрПараметры = ПараметрыЗапроса.Добавить();
		СтрПараметры.Имя = ИмяПараметра;
		
		Если ТипЗнч(ЗначениеПараметра) = Тип("Массив") Тогда
			СтрПараметры.ВидПараметра = "Список";
			СтрПараметры.ОграничениеТипа = Тип("СписокЗначений");
			СтрПараметры.Значение = Новый СписокЗначений;
			СтрПараметры.Значение.ЗагрузитьЗначения(ЗначениеПараметра);
		ИначеЕсли ТипЗнч(ЗначениеПараметра) = Тип("ТаблицаЗначений") Тогда
			СтрПараметры.ВидПараметра = "Таблица";
			СтрПараметры.ОграничениеТипа = Тип("ХранилищеЗначения");
			СтрПараметры.Значение = Новый ХранилищеЗначения(ЗначениеПараметра, Новый СжатиеДанных(9));
		Иначе
			СтрПараметры.ВидПараметра = "Простой";
			
			ТипВМассиве = Новый Массив;
			ТипВМассиве.Добавить(ТипЗнч(ЗначениеПараметра));
			СтрПараметры.ОграничениеТипа = Новый ОписаниеТипов(ТипВМассиве);
			СтрПараметры.Значение = ЗначениеПараметра;
		КонецЕсли;
	КонецЦикла;
	
	Элементы.ГруппаРезультатНеактуален.Видимость = Истина;
	Модифицированность = Истина;
КонецПроцедуры

#КонецОбласти
