
// --------------------------------------------------------------------------------
// Copyright (c) 2025 Igor Ryabov (https://github.com/IgorRyaboff/Instrumentiki)
// License: https://github.com/IgorRyaboff/Instrumentiki/blob/main/LICENSE
// --------------------------------------------------------------------------------

#Область ОписаниеПеременных

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Не Параметры.Свойство("Таблица") Тогда
		ВызватьИсключение "Не передана таблица";
	КонецЕсли;
	
	ИсходнаяТаблица = Параметры.Таблица.Получить();
	Если ИсходнаяТаблица = Неопределено Тогда
		ИсходнаяТаблица = Новый ТаблицаЗначений;
	КонецЕсли;
	
	Для Каждого Колонка Из ИсходнаяТаблица.Колонки Цикл
		СтрОписания = Колонки.Добавить();
		СтрОписания.Имя = Колонка.Имя;
		СтрОписания.Тип = Колонка.ТипЗначения;
	КонецЦикла;
	
	УстановитьСтруктуруДанных();
	
	Для Каждого СтрИсточник Из ИсходнаяТаблица Цикл
		ЗаполнитьЗначенияСвойств(Данные.Добавить(), СтрИсточник);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
//
#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	Закрыть(РезультирующаяТаблица());
КонецПроцедуры

&НаКлиенте
Асинх Процедура ПрименитьКолонки(Команда)
	ПроверенныеКолонки = Новый Массив;
	Для Каждого ОписаниеКолонки Из Колонки Цикл
		Попытка
			Структура = Новый Структура;
			Структура.Вставить(ОписаниеКолонки.Имя);
		Исключение
			ПоказатьПредупреждение(, СтрШаблон("Некорректное имя колонки ""%1""", ОписаниеКолонки.Имя));
			Возврат;
		КонецПопытки;
		
		Имя = НРег(ОписаниеКолонки.Имя);
		Если ПроверенныеКолонки.Найти(Имя) <> Неопределено Тогда
			ПоказатьПредупреждение(, СтрШаблон("Дублируется колонка %1", ОписаниеКолонки.Имя));
			Возврат;
		КонецЕсли;
		ПроверенныеКолонки.Добавить(Имя);
	КонецЦикла;
	
	РезультатПроверкиКорректности = СтруктураТаблицыКорректна();
	Если Не РезультатПроверкиКорректности.Корректность Тогда
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(Истина, "Игнорировать");
		Кнопки.Добавить(Ложь, "Вернуться к колонкам");
		
		Игнорировать = Ждать ВопросАсинх("Таблица значений с такой структурой не может использоваться в запросе
		                                 |
				      				     |" + РезультатПроверкиКорректности.ТекстОшибки, Кнопки,, Ложь);
		Если Не Игнорировать Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьСтруктуруДанных();
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаДанные;
КонецПроцедуры

&НаКлиенте
Асинх Процедура ЗаполнитьКолонку(Команда)
	СписокВыбора = Новый СписокЗначений;
	Для Каждого ОписаниеКолонки Из Колонки Цикл
		СписокВыбора.Добавить(ОписаниеКолонки.Имя);
	КонецЦикла;
	
	ВыбранныйЭлемент = Ждать СписокВыбора.ВыбратьЭлементАсинх();
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ИмяКолонки = ВыбранныйЭлемент.Значение;
	
	РезультатВвода = Ждать ВвестиСтрокуАсинх("",,, Истина);
	Если РезультатВвода = Неопределено Или ПустаяСтрока(РезультатВвода) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавлятьНовыеСтроки = Истина;
	
	Если Данные.Количество() > 0 Тогда
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(Истина, "Новые строки");
		Кнопки.Добавить(Ложь, "Замещать в существующих, затем добавлять новые");
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		
		Ответ = Ждать ВопросАсинх("Таблица уже содержит строки. Как заполнять колонку?", Кнопки);
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			Возврат;
		КонецЕсли;
		
		ДобавлятьНовыеСтроки = Ответ;
	КонецЕсли;
	
	НовыеЗначения = СтрРазделить(РезультатВвода, Символы.ПС);
	Для Сч = 0 По НовыеЗначения.ВГраница() Цикл
		НовоеЗначение = НовыеЗначения[Сч];
		
		Если Не ДобавлятьНовыеСтроки И Сч < Данные.Количество() Тогда
			СтрДанные = Данные[Сч];
		Иначе
			СтрДанные = Данные.Добавить();
		КонецЕсли;
		
		СтрДанные[ИмяКолонки] = НовоеЗначение;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Создаёт и настраивает реквизиты формы, а также связанные с ними поля формы по структуре таблицы значений
//
&НаСервере
Процедура УстановитьСтруктуруДанных()
	ПредыдущиеДанные = Данные.Выгрузить();
	
	Пока Элементы.Данные.ПодчиненныеЭлементы.Количество() > 0 Цикл
		Элементы.Удалить(Элементы.Данные.ПодчиненныеЭлементы[0]);
	КонецЦикла;
	
	УдаляемыеРеквизиты = Новый Массив;
	Для Каждого Реквизит Из ПолучитьРеквизиты("Данные") Цикл
		УдаляемыеРеквизиты.Добавить("Данные." + Реквизит.Имя);
	КонецЦикла;
	ИзменитьРеквизиты(, УдаляемыеРеквизиты);
	
	ДобавляемыеРеквизиты = Новый Массив;
	Для Каждого ОписаниеКолонки Из Колонки Цикл
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ОписаниеКолонки.Имя, ОписаниеКолонки.Тип, "Данные"));
	КонецЦикла;
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	Для Каждого ОписаниеКолонки Из Колонки Цикл
		ПолеФормы = Элементы.Добавить("Данные" + ОписаниеКолонки.Имя, Тип("ПолеФормы"), Элементы.Данные);
		ПолеФормы.Вид = ?(ОписаниеКолонки.Тип = Новый ОписаниеТипов("Булево"), ВидПоляФормы.ПолеФлажка, ВидПоляФормы.ПолеВвода);
		ПолеФормы.ПутьКДанным = "Данные." + ОписаниеКолонки.Имя;
	КонецЦикла;
	
	Данные.Очистить();
	Для Каждого СтрИсточник Из ПредыдущиеДанные Цикл
		ЗаполнитьЗначенияСвойств(Данные.Добавить(), СтрИсточник);
	КонецЦикла;
КонецПроцедуры

// Создаёт и возвращает конечную таблицу значений по данным формы
//
&НаСервере
Функция РезультирующаяТаблица()
	Возврат Новый ХранилищеЗначения(Данные.Выгрузить());
КонецФункции

// Определяет корректность структуры таблицы в контексте передачи в запрос
//
// Возвращаемое значение:
//  Структура:
//  * Корректность - Булево -
//  * ТекстОшибки - Строка - Если Корректность = Ложь, будет заполнено описание ошибки подстановки таблицы в запрос
&НаСервере
Функция СтруктураТаблицыКорректна()
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	*
		|ПОМЕСТИТЬ ВременнаяТаблица
		|ИЗ
		|	&Таблица КАК Таблица");
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Таблица = Новый ТаблицаЗначений;
	Для Каждого ОписаниеКолонки Из Колонки Цикл
		Таблица.Колонки.Добавить(ОписаниеКолонки.Имя, ОписаниеКолонки.Тип);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("Таблица", Таблица);
	
	Попытка
		Запрос.Выполнить();
		Возврат Новый Структура("Корректность, ТекстОшибки", Истина, "");
	Исключение
		Возврат Новый Структура("Корректность, ТекстОшибки", Ложь, ОписаниеОшибки());
	КонецПопытки;
КонецФункции

#КонецОбласти
