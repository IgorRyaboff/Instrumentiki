
// --------------------------------------------------------------------------------
// Copyright (c) 2024-2025 Igor Ryabov (https://github.com/IgorRyaboff/Instrumentiki)
// License: https://github.com/IgorRyaboff/Instrumentiki/blob/main/LICENSE
// --------------------------------------------------------------------------------

#Область ОписаниеПеременных

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ПоказатьСостояниеОтчета("Загрузите схему компоновки данных");
	
	СохраненныеДанные = РеквизитФормыВЗначение("Объект").СохраненнаяНастройка("КонсольСКД", "ДанныеАвтосохранения");
	Если СохраненныеДанные <> Неопределено Тогда
		АдресДанныхАвтосохранения = ПоместитьВоВременноеХранилище(СохраненныеДанные, УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	#Если Не ТолстыйКлиентУправляемоеПриложение Тогда
		Элементы.ФормаОткрытьКонструкторСхемы.Шрифт = Новый Шрифт(Элементы.ФормаОткрытьКонструкторСхемы.Шрифт,,,,,, Истина);
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	#Если ТолстыйКлиентУправляемоеПриложение Тогда
		Если ТипЗнч(ВыбранноеЗначение) = Тип("СхемаКомпоновкиДанных") Тогда
			ПослеЗакрытияКонструктораСКДАсинх(ВыбранноеЗначение);
		КонецЕсли;
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если Модифицированность Тогда
		Отказ = Истина;
		Если Не ЗавершениеРаботы Тогда
			ЗапроситьСохранениеАсинх(Истина);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
// Код процедур и функций
#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Асинх Процедура ЗагрузитьСхему(Команда)
	Если Не Ждать ЗапроситьСохранениеАсинх() Тогда
		Возврат;
	КонецЕсли;
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПослеЗагрузкиСхемы", ЭтотОбъект);
	ПараметрыФормы = Новый Структура("АдресДанныхАвтосохранения", АдресДанныхАвтосохранения);
	ОткрытьФорму(Объект.ИмяМетаданныхОбработки + ".Форма.Общее_ОткрытиеСКД", ПараметрыФормы,,,,, ОповещениеОЗакрытии);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройки(Команда)
	ПараметрыФормы = ПараметрыФормыПользовательскихНастроек();
	Форма = ПолучитьФорму(Объект.ИмяМетаданныхОбработки + ".Форма.КонсольСКД_Настройки", ПараметрыФормы);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПослеРедактированияПользовательскихНастроек", ЭтотОбъект, Форма);
	Форма.ОписаниеОповещенияОЗакрытии = ОповещениеОЗакрытии;
	Форма.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура Сформировать(Команда)
	ВызватьФормирование("Полностью", Элементы.СтраницаОтчет);
КонецПроцедуры

&НаКлиенте
Процедура СформироватьТолькоМакет(Команда)
	ВызватьФормирование("ТолькоМакет", Элементы.СтраницаНаборыДанных);
КонецПроцедуры

&НаКлиенте
Асинх Процедура ОткрытьКонструкторСхемы(Команда)
	#Если ТолстыйКлиентУправляемоеПриложение Тогда
		Если ЗначениеЗаполнено(АдресСКД) Тогда
			СКД = ПолучитьИзВременногоХранилища(АдресСКД);
		Иначе
			СКД = Новый СхемаКомпоновкиДанных;
		КонецЕсли;
		КонструкторСхемы = Новый КонструкторСхемыКомпоновкиДанных(СКД);
		КонструкторСхемы.Редактировать(ЭтотОбъект);
	#Иначе
		Если Объект.ИмяПриложенияСеанса = "WebClient" Тогда
			ПоказатьПредупреждение(, "Конструктор схемы компоновки данных доступен только в режиме ""Толстый клиент""",, "Требуется толстый клиент");
		Иначе
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить(КодВозвратаДиалога.Да, "Перейти в ""Запуск сеанса""");
			Кнопки.Добавить(КодВозвратаДиалога.Нет, "ОК");
			
			Ответ = Ждать ВопросАсинх("Конструктор схемы компоновки данных доступен только в режиме ""Толстый клиент""", Кнопки,, КодВозвратаДиалога.Нет, "Требуется толстый клиент");
			Если Ответ = КодВозвратаДиалога.Да Тогда
				ОткрытьФорму(Объект.ИмяМетаданныхОбработки + ".Форма.ЗапускСеанса");
			КонецЕсли;
		КонецЕсли;
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКонсольЗапросов(Команда)
	ТекДанные = Элементы.НаборыДанныхМакета.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		ПоказатьПредупреждение(, "Не выбран набор данных");
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекДанные.ТекстЗапроса) Тогда
		ПоказатьПредупреждение(, "У выбранного набора данных нет текста запроса");
		Возврат;
	КонецЕсли;
	
	ПараметрыЗапроса = Новый Массив;
	Для Каждого СтрИсточник Из ЗначенияПараметровМакета Цикл
		СтрПриемник = Новый Структура("Имя, Значение");
		ЗаполнитьЗначенияСвойств(СтрПриемник, СтрИсточник);
		ПараметрыЗапроса.Добавить(СтрПриемник);
	КонецЦикла;
	Для Каждого СтрИсточник Из ТекДанные.СобственныеЗначенияПараметров Цикл
		СтрПриемник = Новый Структура("Имя, Значение");
		ЗаполнитьЗначенияСвойств(СтрПриемник, СтрИсточник);
		ПараметрыЗапроса.Добавить(СтрПриемник);
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура("ТекстЗапроса, ПараметрыЗапроса", ТекДанные.ТекстЗапроса, ПараметрыЗапроса);
	ОткрытьФорму(Объект.ИмяМетаданныхОбработки + ".Форма.КонсольЗапросов", ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура СохранитьФайл(Команда)
	СохранитьАсинх();
КонецПроцедуры

// Обработчик программно создаваемых команд "ВыбратьВариантОтчета_<ИмяВариантаОтчета>"
//
&НаКлиенте
Асинх Процедура ВыбратьВариантОтчета(Команда)
	ИмяВарианта = СтрЗаменить(Команда.Имя, "ВыбратьВариантОтчета_", "");
	
	Если ИмяВарианта = ТекущийВариант Тогда
		ПоказатьПредупреждение(, НСтр("ru='Этот вариант уже выбран'"));
		Возврат;
	КонецЕсли;
	
	Ответ = Ждать ВопросАсинх(НСтр("ru = 'Настройки отчета будут сброшены до стандартных для выбранного варианта.
                                    |Продолжить?'"), РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийВариант = ИмяВарианта;
	
	Для Каждого Элемент Из Элементы.ФормаГруппаВыборВарианта.ПодчиненныеЭлементы Цикл
		ИмяВариантаЭлемента = СтрЗаменить(Элемент.ИмяКоманды, "ВыбратьВариантОтчета_", "");
		Элемент.Пометка = (ТекущийВариант = ИмяВариантаЭлемента);
	КонецЦикла;
	
	ИнициализироватьСхемуНаСервере(Неопределено, Истина);
КонецПроцедуры

&НаКлиенте
Асинх Процедура УстановитьСтандартныеНастройки(Команда)
	Ответ = Ждать ВопросАсинх(НСтр("ru = 'Настройки отчета будут сброшены до стандартных для выбранного варианта.
                                    |Продолжить?'"), РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ИнициализироватьСхемуНаСервере(Неопределено, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКЗначениямПараметровМакета(Команда)
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаЗначенияПараметровМакета;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Вызывает формирование СКД
//
// Параметры:
//  Вариант - Строка - См. параметр Вариант процедуры СформироватьНаСервере()
//  СтраницаФормы - ГруппаФормы - Страница группы Страницы, на которую произойдет переход
//                  после успешного формирования отчета
&НаКлиенте
Процедура ВызватьФормирование(Вариант, СтраницаФормы)
	Состояние("Формирование отчета...");
	Попытка
		СформироватьНаСервере(Вариант);
	Исключение
		Состояние();
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ПоказатьПредупреждение(, ПодробноеПредставлениеОшибки,, НСтр("ru='Ошибка формирования отчета'"));
		ПоказатьСостояниеОтчета(КраткоеПредставлениеОшибки, БиблиотекаКартинок.ОформлениеЗнакКрест);
		Возврат;
	КонецПопытки;
	Состояние("Отчет сформирован");
	
	Для Каждого ЭлементДерева Из НаборыДанныхМакета.ПолучитьЭлементы() Цикл
		Элементы.НаборыДанныхМакета.Развернуть(ЭлементДерева.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
	Элементы.Страницы.ТекущаяСтраница = СтраницаФормы;
КонецПроцедуры

// Следует вызывать после изменения загруженной схемы компоновки данных во временное хранилище
//
// Параметры:
//  СКДИлиХранилищеСКД - СхемаКомпоновкиДанных, ХранилищеЗначения, Неопределено - СКД или хранилище, содержащее СКД
//                                                                                Если не заполнено, то предполагается, что СКД уже помещена во временное хранилище
//                                                                                Адрес временного хранилища - реквизит формы АдресСКД
//  ЗагрузитьСтандартныеНастройки - Булево - Требуется ли заменить текущие настройки стандартными из схемы компоновки данных
&НаСервере
Процедура ИнициализироватьСхемуНаСервере(СКДИлиХранилищеСКД, ЗагрузитьСтандартныеНастройки)
	ЭтоПерваяЗагрузкаСхемы = Не ЗначениеЗаполнено(АдресСКД);
	
	Если ТипЗнч(СКДИлиХранилищеСКД) = Тип("ХранилищеЗначения") Тогда
		СКД = СКДИлиХранилищеСКД.Получить();
		АдресСКД = ПоместитьВоВременноеХранилище(СКД, УникальныйИдентификатор);
	ИначеЕсли ТипЗнч(СКДИлиХранилищеСКД) = Тип("СхемаКомпоновкиДанных") Тогда
		СКД = СКДИлиХранилищеСКД;
		АдресСКД = ПоместитьВоВременноеХранилище(СКД, ?(ЗначениеЗаполнено(АдресСКД), АдресСКД, УникальныйИдентификатор));
	Иначе
		СКД = ПолучитьИзВременногоХранилища(АдресСКД);
	КонецЕсли;
	
	Если ЗагрузитьСтандартныеНастройки Тогда
		Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	КонецЕсли;
	Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСКД));
	
	ВариантНастроекКомпоновкиДанных = СКД.ВариантыНастроек.Найти(ТекущийВариант);
	Если ВариантНастроекКомпоновкиДанных = Неопределено Тогда
		Если СКД.ВариантыНастроек.Количество() = 0 Тогда
			ТекущийВариант = Неопределено;
			НастройкиТекущегоВарианта = СКД.НастройкиПоУмолчанию;
		Иначе
			ТекущийВариант = СКД.ВариантыНастроек.Получить(0).Имя;
			НастройкиТекущегоВарианта = СКД.ВариантыНастроек.Получить(0).Настройки;
		КонецЕсли;
	Иначе
		НастройкиТекущегоВарианта = ВариантНастроекКомпоновкиДанных.Настройки;
	КонецЕсли;
	
	ПерезаполнитьСписокВариантовОтчета(СКД);
	
	Если ЗагрузитьСтандартныеНастройки Тогда
		Компоновщик.ЗагрузитьНастройки(НастройкиТекущегоВарианта);
	КонецЕсли;
	
	Элементы.ФормаГруппаСформировать.Доступность = Истина;
	Элементы.ФормаОткрытьНастройки.Доступность = Истина;
	Элементы.ФормаСохранитьФайл.Доступность = Истина;
	
	Если ЭтоПерваяЗагрузкаСхемы Тогда
		ПоказатьСостояниеОтчета("Нажмите ""Сформировать""");
	ИначеЕсли СКДИлиХранилищеСКД <> Неопределено Тогда
		ПоказатьСостояниеОтчета("Схема компоновки данных изменилась. Нажмите ""Сформировать""");
	Иначе
		ПоказатьСостояниеОтчета(НСтр("ru = 'Были изменены настройки. Нажмите ""Сформировать""'"));
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьСписокВариантовОтчета(СхемаКомпоновкиДанных)
	УдаляемыеКоманды = Новый Массив;
	Для Каждого Команда Из Команды Цикл
		Если СтрНачинаетсяС(Команда.Имя, "ВыбратьВариантОтчета_") Тогда
			УдаляемыеКоманды.Добавить(Команда);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Команда Из УдаляемыеКоманды Цикл
		Команды.Удалить(Команда);
	КонецЦикла;
	
	Пока Элементы.ФормаГруппаВыборВарианта.ПодчиненныеЭлементы.Количество() > 0 Цикл
		Элементы.Удалить(Элементы.ФормаГруппаВыборВарианта.ПодчиненныеЭлементы[0]);
	КонецЦикла;
	
	СписокВариантов = Новый СписокЗначений;
	
	Если СхемаКомпоновкиДанных.ВариантыНастроек.Количество() = 0 Тогда
		СписокВариантов.Добавить(Неопределено, НСтр("ru='<отсутствуют>'"));
	Иначе
		Для Каждого Вариант Из СхемаКомпоновкиДанных.ВариантыНастроек Цикл
			СписокВариантов.Добавить(Вариант.Имя, Вариант.Представление);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого ОписаниеВарианта Из СписокВариантов Цикл
		Если ЗначениеЗаполнено(ОписаниеВарианта.Значение) Тогда
			ИмяКомандыИЭлемента = "ВыбратьВариантОтчета_" + ОписаниеВарианта.Значение;
			
			Команда = Команды.Добавить(ИмяКомандыИЭлемента);
			Команда.Действие = "ВыбратьВариантОтчета";
		Иначе
			ИмяКомандыИЭлемента = "ВыбратьВариантОтчета";
		КонецЕсли;
		
		Элемент = Элементы.Добавить(ИмяКомандыИЭлемента, Тип("КнопкаФормы"), Элементы.ФормаГруппаВыборВарианта);
		
		Элемент.Заголовок = ОписаниеВарианта.Представление;
		Если ЗначениеЗаполнено(ОписаниеВарианта.Значение) Тогда
			Элемент.Заголовок = СтрШаблон("%1 (%2)", Элемент.Заголовок, ОписаниеВарианта.Значение);
		КонецЕсли;
		
		Элемент.ИмяКоманды = ИмяКомандыИЭлемента;
		Элемент.Доступность = ЗначениеЗаполнено(ОписаниеВарианта.Значение);
		Элемент.Пометка = (ТекущийВариант = ОписаниеВарианта.Значение);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьСтандартныеНастройки(Знач СхемаКомпоновкиДанных = Неопределено)
	Если СхемаКомпоновкиДанных = Неопределено Тогда
		СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСКД);
	КонецЕсли;
	
	Компоновщик.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
КонецПроцедуры

// Формирует структуру параметров для передачи в форму КонсольСКД_Настройки
//
// Возвращаемое значение:
//  Структура:
//  * ХранилищеСКД - ХранилищеЗначения - Содержит значение типа СхемаКомпоновкиДанных
//  * Настройки - НастройкиКомпоновкиДанных - Текущие настройки
&НаСервере
Функция ПараметрыФормыПользовательскихНастроек()
	СКД = ПолучитьИзВременногоХранилища(АдресСКД);
	Настройки = Компоновщик.ПолучитьНастройки();
	
	Возврат Новый Структура("ХранилищеСКД, Настройки", Новый ХранилищеЗначения(СКД), Настройки);
КонецФункции

&НаКлиенте
Процедура ПослеРедактированияПользовательскихНастроек(Результат, ФормаНастроек) Экспорт
	Если Результат = Истина Тогда
		ЗагрузитьИзмененныеНастройки(ФормаНастроек.Компоновщик.Настройки);
		
		ПоказатьСостояниеОтчета("Были изменены настройки. Нажмите ""Сформировать""");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьИзмененныеНастройки(Знач НовыеНастройки)
	Компоновщик.ЗагрузитьНастройки(НовыеНастройки);
КонецПроцедуры

//
// Параметры:
//  Вариант - Строка - Допустимые значения:
//                     "Полностью" - сформировать отчет на основании схемы и настроек
&НаСервере
Процедура СформироватьНаСервере(Вариант)
	ВыполнитьАвтосохранение();
	СКД = ПолучитьИзВременногоХранилища(АдресСКД);
	
	Настройки = Компоновщик.ПолучитьНастройки();
	
	// Отложено
	//ВыполнитьОбработчикПередФормированиемОтчета(ОбработчикПередФормированиемОтчета, СКД, Настройки);
	
	НачалоЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СКД, Настройки);
	
	ЗначенияПараметровМакета.Очистить();
	Для Каждого Параметр Из МакетКомпоновки.ЗначенияПараметров Цикл
		СтрПараметр = ЗначенияПараметровМакета.Добавить();
		ЗаполнитьЗначенияСвойств(СтрПараметр, Параметр, "Имя, Значение");
		СтрПараметр.ТипЗначения = Строка(ТипЗнч(Параметр.Значение));
	КонецЦикла;
	
	НаборыДанныхМакетаДерево = РеквизитФормыВЗначение("НаборыДанныхМакета");
	НаборыДанныхМакетаДерево.Строки.Очистить();
	ДобавитьНаборыДанныхВДеревоФормы(МакетКомпоновки.НаборыДанных, НаборыДанныхМакетаДерево.Строки);
	ЗначениеВРеквизитФормы(НаборыДанныхМакетаДерево, "НаборыДанныхМакета");
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,,, Истина);
	
	Если Вариант = "Полностью" Тогда
		РезультатФормированияОтчета.Очистить();
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		ПроцессорВывода.УстановитьДокумент(РезультатФормированияОтчета);
		ПроцессорВывода.Вывести(ПроцессорКомпоновки);
		ПоказатьСостояниеОтчета(Неопределено);
	Иначе
		ПоказатьСостояниеОтчета("Полное формирование отчета не выполнялось");
	КонецЕсли;
	
	ОкончаниеЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ВремяВыполнения = ОкончаниеЗамера - НачалоЗамера;
	
	Элементы.СтраницаНаборыДанных.Доступность = Истина;
	Элементы.СтраницаЗначенияПараметровМакета.Доступность = Истина;
КонецПроцедуры

&НаКлиенте
Асинх Процедура ПослеЗагрузкиСхемы(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьСтандартныеНастройки = Ждать ВопросОЗагрузкеСтандартныхНастроекАсинх();
	ИнициализироватьСхемуНаСервере(Результат.ХранилищеСКД, ЗагрузитьСтандартныеНастройки);
	
	Если ЗначениеЗаполнено(Результат.Заголовок) Тогда
		Заголовок = СтрШаблон("Консоль СКД (%1)", Результат.Заголовок);
	Иначе
		Заголовок = "Консоль СКД";
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДобавитьНаборыДанныхВДеревоФормы(НаборыДанныхСхемыКомпоновкиДанных, СтрокиДерева)
	Для Каждого НаборДанных Из НаборыДанныхСхемыКомпоновкиДанных Цикл
		СтрДерева = СтрокиДерева.Добавить();
		СтрДерева.ИмяНабораДанных = НаборДанных.Имя;
		
		Если ТипЗнч(НаборДанных) = Тип("НаборДанныхЗапросМакетаКомпоновкиДанных") Тогда
			СтрДерева.ИндексКартинки = 0;
			СтрДерева.ТекстЗапроса = НаборДанных.Запрос;
			
			Для Каждого Параметр Из НаборДанных.ЗначенияПараметров Цикл
				СтрПараметр = СтрДерева.СобственныеЗначенияПараметров.Добавить();
				ЗаполнитьЗначенияСвойств(СтрПараметр, Параметр, "Имя, Значение");
				СтрПараметр.ТипЗначения = Строка(ТипЗнч(Параметр.Значение));
			КонецЦикла;
		ИначеЕсли ТипЗнч(НаборДанных) = Тип("НаборДанныхОбъектМакетаКомпоновкиДанных") Тогда
			СтрДерева.ИндексКартинки = 1;
		ИначеЕсли ТипЗнч(НаборДанных) = Тип("НаборДанныхОбъединениеМакетаКомпоновкиДанных") Тогда
			СтрДерева.ИндексКартинки = 2;
			ДобавитьНаборыДанныхВДеревоФормы(НаборДанных.Элементы, СтрДерева.Строки);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Отключает отображение состояния элемента формы РезультатФормированияОтчета, либо затемняет его содержимое и выводит переданный текст
//
// Параметры:
//  ТекстНеактуальности - Строка, Неопределено - Текст, выводимый над контентом документа РезультатФормированияОтчета
//                                               Если передано Неопределено или пустая строка, отображение состояния будет отключено
//  Картинка - Картинка, Неопределено - Картинка, отображаемая вместе с текстом
//             Значение по умолчанию: Пустая картинка
&НаСервере
Процедура ПоказатьСостояниеОтчета(ТекстНеактуальности = Неопределено, Картинка = Неопределено)
	ПоказатьСостояние = ЗначениеЗаполнено(ТекстНеактуальности);
	
	Элементы.РезультатФормированияОтчета.ОтображениеСостояния.Видимость = ПоказатьСостояние;
	
	Если ПоказатьСостояние Тогда
		Элементы.РезультатФормированияОтчета.ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
		Элементы.РезультатФормированияОтчета.ОтображениеСостояния.Текст = ТекстНеактуальности;
		Если ЗначениеЗаполнено(Картинка) Тогда
			Элементы.РезультатФормированияОтчета.ОтображениеСостояния.Картинка = Картинка;
		Иначе
			Элементы.РезультатФормированияОтчета.ОтображениеСостояния.Картинка = Новый Картинка;
		КонецЕсли;
	Иначе
		Элементы.РезультатФормированияОтчета.ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.НеИспользовать;
	КонецЕсли;
КонецПроцедуры

// Если схема компоновки данных была ранее загружена (т.е. загружается повторно), спрашивает пользователя о необходимости загрузки стандартных настроек
// Если схема загружается впервые, то считается, что нужно безусловно загружать стандартные настройки
//
// Возвращаемое значение:
//  Булево - Требуется ли загрузить стандартные настройки из схемы компоновки данных
&НаКлиенте
Асинх Функция ВопросОЗагрузкеСтандартныхНастроекАсинх()
	Если ЗначениеЗаполнено(АдресСКД) Тогда // СКД уже загружена ранее, это повторная загрузка схемы
		Ответ = Ждать ВопросАсинх("Загрузить стандартные настройки?", РежимДиалогаВопрос.ДаНет);
		ЗагрузитьСтандартныеНастройки = (Ответ = КодВозвратаДиалога.Да);
		Возврат ЗагрузитьСтандартныеНастройки;
	Иначе
		Возврат Истина;
	КонецЕсли;
КонецФункции

&НаКлиенте
Асинх Процедура ПослеЗакрытияКонструктораСКДАсинх(СхемаКомпоновкиДанных)
	#Если ТолстыйКлиентУправляемоеПриложение Тогда
		ЭтотОбъект.Открыть(); // Фокусировка этой формы при закрытии конструктора СКД
		АдресСКД = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, ?(ЗначениеЗаполнено(АдресСКД), АдресСКД, УникальныйИдентификатор));
				
		ЗагрузитьСтандартныеНастройки = Ждать ВопросОЗагрузкеСтандартныхНастроекАсинх();
		ИнициализироватьСхемуНаСервере(СхемаКомпоновкиДанных, ЗагрузитьСтандартныеНастройки);
		Модифицированность = Истина;
	#Иначе
		ВызватьИсключение "Вызов функции, предназначенной для выполнения только на толстом клиенте";
	#КонецЕсли
КонецПроцедуры

#Область ОткрытиеСохранениеФайлов

// Загружает данные, ранее сохранённые в этом инструменте
//
// Параметры:
//  Адрес - Строка - Адрес файла во временном хранилище
&НаСервере
Процедура ПрочитатьПомещеннуюСКД(Адрес, ЗагрузитьСтандартныеНастройки)
	ТекстСКД = ПолучитьСтрокуИзДвоичныхДанных(ПолучитьИзВременногоХранилища(Адрес));
	ЧтениеХМЛ = Новый ЧтениеXML;
	ЧтениеХМЛ.УстановитьСтроку(ТекстСКД);
	СКД = СериализаторXDTO.ПрочитатьXML(ЧтениеХМЛ, Тип("СхемаКомпоновкиДанных"));
	
	ИнициализироватьСхемуНаСервере(СКД, ЗагрузитьСтандартныеНастройки);
	Модифицированность = Ложь;
КонецПроцедуры

&НаСервереБезКонтекста
Функция СериализоватьСКД(АдресСКД, ИдентификаторФормы)
	СКД = ПолучитьИзВременногоХранилища(АдресСКД);
	
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(Запись, СКД);
	
	Текст = Запись.Закрыть();
	Возврат ПоместитьВоВременноеХранилище(Текст, ИдентификаторФормы);
КонецФункции

&НаСервере
Процедура ЗагрузитьДанныеАвтосохранения()
	СохраненныеДанные = РеквизитФормыВЗначение("Объект").СохраненнаяНастройка("КонсольЗапросов", "ДанныеАвтосохранения");
	Если ЗначениеЗаполнено(СохраненныеДанные) Тогда
		АдресВХ = ПоместитьВоВременноеХранилище(СохраненныеДанные, УникальныйИдентификатор);
		
		МодульОбъекта = РеквизитФормыВЗначение("Объект");
		РезультатЧтения = МодульОбъекта.ДанныеИзУниверсальногоПакетаВХ(АдресВХ, "КонсольКода_Данные");
		
		Если Не РезультатЧтения.Свойство("Ошибка") Тогда
			АдресДанныхАвтосохранения = АдресВХ;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ВыполнитьАвтосохранение()
	РеквизитФормыВЗначение("Объект").СохранитьНастройку("КонсольСКД", "ДанныеАвтосохранения", ПолучитьИзВременногоХранилища(АдресСКД));
	АдресДанныхАвтосохранения = Неопределено;
КонецПроцедуры

// Запрашивает сохранение текущих данных
//
// Параметры:
//  ЗакрытьФорму - Булево - Если Истина, форма будет закрыта после сохранения или отказа от сохранения
//
// Возвращаемое значение:
//  Булево - Разрешить выполнение действия
&НаКлиенте
Асинх Функция ЗапроситьСохранениеАсинх(ЗакрытьФорму = Ложь)
	Если Не Модифицированность Тогда
		Возврат Истина;
	КонецЕсли;
	
	Ответ = Ждать ВопросАсинх("Данные были изменены. Сохранить изменения?", РежимДиалогаВопрос.ДаНетОтмена);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Результат = Ждать СохранитьАсинх();
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
		Результат = Истина;
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
	Если Результат И ЗакрытьФорму Тогда
		Модифицированность = Ложь;
		ЭтотОбъект.Закрыть();
	КонецЕсли;
	Возврат Результат;
КонецФункции

// Выполняет сохранение данных
//
// Возвращаемое значение:
//  Булево - Данные сохранены. Может быть Ложь, если пользователь отменил сохранение в соответствующих диалогах
&НаКлиенте
Асинх Функция СохранитьАсинх()
	Если Объект.БезопасныйРежим Тогда
		ПоказатьПредупреждение(, "Загрузка и сохранение данных недоступны в безопасном режиме",, "Безопасный режим");
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		АдресВХ = СериализоватьСКД(АдресСКД, УникальныйИдентификатор);
		#Если ВебКлиент Тогда
			Ждать ПолучитьФайлССервераАсинх(АдресВХ, "СхемаКомпоновкиДанных.xml", Новый ПараметрыДиалогаПолученияФайлов);
		#Иначе
			Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
			Диалог.Фильтр = "Схема компоновки данных (*.xml)|*.xml";
			ВыбранныеФайлы = Ждать Диалог.ВыбратьАсинх();
			Если ВыбранныеФайлы = Неопределено Тогда
				Возврат Ложь;
			КонецЕсли;
			
			Ждать ПолучитьФайлССервераАсинх(АдресВХ, ВыбранныеФайлы[0]);
		#КонецЕсли
	Исключение
		Ждать ПредупреждениеАсинх(ОписаниеОшибки(),, "Ошибка сохранения данных");
	КонецПопытки;
	
	Модифицированность = Ложь;
	Возврат Истина;
КонецФункции

//
// Параметры:
//  ОбработчикПередФормированиемОтчета - Строка - Текст обработчика
//  СКД - СхемаКомпоновкиДанных -
//  Настройки - НастройкиКомпоновкиДанных -
&НаСервереБезКонтекста
Процедура ВыполнитьОбработчикПередФормированиемОтчета(ОбработчикПередФормированиемОтчета, СКД, Настройки)
	// Отложено
	//Выполнить(ОбработчикПередФормированиемОтчета);
КонецПроцедуры

#КонецОбласти

#КонецОбласти
