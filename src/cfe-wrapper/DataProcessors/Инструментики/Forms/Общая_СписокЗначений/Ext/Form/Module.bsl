
// --------------------------------------------------------------------------------
// Copyright (c) 2025 Igor Ryabov (https://github.com/IgorRyaboff/Instrumentiki)
// License: https://github.com/IgorRyaboff/Instrumentiki/blob/main/LICENSE
// --------------------------------------------------------------------------------

// Описание параметров формы:
//  Список - СписокЗначений - Список-источник
//  Режим - Одно из "Просмотр", "Редактирование", "ВыборЭлементов", "ВыборЭлемента"
//  ЗначениеПоУмолчанию (необязательный) - Произвольный - Если значение существует в списке, оно будет в фокусе при открытии формы
//
// При использовании режима "Просмотр" форма ничего не возвращает в качестве параметра закрытия
// При использовании режимов "Редактирование" и "Выбор элементов" в качестве параметра закрытия формы возвращается СписокЗначений
// При использовании режима "ВыборЭлемента" - значение выбранного элемента (не элемент, а именно его значение!)

#Область ОписаниеПеременных

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Параметры.Свойство("Список", Список);
	Параметры.Свойство("ЗначениеПоУмолчанию", ЗначениеПоУмолчанию);
	
	Параметры.Свойство("Режим", Режим);
	Если Не ЗначениеЗаполнено(Режим) Тогда
		Режим = "Редактирование";
	КонецЕсли;
	
	Если Режим = "Просмотр" Тогда
		Элементы.СписокПометка.Видимость = Ложь;
		Элементы.СписокГруппаПометки.Видимость = Ложь;
		Элементы.ФормаЗаписать.Видимость = Ложь;
		Элементы.СписокЗаполнитьИзТекста.Видимость = Ложь;
		Элементы.СписокТипЗначения.ТолькоПросмотр = Истина;
		Элементы.Список.ТолькоПросмотр = Истина;
	ИначеЕсли Режим = "Редактирование" Тогда
		Элементы.СписокПометка.Видимость = Ложь;
		Элементы.СписокГруппаПометки.Видимость = Ложь;
	ИначеЕсли Режим = "ВыборЭлементов" Тогда
		Элементы.СписокТипЗначения.ТолькоПросмотр = Истина;
		Элементы.Список.ИзменятьСоставСтрок = Ложь;
		Элементы.Список.ИзменятьПорядокСтрок = Ложь;
		Элементы.СписокЗаполнитьИзТекста.Видимость = Ложь;
		Элементы.СписокЗначение.ТолькоПросмотр = Истина;
		Элементы.ФормаЗаписать.Заголовок = "Закончить выбор";
		Заголовок = "Выбор элементов";
	ИначеЕсли Режим = "ВыборЭлемента" Тогда
		Элементы.СписокТипЗначения.ТолькоПросмотр = Истина;
		Элементы.Список.ИзменятьСоставСтрок = Ложь;
		Элементы.Список.ИзменятьПорядокСтрок = Ложь;
		Элементы.СписокЗаполнитьИзТекста.Видимость = Ложь;
		Элементы.СписокЗначение.ТолькоПросмотр = Истина;
		Элементы.ФормаЗаписать.Заголовок = "Закончить выбор";
		Элементы.СписокПометка.Видимость = Ложь;
		Элементы.СписокГруппаПометки.Видимость = Ложь;
		Элементы.ФормаЗаписать.Заголовок = "Выбрать";
		Заголовок = "Выбор элемента";
	Иначе
		ВызватьИсключение "Некорректный режим """ + Режим + """";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Для Каждого Элемент Из Список Цикл
		Если Элемент.Значение = ЗначениеПоУмолчанию Тогда
			Элементы.Список.ТекущаяСтрока = Элемент.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СписокТипЗначенияОчистка(Элемент, СтандартнаяОбработка)
	Список.ТипЗначения = Новый ОписаниеТипов;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтрСписок = Элементы.Список.ТекущиеДанные;
	Если СтрСписок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Режим = "ВыборЭлемента" Тогда
		Закрыть(СтрСписок.Значение);
	ИначеЕсли Режим = "Просмотр" Тогда
		ПоказатьЗначение(, СтрСписок.Значение);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Записать(Команда)
	Если Режим = "ВыборЭлемента" Тогда
		ТекДанные = Элементы.Список.ТекущиеДанные;
		Если ТекДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Закрыть(ТекДанные.Значение);
	Иначе
		Закрыть(Список);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Асинх Процедура ЗаполнитьИзТекста(Команда)
	РезультатВвода = Ждать ВвестиСтрокуАсинх("",,, Истина);
	Если РезультатВвода = Неопределено Или ПустаяСтрока(РезультатВвода) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавляемыеЗначения = СтрРазделить(РезультатВвода, Символы.ПС);
	ИсключатьПустые = Неопределено;
	
	Для Каждого Строка Из ДобавляемыеЗначения Цикл
		Если ИсключатьПустые = Неопределено И ПустаяСтрока(Строка) Тогда
			Ответ = Ждать ВопросАсинх(НСтр("ru='В тексте есть пустые строки. Исключить их?'"), РежимДиалогаВопрос.ДаНет);
			ИсключатьПустые = (Ответ = КодВозвратаДиалога.Да);
		КонецЕсли;
		
		Если ИсключатьПустые = Истина И ПустаяСтрока(Строка) Тогда
			Продолжить;
		КонецЕсли;
		
		Список.Добавить(Строка);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьВсе(Команда)
	УстановитьЗначениеПометкиАсинх(Истина, НСтр("ru = 'Выделено несколько элементов в списке.
                                                 |Какие элементы выбирать для установки пометки?'"));
КонецПроцедуры

&НаКлиенте
Процедура СнятьПометкуСоВсех(Команда)
	УстановитьЗначениеПометкиАсинх(Ложь, НСтр("ru = 'Выделено несколько элементов в списке.
                                               |Какие элементы выбирать для снятия пометки?'"));
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Массово устанавливает заданное значение пометки в списке
//
// Параметры:
//  Значение - Булево -
//  ТекстВопросаРежим - Строка - Текст вопроса, который будет задан, если в списке выделено несколько строк
//                      В указанном случае задается вопрос о режиме установки значения:
//                      - Для всех элементов списка
//                      - Для выделенных элементов
//                      Вопрос пользователю будет снабжен кнопками "Все элементы", "Только выделенные (<количество>"
&НаКлиенте
Асинх Процедура УстановитьЗначениеПометкиАсинх(Значение, ТекстВопросаРежим)
	ТолькоВыделенные = Ложь;
	ВыделенныеСтроки = Элементы.Список.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() > 1 Тогда
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(Ложь, НСтр("ru='Все элементы'"));
		Кнопки.Добавить(Истина, НСтр("ru='Только выделенные'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		
		ТолькоВыделенные = Ждать ВопросАсинх(ТекстВопросаРежим, Кнопки);
		Если ТолькоВыделенные = КодВозвратаДиалога.Отмена Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Элемент Из Список Цикл
		Если ТолькоВыделенные И ВыделенныеСтроки.Найти(Элемент.ПолучитьИдентификатор()) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Элемент.Пометка = Значение;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти
