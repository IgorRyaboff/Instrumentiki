
// --------------------------------------------------------------------------------
// Copyright (c) 2024-2025 Igor Ryabov (https://github.com/IgorRyaboff/Instrumentiki)
// License: https://github.com/IgorRyaboff/Instrumentiki/blob/main/LICENSE
// --------------------------------------------------------------------------------

#Область ОписаниеПеременных

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Объект.ИмяПриложенияСеанса = "WebClient" Тогда
		Сообщить(НСтр("ru='Этот инструмент недоступен на веб-клиенте'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Если СистемнаяИнформация.ТипПлатформы <> ТипПлатформы.Windows_x86
		И СистемнаяИнформация.ТипПлатформы <> ТипПлатформы.Windows_x86_64 Тогда
		
		ПоказатьПредупреждение(, НСтр("ru='Этот инструмент доступен только в десктопном Windows-клиенте'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ОбновитьСписокАсинх();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
// Код процедур и функций
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок
// Код процедур и функций
#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновитьСписок(Команда)
	ОбновитьСписокАсинх();
КонецПроцедуры

&НаКлиенте
Асинх Процедура ОчиститьКеш(Команда)
	Для Каждого СтрСписок Из Список Цикл
		Если Не СтрСписок.Очистить Тогда
			Продолжить;
		КонецЕсли;
		
		Путь = Каталог() + "1cv8\" + Строка(СтрСписок.Идентификатор);
		ПапкаОбъект = Новый Файл(Путь);
		
		Если Ждать ПапкаОбъект.СуществуетАсинх() И Ждать ПапкаОбъект.ЭтоКаталогАсинх() Тогда
			ФайлБлокировки = Новый Файл(Путь + "\" + "1Cv8.lck");
			Если Ждать ФайлБлокировки.СуществуетАсинх() Тогда
				Попытка
					Ждать УдалитьФайлыАсинх(ФайлБлокировки.ПолноеИмя);
				Исключение
					Сообщить(СтрШаблон("Информационная база ""%1"" сейчас запущена (найден файл ""1Cv8.lck"")", ?(ЗначениеЗаполнено(СтрСписок.Имя), СтрСписок.Имя, СтрСписок.Идентификатор)));
					Продолжить;
				КонецПопытки;
			КонецЕсли;
			
			Попытка
				Ждать УдалитьФайлыАсинх(Путь);
			Исключение
				Сообщить(СтрШаблон("Не удалось очистить кеш базы ""%1""
				                   |%2", , ОписаниеОшибки()));
				Продолжить;
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьСписокАсинх();
	ПоказатьПредупреждение(, "Кеш выбранных баз очищен");
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьВсе(Команда)
	Для Каждого СтрСписок Из Список Цикл
		СтрСписок.Очистить = СтрСписок.ЕстьКеш;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметкуСоВсех(Команда)
	Для Каждого СтрСписок Из Список Цикл
		СтрСписок.Очистить = Ложь;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СортироватьСписокВозр(Команда)
	СортироватьТаблицуЗначений("Список", "Возр");
КонецПроцедуры

&НаКлиенте
Процедура СортироватьСписокУбыв(Команда)
	СортироватьТаблицуЗначений("Список", "Убыв");
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Получает путь к %appdata%\1C\
//
// Возвращаемое значение:
//  Строка -
&НаКлиенте
Функция Каталог()
	Шелл = Новый COMОбъект("WScript.Shell");
	Возврат Шелл.ExpandEnvironmentStrings("%APPDATA%") + "\1C\";
КонецФункции

// Рекурсивное получение размера каталога
//
// Параметры:
//  Путь - Строка - Полный путь к исходному каталогу
// Возвращаемое значение:
//  Число - Размер в байтах
&НаКлиенте
Асинх Функция РазмерКаталога(Путь)
	Результат = 0;
	
	Для Каждого ФайлПапка Из Ждать НайтиФайлыАсинх(Путь, "*") Цикл
		Если Ждать ФайлПапка.ЭтоФайлАсинх() Тогда
			Результат = Результат + Ждать ФайлПапка.РазмерАсинх();
		Иначе
			Результат = Результат + Ждать РазмерКаталога(ФайлПапка.ПолноеИмя);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Заполнение таблицы формы Список
//
&НаКлиенте
Асинх Процедура ОбновитьСписокАсинх()
	Список.Очистить();
	
	Документ = Новый ТекстовыйДокумент;
	Ждать Документ.ПрочитатьАсинх(Каталог() + "1CEStart\ibases.v8i");
	СтрокиФайлаЗапуска = Документ.ПолучитьТекст();
	
	ТекСтрокаСписок = Неопределено;
	ИдентификаторыДобавленныхИБ = Новый Массив;
	Для Каждого Строка Из СтрРазделить(СтрокиФайлаЗапуска, Символы.ПС, Ложь) Цикл
		Строка = СокрЛП(Строка);
		
		Если СтрНачинаетсяС(Строка, "[") И СтрЗаканчиваетсяНа(Строка, "]") Тогда
			ТекСтрокаСписок = Список.Добавить();
			ТекСтрокаСписок.Имя = Сред(Строка, 2, СтрДлина(Строка) - 2);
		ИначеЕсли СтрНачинаетсяС(Строка, "ID=") Тогда
			ТекСтрокаСписок.Идентификатор = Новый УникальныйИдентификатор(СтрЗаменить(Строка, "ID=", ""));
			ИдентификаторыДобавленныхИБ.Добавить(ТекСтрокаСписок.Идентификатор);
		ИначеЕсли СтрНачинаетсяС(Строка, "Connect=") Тогда
			ТекСтрокаСписок.СтрокаСоединения = СтрЗаменить(Строка, "Connect=", "");
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ФайлПапка Из Ждать НайтиФайлыАсинх(Каталог() + "1cv8", "*") Цикл
		Попытка
			Идентификатор = Новый УникальныйИдентификатор(ФайлПапка.Имя);
		Исключение
			Продолжить;
		КонецПопытки;
		
		ФайлPFL = Новый Файл(ФайлПапка.ПолноеИмя + "\" + "1cv8.pfl");
		Если Не Ждать ФайлPFL.СуществуетАсинх() Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИдентификаторыДобавленныхИБ.Найти(Идентификатор) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Ждать ФайлПапка.ЭтоКаталогАсинх() Тогда
			СтрСписок = Список.Добавить();
			СтрСписок.Очистить = Истина;
			СтрСписок.Идентификатор = Идентификатор;
			СтрСписок.ЕстьКеш = Истина;
		КонецЕсли;
	КонецЦикла;
	
	УдаляемыеСтроки = Новый Массив;
	Для Каждого СтрСписок Из Список Цикл
		Если Не ЗначениеЗаполнено(СтрСписок.СтрокаСоединения) И ЗначениеЗаполнено(СтрСписок.Имя) Тогда
			УдаляемыеСтроки.Добавить(СтрСписок);
			Продолжить;
		КонецЕсли;
		
		ПапкаКеша = Каталог() + "1cv8\" + Строка(СтрСписок.Идентификатор);
		ПапкаОбъект = Новый Файл(ПапкаКеша);
		Если Ждать ПапкаОбъект.СуществуетАсинх() И Ждать ПапкаОбъект.ЭтоКаталогАсинх() Тогда
			СтрСписок.РазмерКеша = Ждать РазмерКаталога(ПапкаКеша) / 1024 / 1024;
			СтрСписок.ЕстьКеш = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрСписок Из УдаляемыеСтроки Цикл
		Список.Удалить(СтрСписок);
	КонецЦикла;
	
	ОбщийРазмер = Список.Итог("РазмерКеша");
	Список.Сортировать("Имя Возр");
КонецПроцедуры

// Универсальная процедура сортировки таблицы значений
//
// Параметры:
//  ИмяТаблицыФормы - Строка - Имя элемента формы, ссылающегося на таблицу
//  Направление - Строка - "Возр" или "Убыв"
&НаСервере
Процедура СортироватьТаблицуЗначений(ИмяТаблицыФормы, Направление)
	ТаблицаФормы = Элементы[ИмяТаблицыФормы];
	ПрефиксПутиКДанным = ТаблицаФормы.ПутьКДанным + ".";
	
	ТекущаяКолонка = ТаблицаФормы.ТекущийЭлемент;
	ИмяКолонки = СтрЗаменить(ТекущаяКолонка.ПутьКДанным, ПрефиксПутиКДанным, "");
	
	ЭтотОбъект[ТаблицаФормы.ПутьКДанным].Сортировать(ИмяКолонки + " " + Направление);
КонецПроцедуры

#КонецОбласти
