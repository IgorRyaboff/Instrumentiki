
// --------------------------------------------------------------------------------
// Copyright (c) 2025 Igor Ryabov (https://github.com/IgorRyaboff/Instrumentiki)
// License: https://github.com/IgorRyaboff/Instrumentiki/blob/main/LICENSE
// --------------------------------------------------------------------------------

#Область ОписаниеПеременных

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Параметры.Свойство("ИдентификаторЗадания", ИдентификаторЗадания);
	Параметры.Свойство("Метаданные", ИмяМетаданных);
	
	Для Каждого Пользователь Из ПользователиИнформационнойБазы.ПолучитьПользователей() Цикл
		Элементы.ИмяПользователя.СписокВыбора.Добавить(Пользователь.Имя);
	КонецЦикла;
	Элементы.ИмяПользователя.СписокВыбора.СортироватьПоЗначению();
	
	ПеречитатьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ЗагрузитьПараметрыКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если ВПроцессеЗакрытияФормы Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		Отказ = Истина;
		Если Не ЗавершениеРаботы Тогда
			ПередЗакрытиемСМодифицированностьюАсинх();
		КонецЕсли;
	Иначе
		Отказ = Истина;
		ВПроцессеЗакрытияФормы = Истина;
		Закрыть(ПараметрЗакрытия);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
// Код процедур и функций
#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Асинх Процедура УстановитьРасписание(Команда)
	Конструктор = Новый ДиалогРасписанияРегламентногоЗадания(Расписание);
	Ответ = Ждать Конструктор.ОткрытьАсинх();
	Если Ответ <> Неопределено Тогда
		Расписание = Ответ;
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Асинх Процедура Записать(Команда)
	Записано = Ждать ЗаписатьАсинх();
	Если Записано Тогда
		ПараметрЗакрытия = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Асинх Процедура ЗаписатьИЗакрыть(Команда)
	Ждать ЗаписатьАсинх();
	
	ВПроцессеЗакрытияФормы = Истина;
	Закрыть(Истина);
КонецПроцедуры

&НаКлиенте
Асинх Процедура Перечитать(Команда)
	Если Модифицированность Тогда
		Ответ = Ждать ВопросАсинх(НСтр("ru='Данные изменены. Перечитать данные?'"), РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПеречитатьНаСервере();
	ЗагрузитьПараметрыКлиент();
	Состояние(НСтр("ru='Перечитано'"));
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Заполняет содержимое формы данными регламентного задания
//
&НаСервере
Процедура ПеречитатьНаСервере()
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		Заголовок = НСтр("ru='Регламентное задание'");
		ИдентификаторЗаданияСтрокой = Строка(ИдентификаторЗадания);
		
		РЗ = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
		Если РЗ = Неопределено Тогда
			Сообщить(НСтр("ru='Регламентного задания с данным идентфикатором не существует. Форму можно закрыть, тут всё плохо :('"));
			ЭтаФорма.Доступность = Ложь;
			Элементы.УстановитьРасписание.Доступность = Ложь;
			Возврат;
		КонецЕсли;
	Иначе
		РЗ = РегламентныеЗадания.СоздатьРегламентноеЗадание(ИмяМетаданных);
		Этаформа.Заголовок = НСтр("ru='Новое регламентное задание'");
	КонецЕсли;
	
	ИмяПользователя = РЗ.ИмяПользователя;
	ИнтервалПовтораПриАварийномЗавершении = РЗ.ИнтервалПовтораПриАварийномЗавершении;
	Использование = РЗ.Использование;
	Ключ = РЗ.Ключ;
	КоличествоПовторовПриАварийномЗавершении = РЗ.КоличествоПовторовПриАварийномЗавершении;
	ИмяМетаданных = РЗ.Метаданные.Имя;
	СинонимМетаданных = РЗ.Метаданные.Синоним;
	ИмяМетода = РЗ.Метаданные.ИмяМетода;
	Наименование = РЗ.Наименование;
	Предопределенное = РЗ.Предопределенное;
	Расписание = РЗ.Расписание;
	
	ФЗ = РЗ.ПоследнееЗадание;
	Если ФЗ <> Неопределено Тогда
		ДатаНачалаПоследнегоВыполнения = ФЗ.Начало;
		ДатаОкончанияПоследнегоВыполнения = ?(ЗначениеЗаполнено(ФЗ.Конец), ФЗ.Конец, НСтр("ru='<не завершено>'"));
		
		Шаблон = НСтр("ru = '%1
                       |Фоновое задание: %4
                       |%2 - %3'");
		ПоследнееВыполнение = СтрШаблон(Шаблон, ФЗ.Состояние, ДатаНачалаПоследнегоВыполнения, ДатаОкончанияПоследнегоВыполнения, ФЗ.УникальныйИдентификатор);
		
		Если ФЗ.ИнформацияОбОшибке <> Неопределено Тогда
			ПоследнееВыполнение = ПоследнееВыполнение + Символы.ПС + Символы.ПС + Строка(ФЗ.ИнформацияОбОшибке.Описание);
		КонецЕсли;
	Иначе
		ДатаНачалаПоследнегоВыполнения = Неопределено;
		ДатаОкончанияПоследнегоВыполнения = Неопределено;
		ПоследнееВыполнение = "";
	КонецЕсли;
	
	Модифицированность = Ложь;
КонецПроцедуры

// Вызывает запись РЗ на сервере
//
// Возвращаемое значение:
//  Булево - Задание было записано
&НаКлиенте
Асинх Функция ЗаписатьАсинх()
	Если Использование И Расписание.ТребуетсяВыполнение(ТекущаяДата(), ДатаНачалаПоследнегоВыполнения, ДатаОкончанияПоследнегоВыполнения) Тогда
		Ответ = Ждать ВопросАсинх(НСтр("ru = 'Платформа выполнит задание сразу после записи. Продолжить?
                                        |(Чтобы этого избежать, нажмите ""Нет"" и задайте дату и время начала задания позже текущих)'"), РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ЗаписатьНаСервере();
	Состояние(НСтр("ru='Записано'"));
	Возврат Истина;
КонецФункции

// Выполняет запись регламентного задания на сервере
//
&НаСервере
Процедура ЗаписатьНаСервере()
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		РЗ = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
		Если РЗ = Неопределено Тогда
			Сообщить(НСтр("ru='Регламентного задания с данным идентфикатором не существует. Форму можно закрыть, тут всё плохо :('"));
			ЭтаФорма.Доступность = Ложь;
			Элементы.УстановитьРасписание.Доступность = Ложь;
			Возврат;
		КонецЕсли;
	Иначе
		РЗ = РегламентныеЗадания.СоздатьРегламентноеЗадание(ИмяМетаданных);
	КонецЕсли;
	
	РЗ.ИмяПользователя = ИмяПользователя;
	РЗ.ИнтервалПовтораПриАварийномЗавершении = ИнтервалПовтораПриАварийномЗавершении;
	РЗ.Использование = Использование;
	РЗ.Ключ = Ключ;
	РЗ.КоличествоПовторовПриАварийномЗавершении = КоличествоПовторовПриАварийномЗавершении;
	РЗ.Наименование = Наименование;
	РЗ.Расписание = Расписание;
	
	Если ПараметрыДоступны Тогда
		РЗ.Параметры = ПараметрыЗадания.ВыгрузитьЗначения();
	КонецЕсли;
	
	РЗ.Записать();
	ИдентификаторЗадания = РЗ.УникальныйИдентификатор;
	Модифицированность = Ложь;
КонецПроцедуры

// Вызывается обработчиком формы ПередЗакрытием при наличии несохранённых изменений
// Запрашивает сохранение
//
&НаКлиенте
Асинх Процедура ПередЗакрытиемСМодифицированностьюАсинх()
	Ответ = Ждать ВопросАсинх(НСтр("ru='Данные были изменены. Сохранить изменения?'"), РежимДиалогаВопрос.ДаНетОтмена);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаписатьАсинх();
		
		ВПроцессеЗакрытияФормы = Истина;
		Закрыть(Истина);
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		
		ВПроцессеЗакрытияФормы = Истина;
		Закрыть(ПараметрЗакрытия);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПараметрыКлиент()
	ПараметрыЗадания.Очистить();
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ПараметрыДоступны = Истина;
		Элементы.СтраницыПараметры.ТекущаяСтраница = Элементы.СтраницаТаблицаПараметров;
		Возврат;
	КонецЕсли;
	
	Попытка
		ПараметрыЗадания.ЗагрузитьЗначения(ПараметрыФЗ(ИдентификаторЗадания));
	Исключение
		ПараметрыДоступны = Ложь;
		Элементы.СтраницыПараметры.ТекущаяСтраница = Элементы.СтраницаПараметрыНедоступны;
		Возврат;
	КонецПопытки;
	
	ПараметрыДоступны = Истина;
	Элементы.СтраницыПараметры.ТекущаяСтраница = Элементы.СтраницаТаблицаПараметров;
КонецПроцедуры

// Возвращает массив парметров регламентного задания
//
&НаСервереБезКонтекста
Функция ПараметрыФЗ(ИдентификаторРЗ)
	РЗ = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторРЗ);
	Возврат РЗ.Параметры;
КонецФункции

#КонецОбласти