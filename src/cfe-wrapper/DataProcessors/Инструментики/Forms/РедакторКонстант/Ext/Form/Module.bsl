
// --------------------------------------------------------------------------------
// Copyright (c) 2024-2025 Igor Ryabov (https://github.com/IgorRyaboff/Instrumentiki)
// License: https://github.com/IgorRyaboff/Instrumentiki/blob/main/LICENSE
// --------------------------------------------------------------------------------

#Область ОписаниеПеременных

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ЗаполнитьТаблицуКонстантНаСервере();
	Элементы.ПривилегированныйРежим.Доступность = Не БезопасныйРежим();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
// Код процедур и функций
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаКонстант

&НаКлиенте
Процедура ТаблицаКонстантЗначениеПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ТаблицаКонстант.ТекущиеДанные;
	УстановитьНовоеЗначениеКонстанты(ТекущиеДанные.Имя, ТекущиеДанные.Значение, ПривилегированныйРежим);
	ВызватьОбновлениеТаблицы();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКонстантВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтрТаблицаКонстант = Элементы.ТаблицаКонстант.ТекущиеДанные;
	
	Если Поле.Имя = "ТаблицаКонстантЗначение" И ТипЗнч(СтрТаблицаКонстант.Значение) = Тип("УникальныйИдентификатор") Тогда
		СтандартнаяОбработка = Ложь;
		ИзменитьУникальныйИдентификатор(СтрТаблицаКонстант);
		Возврат;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновитьТаблицуКонстант(Команда)
	ВызватьОбновлениеТаблицы();
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьВКонсолиКода(Команда)
	ТекДанные = Элементы.ТаблицаКонстант.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоХранилищеЗначения = (ТипЗнч(ТекДанные.Значение) = Тип("ХранилищеЗначения"));
	
	ШаблонКода = "Значение = Константы.%1.Получить()%2;
	             |
				 |// Обработка значения
				 |
				 |Константы.%1.Установить(%3);";
	Код = СтрШаблон(ШаблонКода, ТекДанные.Имя, ?(ЭтоХранилищеЗначения, ".Получить()", ""), ?(ЭтоХранилищеЗначения, "Новый ХранилищеЗначения(Значение)", "Значение"));
	
	ПараметрыФормы = Новый Структура("Код, НаКлиенте", Код, Ложь);
	ОткрытьФорму(Объект.ИмяМетаданныхОбработки + ".Форма.КонсольКода", ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура СортироватьВозр(Команда)
	СортироватьТаблицуЗначений("ТаблицаКонстант", "Возр");
КонецПроцедуры

&НаКлиенте
Процедура СортироватьУбыв(Команда)
	СортироватьТаблицуЗначений("ТаблицаКонстант", "Убыв");
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Устанавливает значение константы
//
// Параметры:
//  Имя - Строка - Имя константы
//  Значение - Произвольный - Значение константы
//  ПривилегированныйРежим - Булево - Если Истина, то установка значения будет выполнена в привилегированном режиме
&НаСервереБезКонтекста
Процедура УстановитьНовоеЗначениеКонстанты(Знач Имя, Знач Значение, Знач ПривилегированныйРежим)
	Если ПривилегированныйРежим Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	Константы[Имя].Установить(Значение);
КонецПроцедуры

&НаКлиенте
Процедура ВызватьОбновлениеТаблицы()
	ИдентификаторСтроки = Элементы.ТаблицаКонстант.ТекущаяСтрока;
	Если ЗначениеЗаполнено(ИдентификаторСтроки) Тогда
		ТекущаяКонстанта = Элементы.ТаблицаКонстант.ТекущиеДанные.Имя;
	Иначе
		ТекущаяКонстанта = Неопределено;
	КонецЕсли;
	
	ЗаполнитьТаблицуКонстантНаСервере();
	
	Если ТекущаяКонстанта <> Неопределено Тогда
		СтрТаблица = ТаблицаКонстант.НайтиСтроки(Новый Структура("Имя", ТекущаяКонстанта))[0];
		Элементы.ТаблицаКонстант.ТекущаяСтрока = СтрТаблица.ПолучитьИдентификатор();
	КонецЕсли;
КонецПроцедуры

// Заполняет таблицу формы ТаблицаКонстант
//
&НаСервере
Процедура ЗаполнитьТаблицуКонстантНаСервере()
	ТаблицаКонстант.Очистить();
	
	Если ПривилегированныйРежим Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	Для Каждого Константа Из Метаданные.Константы Цикл
		Стр = ТаблицаКонстант.Добавить();
		Стр.Имя = Константа.Имя;
		Стр.Синоним = Константа.Синоним;
		Стр.ТипЗначения = Метаданные.Константы.Найти(Константа.Имя).Тип;
		Попытка
			Стр.Значение = Константы[Константа.Имя].Получить();
		Исключение
			Стр.Значение = NULL;
			Стр.ОшибкаПолучения = Истина;
		КонецПопытки;
	КонецЦикла;
	
	Если ТипЗнч(Стр.Значение) = Тип("ХранилищеЗначения") Тогда
		Стр.Значение = Новый ХранилищеЗначения(Неопределено);
	КонецЕсли;
КонецПроцедуры

// Универсальная процедура сортировки таблицы значений
//
// Параметры:
//  ИмяТаблицыФормы - Строка - Имя элемента формы, ссылающегося на таблицу
//  Направление - Строка - "Возр" или "Убыв"
&НаСервере
Процедура СортироватьТаблицуЗначений(ИмяТаблицыФормы, Направление)
	ТаблицаФормы = Элементы[ИмяТаблицыФормы];
	ПрефиксПутиКДанным = ТаблицаФормы.ПутьКДанным + ".";
	
	ТекущаяКолонка = ТаблицаФормы.ТекущийЭлемент;
	ИмяКолонки = СтрЗаменить(ТекущаяКолонка.ПутьКДанным, ПрефиксПутиКДанным, "");
	
	ЭтотОбъект[ТаблицаФормы.ПутьКДанным].Сортировать(ИмяКолонки + " " + Направление);
КонецПроцедуры

&НаКлиенте
Асинх Процедура ИзменитьУникальныйИдентификатор(СтрТаблицаКонстант)
	СтароеЗначение = СтрТаблицаКонстант.Значение;
	НовоеЗначениеСтрокой = Ждать ВвестиСтрокуАсинх(СтароеЗначение, НСтр("ru='Введите значение'"), 36);
	Если НовоеЗначениеСтрокой = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		НовоеЗначение = Новый УникальныйИдентификатор(НовоеЗначениеСтрокой);
	Исключение
		ПоказатьПредупреждение(, НСтр("ru='Введенное значение не является уникальным идентификатором'"));
		Возврат;
	КонецПопытки;
	
	УстановитьНовоеЗначениеКонстанты(СтрТаблицаКонстант.Имя, НовоеЗначение, ПривилегированныйРежим);
	ВызватьОбновлениеТаблицы();
КонецПроцедуры

#КонецОбласти
