
// --------------------------------------------------------------------------------
// Copyright (c) 2025 Igor Ryabov (https://github.com/IgorRyaboff/Instrumentiki)
// License: https://github.com/IgorRyaboff/Instrumentiki/blob/main/LICENSE
// --------------------------------------------------------------------------------

#Область ОписаниеПеременных

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Для Каждого Мета Из Метаданные.РегистрыСведений Цикл
		Если Мета.РежимЗаписи <> Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый Тогда
			Продолжить;
		КонецЕсли;
		
		Синоним = ?(ЗначениеЗаполнено(Мета.Синоним), Мета.Синоним, Мета.Имя);
		Элементы.ВыбранныйРегистр.СписокВыбора.Добавить(Мета.Имя, Синоним);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если Модифицированность Тогда
		Отказ = Истина;
		
		Если Не ЗавершениеРаботы Тогда
			ЗапроситьСохранениеАсинх(Истина);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВыбранныйРегистрПриИзменении(Элемент)
	Отбор.Очистить();
	
	Для Каждого КлючЗнч Из ИзмеренияРегистраСведений(ВыбранныйРегистр) Цикл
		ИмяИзмерения = КлючЗнч.Ключ;
		ДанныеИзмерения = КлючЗнч.Значение;
		
		СтрОтбор = Отбор.Добавить();
		СтрОтбор.ИмяПоля = ИмяИзмерения;
		СтрОтбор.Синоним = ДанныеИзмерения.Синоним;
		СтрОтбор.Синоним = ДанныеИзмерения.Синоним;
		СтрОтбор.Тип = ДанныеИзмерения.Тип;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОтбор

&НаКлиенте
Процедура ОтборЗначениеПриИзменении(Элемент)
	ТекДанные = Элементы.Отбор.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекДанные.Использование = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСодержимоеНабораЗаписей

&НаКлиенте
Процедура СодержимоеНабораЗаписейПриИзменении(Элемент)
	ЗначенияОтбора = Новый Структура;
	Для Каждого СтрОтбор Из Отбор Цикл
		Если СтрОтбор.Использование Тогда
			ЗначенияОтбора.Вставить(СтрОтбор.ИмяПоля, СтрОтбор.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрНабора Из СодержимоеНабораЗаписей Цикл
		Для Каждого КлючЗнч Из ЗначенияОтбора Цикл
			ИмяПоля = КлючЗнч.Ключ;
			Значение = КлючЗнч.Значение;
			
			СтрНабора[ИмяПоля] = Значение;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СодержимоеНабораЗаписейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтрНабораЗаписей = Элемент.ТекущиеДанные;
	ИмяРеквизита = СтрРазделить(ПутьКДаннымЭлементаФормы(Поле.Имя), ".")[1];
	
	Если ТипЗнч(СтрНабораЗаписей[ИмяРеквизита]) = Тип("УникальныйИдентификатор") Тогда
		ИзменитьУникальныйИдентификатор(СтрНабораЗаписей, ИмяРеквизита);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Асинх Процедура ПеречитатьНаборЗаписей(Команда)
	Если РежимЗамещенияПриЗаписи <> Истина Тогда
		ПоказатьПредупреждение(, "Работа производится в режиме добавления новых строк");
		Возврат;
	КонецЕсли;
	
	Если Не (Ждать ЗапроситьСохранениеАсинх(Ложь)) Тогда
		Возврат;
	КонецЕсли;
	
	Состояние("Перечитываем...");
	ПеречитатьНаборЗаписейНаСервере();
	Состояние("Набор записей перечитан");
КонецПроцедуры

&НаКлиенте
Асинх Процедура ЗаписатьНаборЗаписей(Команда)
	Если РежимЗамещенияПриЗаписи = Истина Тогда
		Ответ = Ждать ВопросАсинх(НСтр("ru = 'Все существующие записи регистра (в пределах установленного отбора) будет УДАЛЕНЫ и заменены набором записей, который вы видите перед собой.
                                        |Продолжить?'"), РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
		
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если РежимЗамещенияПриЗаписи <> Истина И СодержимоеНабораЗаписей.Количество() = 0 Тогда
		ПоказатьПредупреждение(, "Набор записей пуст, записывать нечего");
		Возврат;
	КонецЕсли;
	
	Состояние("Записываем...");
	ЗаписатьНаборЗаписейНаСервере();
	Состояние("Набор записан!");
КонецПроцедуры

&НаКлиенте
Асинх Процедура ПерейтиКНаборуЗаписей(Команда)
	Если Не ЗначениеЗаполнено(ВыбранныйРегистр) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не выбран регистр сведений";
		Сообщение.Поле = "ВыбранныйРегистр";
		Сообщение.УстановитьДанные(ЭтотОбъект);
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить(Истина, НСтр("ru='Замещение'"));
	Кнопки.Добавить(Ложь, НСтр("ru='Добавление'"));
	
	Если Объект.РежимСовместимостиКонфигурации >= 3.25 Тогда
		Кнопки.Добавить(Вычислить("РежимЗамещения.Слияние"));
		Кнопки.Добавить(Вычислить("РежимЗамещения.Удаление"));
	КонецЕсли;
	
	Кнопки.Добавить(КодВозвратаДиалога.Отмена);
	
	Если Объект.ВерсияПлатформы >= 3.25 Тогда
		ТекстВопроса = НСтр("ru=''");
	Иначе
		ТекстВопроса = НСтр("ru = 'Выберите вариант работы с набором записей регистра.
                             |""Замещение"" - будут загружены все имеющиеся записи набора (в пределах установленного отбора), запись будет осуществляться в режиме ЗАМЕЩЕНИЯ;
                             |""Добавление"" - набор будет пустой, запись будет осуществляться в режиме ДОПОЛНЕНИЯ, не касаясь существующих в базе. При обнаружении совпадающих записей будет вызвана ошибка;
                             |""Слияние"" - аналогично режиму ""Добавление"", но совпадающе записи будут перезаписаны;
                             |""Удаление"" - набор записей будет пустой, все добавленные записи будут УДАЛЕНЫ из регистра.'");
	КонецЕсли;
	
	Ответ = Ждать ВопросАсинх(НСтр("ru = 'Выберите вариант работы с набором записей регистра.
                                    |""Замещение"" - будут загружены все имеющиеся записи набора (в пределах установленного отбора), запись будет осуществляться в режиме ЗАМЕЩЕНИЯ.
                                    |""Добавление"" - набор будет пустой, запись будет осуществляться в режиме ДОПОЛНЕНИЯ, не касаясь существующих в базе. При обнаружении совпадающих записей будет вызвана ошибка.'")
		, Кнопки,, КодВозвратаДиалога.Отмена);
	
	Если Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	РежимЗамещенияПриЗаписи = Ответ;
	
	Состояние("Подождите...");
	ИнициализироватьНаборЗаписей();
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаСодержимоеНабораЗаписей;
	Состояние();
КонецПроцедуры

&НаКлиенте
Асинх Процедура ВернутьсяКОтбору(Команда)
	Если Не (Ждать ЗапроситьСохранениеАсинх(Ложь)) Тогда
		Возврат;
	КонецЕсли;
	
	СодержимоеНабораЗаписей.Очистить();
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОтбор;
	Модифицированность = Ложь;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ПутьКДаннымЭлементаФормы(Знач ИмяЭлемента)
	Возврат Элементы.Найти(ИмяЭлемента).ПутьКДанным;
КонецФункции

// Возвращает список измерений регистра для использования в отборах
//
// Параметры:
//  Имя - Строка - Имя регистра сведений
//
// Возвращаемое значение:
//  Структура - в качестве имен свойств передаются имена измерений. Значениями свойств выступает Структура:
//  * Синоним - Строка -
//  * Тип - ОписаниеТипов -
&НаСервереБезКонтекста
Функция ИзмеренияРегистраСведений(Имя)
	МетаданныеРегистра = Метаданные.РегистрыСведений[Имя];
	Результат = Новый Структура;
	
	Для Каждого Мета Из МетаданныеРегистра.Измерения Цикл
		Синоним = ?(ЗначениеЗаполнено(Мета.Синоним), Мета.Синоним, Мета.Имя);
		
		Результат.Вставить(Мета.Имя, Новый Структура("Синоним, Тип", Синоним, Мета.Тип));
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаСервере
Процедура ИнициализироватьНаборЗаписей()
	Пока Элементы.СодержимоеНабораЗаписей.ПодчиненныеЭлементы.Количество() > 0 Цикл
		Элементы.Удалить(Элементы.СодержимоеНабораЗаписей.ПодчиненныеЭлементы[0]);
	КонецЦикла;
	
	УдаляемыеРеквизиты = Новый Массив;
	Для Каждого Реквизит Из ПолучитьРеквизиты("СодержимоеНабораЗаписей") Цикл
		УдаляемыеРеквизиты.Добавить("СодержимоеНабораЗаписей." + Реквизит.Имя);
	КонецЦикла;
	ИзменитьРеквизиты(, УдаляемыеРеквизиты);
	
	МетаданныеРегистра = Метаданные.РегистрыСведений[ВыбранныйРегистр];
	ИменаПолей = Новый Массив;
	КартинкиПолей = Новый Структура;
	ДобавляемыеРеквизиты = Новый Массив;
	ИменаПолейСХранилищемЗначений = Новый Массив;
	ИменаПолейСБулевом = Новый Массив;
	
	Для Каждого Мета Из МетаданныеРегистра.СтандартныеРеквизиты Цикл
		ИменаПолей.Добавить(Мета.Имя);
		КартинкиПолей.Вставить(Мета.Имя, Новый Картинка);
		
		Синоним = ?(ЗначениеЗаполнено(Мета.Синоним), Мета.Синоним, Мета.Имя);
		Реквизит = Новый РеквизитФормы(Мета.Имя, Мета.Тип, "СодержимоеНабораЗаписей", Синоним, Истина);
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		
		Если Мета.Тип = Новый ОписаниеТипов("Булево") Тогда
			ИменаПолейСБулевом.Добавить(Мета.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Мета Из МетаданныеРегистра.Измерения Цикл
		ИменаПолей.Добавить(Мета.Имя);
		КартинкиПолей.Вставить(Мета.Имя, БиблиотекаКартинок.Измерение);
		
		Синоним = ?(ЗначениеЗаполнено(Мета.Синоним), Мета.Синоним, Мета.Имя);
		Реквизит = Новый РеквизитФормы(Мета.Имя, Мета.Тип, "СодержимоеНабораЗаписей", Синоним, Истина);
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		
		Если Мета.Тип = Новый ОписаниеТипов("Булево") Тогда
			ИменаПолейСБулевом.Добавить(Мета.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Мета Из МетаданныеРегистра.Ресурсы Цикл
		ИменаПолей.Добавить(Мета.Имя);
		КартинкиПолей.Вставить(Мета.Имя, БиблиотекаКартинок.Ресурс);
		
		Синоним = ?(ЗначениеЗаполнено(Мета.Синоним), Мета.Синоним, Мета.Имя);
		ТипДляРеквизитаФормы = ?(Мета.Тип = Новый ОписаниеТипов("ХранилищеЗначения"), Новый ОписаниеТипов(), Мета.Тип);
		Реквизит = Новый РеквизитФормы(Мета.Имя, ТипДляРеквизитаФормы, "СодержимоеНабораЗаписей", Синоним, Истина);
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		
		Если Мета.Тип = Новый ОписаниеТипов("Булево") Тогда
			ИменаПолейСБулевом.Добавить(Мета.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Мета Из МетаданныеРегистра.Реквизиты Цикл
		ИменаПолей.Добавить(Мета.Имя);
		КартинкиПолей.Вставить(Мета.Имя, Новый Картинка);
		
		Синоним = ?(ЗначениеЗаполнено(Мета.Синоним), Мета.Синоним, Мета.Имя);
		ТипДляРеквизитаФормы = ?(Мета.Тип = Новый ОписаниеТипов("ХранилищеЗначения"), Новый ОписаниеТипов(), Мета.Тип);
		Реквизит = Новый РеквизитФормы(Мета.Имя, ТипДляРеквизитаФормы, "СодержимоеНабораЗаписей", Синоним, Истина);
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		
		Если Мета.Тип = Новый ОписаниеТипов("Булево") Тогда
			ИменаПолейСБулевом.Добавить(Мета.Имя);
		КонецЕсли;
	КонецЦикла;
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	ПоляУчаствующиеВОтборе = Новый Массив;
	Для Каждого СтрОтбор Из Отбор Цикл
		Если СтрОтбор.Использование Тогда
			ПоляУчаствующиеВОтборе.Добавить(СтрОтбор.ИмяПоля);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ИмяПоля Из ИменаПолей Цикл
		ПолеУчаствуетВОтборе = (ПоляУчаствующиеВОтборе.Найти(ИмяПоля) <> Неопределено);
		ЭтоХранилищеЗначения = (ИменаПолейСХранилищемЗначений.Найти(ИмяПоля) <> Неопределено);
		ЭтоБулевоеПоле = (ИменаПолейСБулевом.Найти(ИмяПоля) <> Неопределено);
		
		Элемент = Элементы.Добавить("СодержимоеНабораЗаписей" + ИмяПоля, Тип("ПолеФормы"), Элементы.СодержимоеНабораЗаписей);
		Элемент.Вид = ?(ЭтоБулевоеПоле, ВидПоляФормы.ПолеФлажка, ВидПоляФормы.ПолеВвода);
		Элемент.ПутьКДанным = "СодержимоеНабораЗаписей." + ИмяПоля;
		Элемент.КартинкаШапки = КартинкиПолей[ИмяПоля];
		Элемент.Подсказка = ИмяПоля;
		
		Элемент.ТолькоПросмотр = ПолеУчаствуетВОтборе Или ЭтоХранилищеЗначения;
	КонецЦикла;
	
	Если РежимЗамещенияПриЗаписи = Истина Тогда
		ПеречитатьНаборЗаписейНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПеречитатьНаборЗаписейНаСервере()
	НаборЗаписей = НаборЗаписейСОтборами();
	НаборЗаписей.Прочитать();
	СодержимоеНабораЗаписей.Загрузить(НаборЗаписей.Выгрузить());
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНаборЗаписейНаСервере()
	НаборЗаписей = НаборЗаписейСОтборами();
	НаборЗаписей.Записать(РежимЗамещенияПриЗаписи);
	
	Модифицированность = Ложь;
КонецПроцедуры

&НаСервере
Функция НаборЗаписейСОтборами()
	НаборЗаписей = РегистрыСведений[ВыбранныйРегистр].СоздатьНаборЗаписей();
	
	Для Каждого СтрОтбор Из Отбор Цикл
		Если СтрОтбор.Использование Тогда
			НаборЗаписей.Отбор.Найти(СтрОтбор.ИмяПоля).Установить(СтрОтбор.Значение, Истина);
		КонецЕсли;
	КонецЦикла;
	
	НаборЗаписей.Загрузить(СодержимоеНабораЗаписей.Выгрузить());
	НаборЗаписей.ОбменДанными.Загрузка = ОбменДаннымиЗагрузка;
	Возврат НаборЗаписей;
КонецФункции

// При наличии несохраненных данных уточняет у пользователя необходимость продолжения действия с потерей данных
//
// Возвращаемое значение:
//  Булево - Действия, приводящие к потере данных, разрешены
&НаКлиенте
Асинх Функция ЗапроситьСохранениеАсинх(ЗакрытьФорму = Ложь)
	Если Не Модифицированность Тогда
		Возврат Истина;
	КонецЕсли;
	
	Ответ = Ждать ВопросАсинх("Изменения будут утеряны. Продолжить?", РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Результат = Истина;
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
		Результат = Ложь;
	КонецЕсли;
	
	Если Результат И ЗакрытьФорму Тогда
		Модифицированность = Ложь;
		ЭтотОбъект.Закрыть();
	КонецЕсли;
	Возврат Результат;
КонецФункции

// Сравнивает две версии
//
// Параметры
//  ВерсияСлева - Строка -
//  ВерсияСправа - Строка -
//
// Возвращаемое значение:
//  Число - "0", если версии совпадают; "1", если ВерсияСлева > ВерсияСправа; "-1", если ВерсияСлева < ВерсияСправа
&НаКлиентеНаСервереБезКонтекста
Функция СравнитьВерсии(ВерсияСлева, ВерсияСправа)
	ЧастиСлева = СтрРазделить(ВерсияСлева, ".");
	ЧастиСправа = СтрРазделить(ВерсияСправа, ".");
	КоличествоЧастей = ?(ЧастиСлева.Количество() > ЧастиСправа.Количество(), ЧастиСлева.Количество(), ЧастиСправа.Количество());
	
	Пока ЧастиСлева.Количество() < КоличествоЧастей Цикл
		ЧастиСлева.Добавить("0");
	КонецЦикла;
	Пока ЧастиСправа.Количество() < КоличествоЧастей Цикл
		ЧастиСправа.Добавить("0");
	КонецЦикла;
	
	Для Сч = 0 По КоличествоЧастей - 1 Цикл
		Слева = Число(ЧастиСлева[Сч]);
		Справа = Число(ЧастиСправа[Сч]);
		
		Если Слева > Справа Тогда
			Возврат -1;
		ИначеЕсли Слева < Справа Тогда
			Возврат 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат 0;
КонецФункции

&НаКлиенте
Асинх Процедура ИзменитьУникальныйИдентификатор(ИзменяемыйОбъект, ИмяИзменяемогоСвойства)
	СтароеЗначение = Строка(ИзменяемыйОбъект[ИмяИзменяемогоСвойства]);
	НовоеЗначениеСтрокой = Ждать ВвестиСтрокуАсинх(СтароеЗначение, НСтр("ru='Введите значение'"), 36);
	Если НовоеЗначениеСтрокой = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		НовоеЗначение = Новый УникальныйИдентификатор(НовоеЗначениеСтрокой);
	Исключение
		ПоказатьПредупреждение(, НСтр("ru='Введенное значение не является уникальным идентификатором'"));
		Возврат;
	КонецПопытки;
	
	ИзменяемыйОбъект[ИмяИзменяемогоСвойства] = НовоеЗначение;
	Модифицированность = Истина;
КонецПроцедуры

#КонецОбласти
