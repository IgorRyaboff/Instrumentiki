
// --------------------------------------------------------------------------------
// Copyright (c) 2025 Igor Ryabov (https://github.com/IgorRyaboff/Instrumentiki)
// License: https://github.com/IgorRyaboff/Instrumentiki/blob/main/LICENSE
// --------------------------------------------------------------------------------

///////////////////////////////////////////////////////////////////////////////////////////////////////
// Функция ЗаменитьНедопустимыеСимволыXML взята из БСП.
// Copyright (c) 2019, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы
// Код процедур и функций
#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СсылкаПриИзменении(Элемент)
	ПриИзмененииСсылки();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНайденныеОшибки

&НаКлиенте
Процедура НайденныеОшибкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле.Имя = "НайденныеОшибкиСодержимое" Тогда
		СтандартнаяОбработка = Ложь;
		
		СтрОшибки = Элемент.ТекущиеДанные;
		ЗначениеДвоичныеДанные = ПолучитьДвоичныеДанныеИзBase64Строки(СтрОшибки.Содержимое);
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Двоичные данные: " + Строка(ЗначениеДвоичныеДанные);
		Сообщение.Сообщить();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Проверить(Команда)
	НайденныеОшибки.Очистить();
	ПроверитьНаСервере();
	
	Если НайденныеОшибки.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru='Ошибок не обнаружено'"));
	Иначе
		Если ВыполнятьЗаписьПриОбнаруженииОшибок Тогда
			ПоказатьПредупреждение(, НСтр("ru='В объекте были ошибки, выполнена перезапись'"));
		Иначе
			ПоказатьПредупреждение(, НСтр("ru = 'В объекте есть ошибки. Для устранения ошибок
                                           |повторите проверку с флажком ""Выполнять запись при обнаружении ошибок""'"));
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Асинх Процедура ПолучитьСсылкуПоНавигационной(Команда)
	НоваяСсылка = Ждать ОткрОб_ЗапроситьСсылкуИзНавигационнойАсинх();
	Если НоваяСсылка <> Неопределено Тогда
		Ссылка = НоваяСсылка;
		ПриИзмененииСсылки();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Асинх Процедура ПолучитьСсылкуИзОткрытыхОкон(Команда)
	НоваяСсылка = Ждать ОткрОб_ЗапроситьСсылкуИзОткрытыхОконАсинх();
	Если НоваяСсылка <> Неопределено Тогда
		Ссылка = НоваяСсылка;
		ПриИзмененииСсылки();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПриИзмененииСсылки()
	НайденныеОшибки.Очистить();
КонецПроцедуры

&НаСервере
Процедура ПроверитьНаСервере()
	ПроверяемыйОбъект = Ссылка.ПолучитьОбъект();
	
	РеквизитыШапки = ИменаРеквизитовОбъектаМетаданных(Ссылка.Метаданные());
	ТабличныеЧасти = ТабличныеЧастиОбъектаМетаданных(Ссылка.Метаданные());
	
	ОберткаДляШапки = Новый Массив;
	ОберткаДляШапки.Добавить(ПроверяемыйОбъект);
	ПроверитьРеквизиты(ОберткаДляШапки, РеквизитыШапки, НайденныеОшибки);
	
	Для Каждого КлючЗначениеТЧ Из ТабличныеЧасти Цикл
		ИмяТЧ = КлючЗначениеТЧ.Ключ;
		ИменаРеквизитовТЧ = КлючЗначениеТЧ.Значение;
		
		ПроверитьРеквизиты(ПроверяемыйОбъект[ИмяТЧ], ИменаРеквизитовТЧ, НайденныеОшибки, ИмяТЧ);
	КонецЦикла;
	
	Если ВыполнятьЗаписьПриОбнаруженииОшибок Тогда
		ПроверяемыйОбъект.ОбменДанными.Загрузка = Истина;
		ПроверяемыйОбъект.Записать();
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИменаРеквизитовОбъектаМетаданных(ОбъектМетаданных)
	КоллекцииРеквизитов = Новый Массив;
	КоллекцииРеквизитов.Добавить(ОбъектМетаданных.СтандартныеРеквизиты);
	КоллекцииРеквизитов.Добавить(ОбъектМетаданных.Реквизиты);
	
	ИменаРеквизитов = Новый Массив;
	
	Для Каждого КоллекцияРеквизитов Из КоллекцииРеквизитов Цикл
		Для Каждого Реквизит Из КоллекцияРеквизитов Цикл
			Если Реквизит.Тип.СодержитТип(Тип("Строка")) Тогда
				ИменаРеквизитов.Добавить(Реквизит.Имя);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ИменаРеквизитов;
КонецФункции

&НаСервереБезКонтекста
Функция ТабличныеЧастиОбъектаМетаданных(ОбъектМетаданных)
	ОписаниеТабличныхЧастей = Новый Структура;
	
	ТипыОбъектовМетаданныхСТабличнымиЧастями = Новый Массив;
	ТипыОбъектовМетаданныхСТабличнымиЧастями.Добавить(Метаданные.Справочники);
	ТипыОбъектовМетаданныхСТабличнымиЧастями.Добавить(Метаданные.Документы);
	// TODO: Добавить другие типы, у которых есть табличные части
	
	ОбъектПоддерживаетТабличныеЧасти = Ложь;
	Для Каждого КоллекцияМетаданных Из ТипыОбъектовМетаданныхСТабличнымиЧастями Цикл
		Если КоллекцияМетаданных.Содержит(ОбъектМетаданных) Тогда
			ОбъектПоддерживаетТабличныеЧасти = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ОбъектПоддерживаетТабличныеЧасти Тогда
		Возврат ОписаниеТабличныхЧастей;
	КонецЕсли;
	
	Для Каждого ТабличнаяЧасть Из ОбъектМетаданных.ТабличныеЧасти Цикл
		ИменаРеквизитов = ИменаРеквизитовОбъектаМетаданных(ТабличнаяЧасть);
		ОписаниеТабличныхЧастей.Вставить(ТабличнаяЧасть.Имя, ИменаРеквизитов);
	КонецЦикла;
	
	Возврат ОписаниеТабличныхЧастей;
КонецФункции

&НаСервереБезКонтекста
Процедура ПроверитьРеквизиты(Данные, ИменаРеквизитов, НайденныеОшибки, ИмяТабличнойЧасти = Неопределено)
	Для Каждого СтрДанные Из Данные Цикл
		
		Для Каждого ИмяРеквизита Из ИменаРеквизитов Цикл
			НосительЗначения = Новый Структура(ИмяРеквизита);
			ЗаполнитьЗначенияСвойств(НосительЗначения, СтрДанные);
			
			Значение = НосительЗначения[ИмяРеквизита];
			Если ТипЗнч(Значение) = Тип("Строка") И НайтиНедопустимыеСимволыXML(Значение) <> 0 Тогда
				СтрДанные[ИмяРеквизита] = ЗаменитьНедопустимыеСимволыXML(Значение, "");
				
				Если ЗначениеЗаполнено(ИмяТабличнойЧасти) Тогда
					ИндексСтрокой = Формат(Данные.Индекс(СтрДанные), "ЧН=0; ЧГ=");
					ПутьКДанным = СтрШаблон("%1[%2].%3", ИмяТабличнойЧасти, ИндексСтрокой, ИмяРеквизита);
				Иначе
					ПутьКДанным = ИмяРеквизита;
				КонецЕсли;
				
				ЗначениеДвоичное = ПолучитьДвоичныеДанныеИзСтроки(Значение);
				ЗначениеBase64 = ПолучитьBase64СтрокуИзДвоичныхДанных(ЗначениеДвоичное);
				
				СтрОшибки = НайденныеОшибки.Добавить();
				СтрОшибки.Поле = ПутьКДанным;
				СтрОшибки.Содержимое = ЗначениеBase64;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
КонецПроцедуры

// Заменяет недопустимые символы в XML-строке на заданные символы.
//
// Параметры:
//   Текст - Строка - строка, в которой требуется выполнить замену недопустимых символов.
//   СимволЗамены - Строка - строка, на которую требуется выполнить замену недопустимого символа в XML-строке.
// 
// Возвращаемое значение:
//    Строка - строка, полученная заменой недопустимых символов в XML-строке.
//
&НаСервереБезКонтекста
Функция ЗаменитьНедопустимыеСимволыXML(Знач Текст, СимволЗамены = " ") Экспорт
	ПозицияНачала = 1;
	Позиция = НайтиНедопустимыеСимволыXML(Текст, ПозицияНачала);
	Пока Позиция > 0 Цикл
		НедопустимыйСимвол = Сред(Текст, Позиция, 1);
		Текст = СтрЗаменить(Текст, НедопустимыйСимвол, СимволЗамены);
		ПозицияНачала = Позиция + СтрДлина(СимволЗамены);
		Если ПозицияНачала > СтрДлина(Текст) Тогда
			Прервать;
		КонецЕсли;
		Позиция = НайтиНедопустимыеСимволыXML(Текст, ПозицияНачала);
	КонецЦикла;
	
	Возврат Текст;
КонецФункции

#Область ОткрытиеОбъектов1

// Запрашивает у пользователя навигационную ссылку и возвращает ссылку на объект ИБ
// При возникновении ошибки разбора ссылки формируется предупреждение
//
// Возвращаемое значение:
//  ЛюбаяСсылка, Неопределено -
&НаКлиенте
Асинх Функция ОткрОб_ЗапроситьСсылкуИзНавигационнойАсинх()
	ТекстСсылки = Ждать ВвестиСтрокуАсинх(Неопределено, НСтр("ru='Навигационная ссылка'"));
	Если ТекстСсылки = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		Ссылка = ОткрОб_СсылкаИзНавигационной(ТекстСсылки);
		Возврат Ссылка;
	Исключение
		Ждать ПредупреждениеАсинх(НСтр("ru='Ошибка получения ссылки'"));
		Возврат Неопределено;
	КонецПопытки;
КонецФункции

// Запрашивает выбор пользователем открытого окна программы и возвращает соответствующую окну ссылку на объект ИБ
// При возникновении ошибки разбора ссылки формируется предупреждение
//
// Возвращаемое значение:
//  ЛюбаяСсылка, Неопределено -
&НаКлиенте
Асинх Функция ОткрОб_ЗапроситьСсылкуИзОткрытыхОконАсинх()
	Окна = ПолучитьОкна();
	СписокДляВыбора = Новый СписокЗначений;
	
	Для Каждого ОткрытоеОкно Из Окна Цикл
		Если ОткрытоеОкно.НачальнаяСтраница Тогда
			Продолжить;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ОткрытоеОкно.ПолучитьНавигационнуюСсылку()) Тогда
			Продолжить;
		КонецЕсли;
		
		СписокДляВыбора.Добавить(ОткрытоеОкно.ПолучитьНавигационнуюСсылку(), ОткрытоеОкно.Заголовок);
	КонецЦикла;
	
	Если СписокДляВыбора.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru='Нет доступных для выбора окон'"));
		Возврат Неопределено;
	КонецЕсли;
	
	ВыбранныйЭлемент = Ждать СписокДляВыбора.ВыбратьЭлементАсинх(НСтр("ru='Выберите окно'"));
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		Ссылка = ОткрОб_СсылкаИзНавигационной(ВыбранныйЭлемент.Значение);
		Возврат Ссылка;
	Исключение
		Ждать ПредупреждениеАсинх(НСтр("ru='Ошибка получения ссылки'"));
		Возврат Неопределено;
	КонецПопытки;
КонецФункции

// Формирует ссылку на объект ИБ из навигационной ссылки вида "e1cib/data/Справочник.Контрагенты?ref=80a700155d116f0111ea5a82d06033f4"
// При невозможности сформировать ссылку вызывает исключение
//
// Параметры:
//  НавигационнаяСсылка - Строка -
//
// Возвращаемое значение:
//  Произвольный - Ссылка на объект ИБ
&НаСервереБезКонтекста
Функция ОткрОб_СсылкаИзНавигационной(Знач НавигационнаяСсылка)
	ПерваяТочка = Найти(НавигационнаяСсылка, "e1cib/data/");
    ВтораяТочка = Найти(НавигационнаяСсылка, "?ref=");
    
    ПредставлениеТипа = Сред(НавигационнаяСсылка, ПерваяТочка + 11, ВтораяТочка - ПерваяТочка - 11);
    ШаблонЗначения = ЗначениеВСтрокуВнутр(ПредопределенноеЗначение(ПредставлениеТипа + ".ПустаяСсылка"));
    ЗначениеСсылки = СтрЗаменить(ШаблонЗначения, "00000000000000000000000000000000", Сред(НавигационнаяСсылка, ВтораяТочка + 5));
	Возврат ЗначениеИзСтрокиВнутр(ЗначениеСсылки);
КонецФункции

#КонецОбласти

#КонецОбласти
