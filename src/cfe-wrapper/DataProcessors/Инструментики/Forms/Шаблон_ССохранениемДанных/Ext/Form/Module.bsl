
// --------------------------------------------------------------------------------
// Copyright (c) 2025 Igor Ryabov (https://github.com/IgorRyaboff/Instrumentiki)
// License: https://github.com/IgorRyaboff/Instrumentiki/blob/main/LICENSE
// --------------------------------------------------------------------------------

// Данная форма является шаблоном для новых форм инструментов и содержит код функционала сохранения данных
// Код функционала сохранения данных может быть внедрен также в существующие инструменты
//
// Шаги внедрения:
//  Вставить в форму инструмента все участки кода внутри областей "СохранениеДанных..." (вместе с директивами областей)
//  Вставить служебные процедуры, идущие ниже области "СохранениеДанных..."
//  Заполнить кодом служебные процедуры, идущие вне областей "СохранениеДанных..."
//  Добавить на форму команды с обработчиками СохрД_ОткрытьФайл и СохрД_СохранитьФайл
//  Опционально: вставить в коде, выполняющим основное для инструмента действие, вызов СохрД_ВыполнитьАвтосохранение()

#Область ОписаниеПеременных

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	#Область СохранениеДанных2
	СохрД_ЗагрузитьДанныеАвтосохранения();
	#КонецОбласти
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	#Область СохранениеДанных2
	Если Модифицированность Тогда
		Отказ = Истина;
		Если Не ЗавершениеРаботы Тогда
			СохрД_ЗапроситьСохранениеАсинх(Истина);
		КонецЕсли;
	КонецЕсли;
	#КонецОбласти
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
//
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_Рябов
//
#КонецОбласти

#Область ОбработчикиКомандФормы

#Область СохранениеДанных2

&НаКлиенте
Асинх Процедура СохрД_ОткрытьФайл(Команда)
	Если Не Ждать СохрД_ЗапроситьСохранениеАсинх() Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресДанныхАвтосохранения) Тогда
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Открыть сохраненные данные");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Открыть данные из файла");
		Ответ = Ждать ВопросАсинх("Есть сохраненные данные с прошлого сеанса использования инструмента", Кнопки);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			АдресДанныхАвтосохранения = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресДанныхАвтосохранения) Тогда
		АдресВХ = АдресДанныхАвтосохранения;
	Иначе
		ПараметрыДиалогаПомещенияФайлов = Новый ПараметрыДиалогаПомещенияФайлов;
		ПараметрыДиалогаПомещенияФайлов.МножественныйВыбор = Ложь;
		ПараметрыДиалогаПомещенияФайлов.Фильтр = НСтр("ru='Сохранённые данные Инструментиков (*.xml)|*.xml|Все файлы|*'");
		
		ОписаниеПомещенногоФайла = Ждать ПоместитьФайлНаСерверАсинх(,,, ПараметрыДиалогаПомещенияФайлов, ЭтотОбъект.УникальныйИдентификатор);
		Если ОписаниеПомещенногоФайла = Неопределено Тогда
			Возврат;
		КонецЕсли;
		АдресВХ = ОписаниеПомещенногоФайла.Адрес;
	КонецЕсли;
	
	СохрД_ПрочитатьУниверсальныйПакет(АдресВХ);
КонецПроцедуры

&НаКлиенте
Процедура СохрД_СохранитьФайл(Команда)
	СохрД_СохранитьАсинх();
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СохранениеДанных2

// Формирует XML-файл для сохранения текущих данных и помещает его во временное хранилище
//
// Возвращаемое значение:
//  Строка - Адрес во временном хранилище
&НаСервере
Функция СохрД_СформироватьУниверсальныйПакет()
	ВерсияФормата = 0;
	ИмяИнструмента = "";
	ИмяОбъекта = "";
	ПриОпределенииНастроекИнструментаXDTO(ВерсияФормата, ИмяОбъекта, ИмяИнструмента, Неопределено);
	Если ВерсияФормата = 0 Тогда
		ВызватьИсключение "Не определены настройки инструмента XDTO";
	КонецЕсли;
	
	МодульОбъекта = РеквизитФормыВЗначение("Объект");
	Фабрика = МодульОбъекта.ФабрикаXDTO(ВерсияФормата);
	
	ОбъектХДТО = Фабрика.Создать(Фабрика.Тип("instrumentiki", ИмяОбъекта));
	ПриЗаполненииПакетаXDTO(Фабрика, ОбъектХДТО);
	ОбъектХДТО.Проверить();
	
	АдресВХ = МодульОбъекта.ДанныеВУниверсальныйПакетВХ(ВерсияФормата, ОбъектХДТО, ИмяИнструмента, ЭтотОбъект.УникальныйИдентификатор);
	Возврат АдресВХ;
КонецФункции

// Загружает данные, ранее сохранённые в этом инструменте
//
// Параметры:
//  Адрес - Строка - Адрес файла во временном хранилище
&НаСервере
Процедура СохрД_ПрочитатьУниверсальныйПакет(Адрес)
	МодульОбъекта = РеквизитФормыВЗначение("Объект");
	
	ВерсияФормата = 0;
	ИмяИнструмента = "";
	ИмяОбъекта = "";
	ПриОпределенииНастроекИнструментаXDTO(ВерсияФормата, ИмяОбъекта, ИмяИнструмента, Неопределено);
	
	ДанныеПакета = МодульОбъекта.ДанныеИзУниверсальногоПакетаВХ(Адрес, ИмяОбъекта);
	Если ДанныеПакета.Свойство("Ошибка") Тогда
		Сообщить(ДанныеПакета.Ошибка);
		Возврат;
	КонецЕсли;
	
	ПриЧтенииПакетаXDTO(ДанныеПакета.Объект, ДанныеПакета.ВерсияФормата);
	
	Модифицированность = Ложь;
КонецПроцедуры

&НаСервере
Процедура СохрД_ЗагрузитьДанныеАвтосохранения()
	КлючНастроек = "";
	ИмяОбъекта = "";
	ПриОпределенииНастроекИнструментаXDTO(Неопределено, ИмяОбъекта, Неопределено, КлючНастроек);
	
	МодульОбъекта = РеквизитФормыВЗначение("Объект");
	СохраненныеДанные = МодульОбъекта.СохраненнаяНастройка(КлючНастроек, "ДанныеАвтосохранения");
	
	Если ЗначениеЗаполнено(СохраненныеДанные) Тогда
		АдресВХ = ПоместитьВоВременноеХранилище(СохраненныеДанные, УникальныйИдентификатор);
		
		МодульОбъекта = РеквизитФормыВЗначение("Объект");
		РезультатЧтения = МодульОбъекта.ДанныеИзУниверсальногоПакетаВХ(АдресВХ, ИмяОбъекта);
		
		Если Не РезультатЧтения.Свойство("Ошибка") Тогда
			АдресДанныхАвтосохранения = АдресВХ;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СохрД_ВыполнитьАвтосохранение()
	КлючНастроек = "";
	ПриОпределенииНастроекИнструментаXDTO(Неопределено, Неопределено, Неопределено, КлючНастроек);
	
	АдресПакетаВХ = СохрД_СформироватьУниверсальныйПакет();
	ДанныеПакета = ПолучитьИзВременногоХранилища(АдресПакетаВХ);
	УдалитьИзВременногоХранилища(АдресПакетаВХ);
	
	МодульОбъекта = РеквизитФормыВЗначение("Объект");
	МодульОбъекта.СохранитьНастройку(ключНастроек, "ДанныеАвтосохранения", ДанныеПакета);
	АдресДанныхАвтосохранения = Неопределено;
КонецПроцедуры

// Запрашивает сохранение текущих данных
//
// Параметры:
//  ЗакрытьФорму - Булево - Если Истина, форма будет закрыта после сохранения или отказа от сохранения
//
// Возвращаемое значение:
//  Булево - Разрешить выполнение действия
&НаКлиенте
Асинх Функция СохрД_ЗапроситьСохранениеАсинх(ЗакрытьФорму = Ложь)
	Если Не Модифицированность Тогда
		Возврат Истина;
	КонецЕсли;
	
	Ответ = Ждать ВопросАсинх("Данные были изменены. Сохранить изменения?", РежимДиалогаВопрос.ДаНетОтмена);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Результат = Ждать СохрД_СохранитьАсинх();
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
		Результат = Истина;
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
	Если Результат И ЗакрытьФорму Тогда
		Модифицированность = Ложь;
		ЭтотОбъект.Закрыть();
	КонецЕсли;
	Возврат Результат;
КонецФункции

// Выполняет сохранение данных
//
// Возвращаемое значение:
//  Булево - Данные сохранены. Может быть Ложь, если пользователь отменил сохранение в соответствующих диалогах
&НаКлиенте
Асинх Функция СохрД_СохранитьАсинх()
	ИмяИнструмента = "";
	ПриОпределенииНастроекИнструментаXDTO(Неопределено, Неопределено, ИмяИнструмента, Неопределено);
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		АдресВХ = СохрД_СформироватьУниверсальныйПакет();
		#Если ВебКлиент Тогда
			Ждать ПолучитьФайлССервераАсинх(АдресВХ, ИмяИнструмента + ".xml", Новый ПараметрыДиалогаПолученияФайлов);
		#Иначе
			Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
			Диалог.Фильтр = "Файл сохраняемых данных (*.xml)|*.xml|Все файлы|*";
			ВыбранныеФайлы = Ждать Диалог.ВыбратьАсинх();
			Если ВыбранныеФайлы = Неопределено Тогда
				Возврат Ложь;
			КонецЕсли;
			
			Ждать ПолучитьФайлССервераАсинх(АдресВХ, ВыбранныеФайлы[0]);
		#КонецЕсли
	Исключение
		Ждать ПредупреждениеАсинх(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),, НСтр("ru='Ошибка сохранения данных'"));
	КонецПопытки;
	
	Модифицированность = Ложь;
	Возврат Истина;
КонецФункции

#КонецОбласти

// Процедура, определяющая параметры интеграции инструмента с функциями сохранения данных
//
// Параметры:
//  ВерсияФормата - Число -
//  ИмяОбъекта - Строка - Имя объекта XDTO
//  ИмяИнструмента - Строка - Пользовательское представление названия текущего инструмента
//  КлючНастроек - Строка - Ключ настроек хранилища общих настроек для данных автосохранения
&НаСервереБезКонтекста
Процедура ПриОпределенииНастроекИнструментаXDTO(ВерсияФормата, ИмяОбъекта, ИмяИнструмента, КлючНастроек)
	ВызватьИсключение "_Рябов";
КонецПроцедуры

// Функция формирования пакета XDTO для сохранения в файл
//
// Параметры:
//  Фабрика - ФабрикаXDTO -
//  Пакет - ОбъектXDTO -
//
// Возвращаемое значение:
//  ОбъектXDTO -
&НаСервере
Процедура ПриЗаполненииПакетаXDTO(Фабрика, Пакет)
	ВызватьИсключение "_Рябов";
КонецПроцедуры

// Процедура чтения данных из файла
//
// Параметры:
//  Пакет - ОбъектXDTO -
//  ВерсияФормата - Число -
&НаСервере
Процедура ПриЧтенииПакетаXDTO(Пакет, ВерсияФормата)
	ВызватьИсключение "_Рябов";
КонецПроцедуры

#КонецОбласти
