
// --------------------------------------------------------------------------------
// Copyright (c) 2024 Igor Ryabov (https://github.com/IgorRyaboff/Instrumentiki)
// License: https://github.com/IgorRyaboff/Instrumentiki/blob/main/LICENSE
// --------------------------------------------------------------------------------

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ПараметрыСоединенияСКластером = НовыеПараметрыСоединенияСКластером();
	
	СохраненныеПараметрыСоединенияСКластером = РеквизитФормыВЗначение("Объект").СохраненнаяНастройка("АдминистрированиеСервера", "ПараметрыСоединенияСКластером");
	Если СохраненныеПараметрыСоединенияСКластером <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыСоединенияСКластером, СохраненныеПараметрыСоединенияСКластером);
	КонецЕсли;
	
	НомерТекущегоСеанса = НомерСеансаИнформационнойБазы();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если Объект.ВключенаЗащитаОтОпасныхДействий Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Защита от опасных действий может препятствовать нормальной работе инструмента.
                                       |Отключите защиту от опасных действий и перезапустите сеанс 1С.'")
			,, НСтр("ru='Включена защита от опасных действий'"));
		//
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	НачатьАвторизациюВКластере();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокИнформационныхБаз

&НаКлиенте
Процедура СписокИнформационныхБазПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
	
	Если Копирование Тогда
		
		СтрСписокИБ = Элементы.СписокИнформационныхБаз.ТекущиеДанные;
		НачатьАвторизованноеДействиеСИБ(СтрСписокИБ.Имя, "Скопировать");
		
	Иначе
		
		ОписаниеИБ = НовоеОписаниеИнформационнойБазы();
		
		Контекст = Новый Структура("ЭтоНовая, ПараметрыСоединенияСИБ", Истина, НовыеПараметрыСоединенияСИБ());
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПослеЗакрытияФормыИнформационнойБазы", ЭтотОбъект, Контекст);
		
		ПараметрыФормы = Новый Структура("ОписаниеИнформационнойБазы, ЭтоНовая", ОписаниеИБ, Истина);
		ОткрытьФорму("ВнешняяОбработка.Инструментики.Форма.АдминистрированиеСервера_ИБ", ПараметрыФормы,,,,, ОповещениеОЗавершении);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокИнформационныхБазПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
	
	СтрСписокИБ = Элементы.СписокИнформационныхБаз.ТекущиеДанные;
	Если СтрСписокИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НачатьАвторизованноеДействиеСИБ(СтрСписокИБ.Имя, "Изменить");
КонецПроцедуры

&НаКлиенте
Процедура СписокИнформационныхБазПередУдалением(Элемент, Отказ)
	Отказ = Истина;
	
	СтрСписокИБ = Элементы.СписокИнформационныхБаз.ТекущиеДанные;
	Если СтрСписокИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НачатьАвторизованноеДействиеСИБ(СтрСписокИБ.Имя, "Удалить");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокСеансов

&НаКлиенте
Процедура СписокСеансовПередУдалением(Элемент, Отказ)
	Отказ = Истина;
	
	СтрСеансы = Элемент.ТекущиеДанные;
	Если СтрСеансы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Сеансы = Новый Массив;
	Сеансы.Добавить(Новый Структура("ИмяИБ, ИдентификаторИБ, НомерСеанса", СтрСеансы.ИмяИБ, СтрСеансы.ИдентификаторИБ, СтрСеансы.НомерСеанса));
	УдалитьСеансыАсинх(Сеансы);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновитьСпискиИнтерактивно(Команда)
	ВызватьЗаполнениеСписков();
КонецПроцедуры

&НаКлиенте
Асинх Процедура ПрерватьТекущийСерверныйВызовСеанса(Команда)
	СтрСеансы = Элементы.СписокСеансов.ТекущиеДанные;
	Если СтрСеансы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Сообщение = НСтр("ru='Сеанс работы завершен администратором.'");
	Сообщение = Ждать ВвестиСтрокуАсинх(Сообщение, НСтр("ru='Сообщение пользователю'"));
	Если Не ЗначениеЗаполнено(Сообщение) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеИБ = Новый Структура("ИмяИБ, НомерСеанса, ИдентификаторИБ");
	ЗаполнитьЗначенияСвойств(ДанныеИБ, СтрСеансы);
	
	Состояние(НСтр("ru='Подождите....'"),, НСтр("ru='Выполняется прерывание вызова'"));
	ПрерватьСерверныйВызов(ПараметрыСоединенияСКластером, ДанныеИБ, Сообщение);
	
	ВызватьЗаполнениеСписков();
	
	ПредупреждениеАсинх(НСтр("ru='Серверный вызов успешно прерван'"));
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВсеВыделенныеСеансы(Команда)
	Сеансы = Новый Массив;
	Для Каждого ИдентификаторСтроки Из Элементы.СписокСеансов.ВыделенныеСтроки Цикл
		СтрСеансы = СписокСеансов.НайтиПоИдентификатору(ИдентификаторСтроки);
		Сеансы.Добавить(Новый Структура("ИмяИБ, ИдентификаторИБ, НомерСеанса", СтрСеансы.ИмяИБ, СтрСеансы.ИдентификаторИБ, СтрСеансы.НомерСеанса));
	КонецЦикла;
	
	УдалитьСеансыАсинх(Сеансы);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Конструкторы

// Конструктор параметров соединения с кластером серверов
//
// Возвращаемое значение:
//  Структура:
//  * МетодПодключения - Строка - COM или RAS
//  * АдресАгента - Строка - Адрес агента сервера
//  * ПортАгента - Число -
//  * ЛогинАгента - Строка -
//  * ПарольАгента - Строка -
//  * ПортКластера - Число -
//  * ЛогинКластера - Строка -
//  * ПарольКластера - Строка -
&НаКлиентеНаСервереБезКонтекста
Функция НовыеПараметрыСоединенияСКластером()
	Результат = Новый Структура;
	
	Результат.Вставить("МетодПодключения", "COM");
	
	// BSLLS:UsingHardcodeNetworkAddress-off
	// Неконфиденциальный IP-адрес (локалхост) по умолчанию
	Результат.Вставить("АдресАгента", "127.0.0.1");
	// BSLLS:UsingHardcodeNetworkAddress-on
	Результат.Вставить("ПортАгента", 1540);
	Результат.Вставить("ЛогинАгента", "");
	Результат.Вставить("ПарольАгента", "");
	
	Результат.Вставить("ПортКластера", 1541);
	Результат.Вставить("ЛогинКластера", "");
	Результат.Вставить("ПарольКластера", "");
	
	Возврат Результат;
КонецФункции

// Конструктор описания информационной базы
//
// Возвращаемое значение:
//  Структура:
//  * Имя - Строка -
//  * Описание - Строка -
//  * БлокировкаНачалаСеансов - Булево -
//  * БлокировкаРегламентныхЗаданий - Булево -
//  * ОбязательноеВнешнееУправление - Булево -
//  * РазрешитьВыдачуЛицензийСервером - Булево -
//  * РезервированиеРабочихПроцессов - Булево -
//  * ВнешнееУправлениеСеансами - Строка -
//  * ПрофильБезопасности - Строка -
//  * ПрофильБезопасностиБезопасногоРежима - Строка -
//  * ТипСУБД - Строка -
//  * ИмяБазыСУБД - Строка -
//  * ЛогинСУБД - Строка -
//  * ПарольСУБД - Строка -
//  * СерверСУБД - Строка -
//  * СмещениеДат - Число - "0", либо "2000"
//  * СоздатьБазуДанных - Булево -
//  * НачалоБлокировкиСеансов - Дата -
//  * ОкончаниеБлокировкиСеансов - Дата -
//  * КодРазрешения - Строка -
//  * ПараметрБлокировкиСеансов - Строка -
//  * СообщениеБлокировкиСеансов - Строка -
//  * КодЯзыка - Строка -
//  * ЗащищенноеСоединение - Строка - "Незащищенное", "ПриУстановкеСоединения", либо "Защищенное"
&НаКлиентеНаСервереБезКонтекста
Функция НовоеОписаниеИнформационнойБазы()
	Результат = Новый Структура;
	
	Результат.Вставить("Имя", "");
	Результат.Вставить("Описание", "");
	Результат.Вставить("БлокировкаНачалаСеансов", Ложь);
	Результат.Вставить("БлокировкаРегламентныхЗаданий", Ложь);
	Результат.Вставить("ОбязательноеВнешнееУправление", Ложь);
	Результат.Вставить("РазрешитьВыдачуЛицензийСервером", Истина);
	Результат.Вставить("РезервированиеРабочихПроцессов", Ложь);
	Результат.Вставить("ВнешнееУправлениеСеансами", "");
	Результат.Вставить("ПрофильБезопасности", "");
	Результат.Вставить("ПрофильБезопасностиБезопасногоРежима", "");
	Результат.Вставить("ТипСУБД", "MSSQL");
	Результат.Вставить("ИмяБазыСУБД", "");
	Результат.Вставить("ЛогинСУБД", "");
	Результат.Вставить("ПарольСУБД", "");
	Результат.Вставить("СерверСУБД", "");
	Результат.Вставить("СмещениеДат", 2000);
	Результат.Вставить("СоздатьБазуДанных", Ложь);
	Результат.Вставить("НачалоБлокировкиСеансов", Дата(1, 1, 1));
	Результат.Вставить("ОкончаниеБлокировкиСеансов", Дата(1, 1, 1));
	Результат.Вставить("КодРазрешения", "");
	Результат.Вставить("ПараметрБлокировкиСеансов", "");
	Результат.Вставить("СообщениеБлокировкиСеансов", "");
	Результат.Вставить("КодЯзыка", "ru_RU");
	Результат.Вставить("ЗащищенноеСоединение", "Незащищенное");
	
	Возврат Результат;
КонецФункции

// Констркутор параметров соедиения с информационной базой
//
// Возвращаемое значение:
//  Структура:
//  * Логин - Строка -
//  * Пароль - Строка -
&НаКлиентеНаСервереБезКонтекста
Функция НовыеПараметрыСоединенияСИБ()
	Результат = Новый Структура;
	
	Результат.Вставить("Логин", "");
	Результат.Вставить("Пароль", "");
	
	Возврат Результат;
КонецФункции

#КонецОбласти

// Вызывает форму авторизации в информационной базе и выполняет с ней заданное действие
//
// Параметры:
//  ИмяИБ - Строка - Имя базы в кластере
//  Действие - Строка - "Изменить" - открывает форму изменения параметров ИБ
//                      "Удалить" - вызывает удаление информационной базы
&НаКлиенте
Процедура НачатьАвторизованноеДействиеСИБ(ИмяИБ, Действие)
	Контекст = Новый Структура("ИмяИБ, Действие", ИмяИБ, Действие);
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПослеВводаПараметровСоединенияСИБ", ЭтотОбъект, Контекст);
	
	ПараметрыФормы = Новый Структура("ПараметрыСоединенияСИБ", НовыеПараметрыСоединенияСИБ());
	Если Действие = "Удалить" Тогда
		ПараметрыФормы.Вставить("ЗапрашиваемоеИмяИБ", ИмяИБ);
	КонецЕсли;
	
	ОткрытьФорму("ВнешняяОбработка.Инструментики.Форма.АдминистрированиеСервера_АвторизацияВИБ", ПараметрыФормы,,,,, ОповещениеОЗавершении);
КонецПроцедуры

// Устанавливает соединение с кластером и возвращает соответствующий методу подключения объект
//
// Параметры:
//  ПараметрыСоединенияСКластером - Структура - См. НовыеПараметрыСоединенияСКластером()
//  ДляВыполненияДействийСИБ - Булево - Указывает, что соединение устанавливается для изменения/удаления ИБ
//                             При использовании COM-соединения устанавливает соединение с рабочим процессом
//                             При использовании RAS не влияет на выполнение функции
//
// Возвращаемое значение:
//
//  АдминистрированиеКластер - При методе подключения RAS
//
//  Структура - При методе подключения COM:
//  * Агент - COMОбъект - Объект соединения с агентом сервера
//  * Кластер - COMОбъект - Объект параметров кластера
//  * РабочийПроцесс - COMОбъект, Неопределено - Соединение с рабочим процессом
//                     Заполняется только при установленном параметре ДляВыполненияДействийСИБ
&НаСервереБезКонтекста
Функция СоединениеСКластером(Знач ПараметрыСоединенияСКластером, Знач ДляВыполненияДействийСИБ = Ложь)
	Если ПараметрыСоединенияСКластером.МетодПодключения = "COM" Тогда
		Возврат СоединениеСКластеромCOM(ПараметрыСоединенияСКластером, ДляВыполненияДействийСИБ);
	ИначеЕсли ПараметрыСоединенияСКластером.МетодПодключения = "RAS" Тогда
		Возврат СоединениеСКластеромRAS(ПараметрыСоединенияСКластером, ДляВыполненияДействийСИБ);
	Иначе
		ВызватьИсключение "Некорректный метод подключения " + ПараметрыСоединенияСКластером.МетодПодключения;
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Функция СоединениеСКластеромCOM(ПараметрыСоединенияСКластером, ДляВыполненияДействийСИБ)
	Результат = Новый Структура("Агент, Кластер, РабочийПроцесс");
		
	ПолныйАдресАгента = СтрШаблон("tcp://%1:%2", ПараметрыСоединенияСКластером.АдресАгента, Формат(ПараметрыСоединенияСКластером.ПортАгента, "ЧГ="));
	
	Попытка
		// BSLLS:UsingObjectNotAvailableUnix-off
		// Обеспечен альтернативный кросс-платформенный вариант (RAS)
		Соединитель = Новый COMОбъект("V83.COMConnector");
		// BSLLS:UsingObjectNotAvailableUnix-on
	Исключение
		ВызватьИсключение НСтр("ru = 'При попытке использования COM-соединителя произошла ошибка
                                |'") + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Агент = Соединитель.ConnectAgent(ПолныйАдресАгента);
	Агент.AuthenticateAgent(ПараметрыСоединенияСКластером.ЛогинАгента, ПараметрыСоединенияСКластером.ПарольАгента);
	
	Для Каждого Кластер Из Агент.GetClusters() Цикл
		Если Кластер.MainPort <> ПараметрыСоединенияСКластером.ПортКластера Тогда
			Продолжить;
		КонецЕсли;
		
		Агент.Authenticate(Кластер, ПараметрыСоединенияСКластером.ЛогинКластера, ПараметрыСоединенияСКластером.ПарольКластера);
		
		Результат.Агент = Агент;
		Результат.Кластер = Кластер;
		
		Если ДляВыполненияДействийСИБ Тогда
			РабочиеПроцессы = Агент.GetWorkingProcesses(Кластер);
			Если РабочиеПроцессы.GetLength() = 0 Тогда
				ВызватьИсключение "Не найдено ни одного запущенного рабочего процесса";
			КонецЕсли;
			
			РабочийПроцесс = РабочиеПроцессы.GetValue(0);
			АдресРабочегоПроцесса = СтрШаблон("tcp://%1:%2", РабочийПроцесс.HostName, Формат(РабочийПроцесс.MainPort, "ЧГ="));
			СоединениеСРабочимПроцессом = Соединитель.ConnectWorkingProcess(АдресРабочегоПроцесса);
			СоединениеСРабочимПроцессом.AuthenticateAdmin(ПараметрыСоединенияСКластером.ЛогинКластера, ПараметрыСоединенияСКластером.ПарольКластера);
			Результат.РабочийПроцесс = СоединениеСРабочимПроцессом;
		КонецЕсли;
		
		Возврат Результат;
	КонецЦикла;
	
	ВызватьИсключение "Кластер с заданным портом не найден";
КонецФункции

&НаСервереБезКонтекста
Функция СоединениеСКластеромRAS(ПараметрыСоединенияСКластером, ДляВыполненияДействийСИБ)
	АдминистрированиеСервера = Новый АдминистрированиеСервера(ПараметрыСоединенияСКластером.АдресАгента, ПараметрыСоединенияСКластером.ПортАгента);
	АдминистрированиеСервера.ВыполнитьАутентификацию(ПараметрыСоединенияСКластером.ЛогинАгента, ПараметрыСоединенияСКластером.ПарольАгента);
	
	Для Каждого Кластер Из АдминистрированиеСервера.ПолучитьКластеры() Цикл
		Если Кластер.Порт <> ПараметрыСоединенияСКластером.ПортКластера Тогда
			Продолжить;
		КонецЕсли;
		
		Кластер.ВыполнитьАутентификацию(ПараметрыСоединенияСКластером.ЛогинКластера, ПараметрыСоединенияСКластером.ПарольКластера);
		Возврат Кластер;
	КонецЦикла;
	
	ВызватьИсключение "Кластер с заданным портом не найден";
КонецФункции

&НаСервереБезКонтекста
Функция ОбъектИнформационнойБазы(Знач ПараметрыСоединенияСКластером, Знач СоединениеСКластером, Знач ПараметрыСоединенияСИБ, Знач ИмяИБ)
	Если ПараметрыСоединенияСКластером.МетодПодключения = "COM" Тогда
		СоединениеСКластером.РабочийПроцесс.AddAuthentication(ПараметрыСоединенияСИБ.Логин, ПараметрыСоединенияСИБ.Пароль);
		Для Каждого ИБ Из СоединениеСКластером.РабочийПроцесс.GetInfoBases() Цикл
			Если ВРег(ИБ.Name) <> ВРег(ИмяИБ) Тогда
				Продолжить;
			КонецЕсли;
			Возврат ИБ;
		КонецЦикла;
	ИначеЕсли ПараметрыСоединенияСКластером.МетодПодключения = "RAS" Тогда
		Для Каждого ИБ Из СоединениеСКластером.ПолучитьИнформационныеБазы() Цикл
			Если ВРег(ИБ.Имя) <> ВРег(ИмяИБ) Тогда
				Продолжить;
			КонецЕсли;
			
			ИБ.ВыполнитьАутентификацию(ПараметрыСоединенияСИБ.Логин, ПараметрыСоединенияСИБ.Пароль);
			Возврат ИБ;
		КонецЦикла;
		ВызватьИсключение "ИБ не найдена";
	Иначе
		ВызватьИсключение "Некорректный метод подключения " + ПараметрыСоединенияСКластером.МетодПодключения;
	КонецЕсли;
КонецФункции

//
// Возвращаемое значение:
//  Структура:
//  * ОписаниеИБ - Структура - См. НовоеОписаниеИнформационнойБазы()
//  * ИменаПрофилейБезопасности - Массив - Массив имен (Строка) профилей безопасности кластера
&НаСервереБезКонтекста
Функция ДанныеДляИзмененияСуществующейИБ(Знач ПараметрыСоединенияСКластером, Знач ПараметрыСоединенияСИБ, Знач ИмяИнформационнойБазы)
	СоединениеСКластером = СоединениеСКластером(ПараметрыСоединенияСКластером, Истина);
	ИБ = ОбъектИнформационнойБазы(ПараметрыСоединенияСКластером, СоединениеСКластером, ПараметрыСоединенияСИБ, ИмяИнформационнойБазы);
	
	ОписаниеИБ = НовоеОписаниеИнформационнойБазы();
	ИменаПрофилейБезопасности = Новый Массив;
	Результат = Новый Структура("ОписаниеИБ, ИменаПрофилейБезопасности", ОписаниеИБ, ИменаПрофилейБезопасности);
	
	Если ПараметрыСоединенияСКластером.МетодПодключения = "COM" Тогда
		ОписаниеИБ.Имя = ИБ.Name;
		ОписаниеИБ.Описание = ИБ.Descr;
		ОписаниеИБ.БлокировкаНачалаСеансов = ИБ.SessionsDenied;
		ОписаниеИБ.БлокировкаРегламентныхЗаданий = ИБ.ScheduledJobsDenied;
		ОписаниеИБ.ОбязательноеВнешнееУправление = ИБ.ExternalSessionManagerRequired;
		ОписаниеИБ.РазрешитьВыдачуЛицензийСервером = ИБ.LicenseDistributionAllowed;
		// Результат.РезервированиеРабочихПроцессов = ИБ.РезервированиеРабочихПроцессов;
		ОписаниеИБ.ВнешнееУправлениеСеансами = ИБ.ExternalSessionManagerConnectionString;
		ОписаниеИБ.ПрофильБезопасности = ИБ.SecurityProfileName;
		ОписаниеИБ.ПрофильБезопасностиБезопасногоРежима = ИБ.SafeModeSecurityProfileName;
		ОписаниеИБ.ТипСУБД = ИБ.DBMS;
		ОписаниеИБ.ИмяБазыСУБД = ИБ.dbName;
		ОписаниеИБ.ЛогинСУБД = ИБ.dbUser;
		ОписаниеИБ.ПарольСУБД = ИБ.dbPassword;
		ОписаниеИБ.СерверСУБД = ИБ.dbServerName;
		ОписаниеИБ.НачалоБлокировкиСеансов = ИБ.DeniedFrom;
		ОписаниеИБ.ОкончаниеБлокировкиСеансов = ИБ.DeniedTo;
		ОписаниеИБ.КодРазрешения = ИБ.PermissionCode;
		ОписаниеИБ.ПараметрБлокировкиСеансов = ИБ.DeniedParameter;
		ОписаниеИБ.СообщениеБлокировкиСеансов = ИБ.DeniedMessage;
		ОписаниеИБ.ЗащищенноеСоединение = ЗначениеЗащищенногоСоединенияИзCOM(ИБ.SecurityLevel);
		
		Для Каждого ПрофильБезопасности Из СоединениеСКластером.Агент.GetSecurityProfiles(СоединениеСКластером.Кластер) Цикл
			ИменаПрофилейБезопасности.Добавить(ПрофильБезопасности.Name);
		КонецЦикла;
		
		Возврат Результат;
	ИначеЕсли ПараметрыСоединенияСКластером.МетодПодключения = "RAS" Тогда
		ОписаниеИБ.Имя = ИБ.Имя;
		ОписаниеИБ.Описание = ИБ.Описание;
		ОписаниеИБ.БлокировкаНачалаСеансов = ИБ.ВключенаБлокировкаНачалаСеансов;
		ОписаниеИБ.БлокировкаРегламентныхЗаданий = ИБ.БлокировкаРегламентныхЗаданий;
		ОписаниеИБ.ОбязательноеВнешнееУправление = ИБ.ОбязательноеИспользованиеВнешнегоУправленияСеансами;
		ОписаниеИБ.РазрешитьВыдачуЛицензийСервером = ИБ.РазрешитьВыдачуЛицензий;
		ОписаниеИБ.РезервированиеРабочихПроцессов = ИБ.РезервированиеРабочихПроцессов;
		ОписаниеИБ.ВнешнееУправлениеСеансами = ИБ.СтрокаПараметровВнешнегоУправленияСеансами;
		ОписаниеИБ.ПрофильБезопасности = ИБ.ПрофильБезопасности;
		ОписаниеИБ.ПрофильБезопасностиБезопасногоРежима = ИБ.ПрофильБезопасностиБезопасногоРежима;
		ОписаниеИБ.ТипСУБД = ИБ.СУБД;
		ОписаниеИБ.ИмяБазыСУБД = ИБ.ИмяБазыДанных;
		ОписаниеИБ.ЛогинСУБД = ИБ.ПользовательБазыДанных;
		ОписаниеИБ.ПарольСУБД = ИБ.ПарольПользователяБазыДанных;
		ОписаниеИБ.СерверСУБД = ИБ.СерверБазДанных;
		ОписаниеИБ.НачалоБлокировкиСеансов = ИБ.ВремяНачалаБлокировки;
		ОписаниеИБ.ОкончаниеБлокировкиСеансов = ИБ.ВремяОкончанияБлокировки;
		ОписаниеИБ.КодРазрешения = ИБ.КодРазрешенияНачалаСеансов;
		ОписаниеИБ.ПараметрБлокировкиСеансов = ИБ.ПараметрБлокировки;
		ОписаниеИБ.СообщениеБлокировкиСеансов = ИБ.СообщениеБлокировки;
		ОписаниеИБ.ЗащищенноеСоединение = ЗначениеЗащищенногоСоединенияИзRAS(ИБ.УровеньБезопасностиСоединений);
		
		Для Каждого ПрофильБезопасности Из СоединениеСКластером.ПолучитьПрофилиБезопасности() Цикл
			ИменаПрофилейБезопасности.Добавить(ПрофильБезопасности.Имя);
		КонецЦикла;
		
		Возврат Результат;
	Иначе
		ВызватьИсключение "Некорректный метод подключения " + ПараметрыСоединенияСКластером.МетодПодключения;
	КонецЕсли;
КонецФункции

// Конвертирует значение системного перечисления в строку для структуры описания информационной базы
//
// Параметры:
//  УровеньБезопасностиСоединений - АдминистрированиеУровеньБезопасностиСоединений -
//
// Возвращаемое значение:
//  Строка -
&НаСервереБезКонтекста
Функция ЗначениеЗащищенногоСоединенияИзRAS(УровеньБезопасностиСоединений)
	Соответствие = Новый Соответствие;
	
	Соответствие.Вставить(АдминистрированиеУровеньБезопасностиСоединений.Незащищенное, "Незащищенное");
	Соответствие.Вставить(АдминистрированиеУровеньБезопасностиСоединений.ЗащищенноеПриУстановкеСоединения, "ПриУстановкеСоединения");
	Соответствие.Вставить(АдминистрированиеУровеньБезопасностиСоединений.Защищенное, "Защищенное");
	
	Возврат Соответствие[УровеньБезопасностиСоединений];
КонецФункции

// Конвертирует значение защищенного соединения для установки в АдминистрированиеИнформационнаяБаза
//
// Параметры:
//  УровеньБезопасностиСоединений - Строка -
//
// Возвращаемое значение:
//  АдминистрированиеУровеньБезопасностиСоединений -
&НаСервереБезКонтекста
Функция ЗначениеЗащищенногоСоединенияВRAS(УровеньБезопасностиСоединений)
	Соответствие = Новый Соответствие;
	
	Соответствие.Вставить("Незащищенное", АдминистрированиеУровеньБезопасностиСоединений.Незащищенное);
	Соответствие.Вставить("ПриУстановкеСоединения", АдминистрированиеУровеньБезопасностиСоединений.ЗащищенноеПриУстановкеСоединения);
	Соответствие.Вставить("Защищенное", АдминистрированиеУровеньБезопасностиСоединений.Защищенное);
	
	Возврат Соответствие[УровеньБезопасностиСоединений];
КонецФункции

// Конвертирует значение системного перечисления в строку для структуры описания информационной базы
//
// Параметры:
//  УровеньБезопасностиСоединений - Число -
//
// Возвращаемое значение:
//  Строка -
&НаСервереБезКонтекста
Функция ЗначениеЗащищенногоСоединенияИзCOM(УровеньБезопасностиСоединений)
	Соответствие = Новый Соответствие;
	
	Соответствие.Вставить(0, "Незащищенное");
	Соответствие.Вставить(1, "ПриУстановкеСоединения");
	Соответствие.Вставить(2, "Защищенное");
	
	Возврат Соответствие[УровеньБезопасностиСоединений];
КонецФункции

// Конвертирует значение защищенного соединения для установки в объект информационной базы COM-соединения
//
// Параметры:
//  УровеньБезопасностиСоединений - Строка -
//
// Возвращаемое значение:
//  Число -
&НаСервереБезКонтекста
Функция ЗначениеЗащищенногоСоединенияВCOM(УровеньБезопасностиСоединений)
	Соответствие = Новый Соответствие;
	
	Соответствие.Вставить("Незащищенное", 0);
	Соответствие.Вставить("ПриУстановкеСоединения", 1);
	Соответствие.Вставить("Защищенное", 2);
	
	Возврат Соответствие[УровеньБезопасностиСоединений];
КонецФункции

&НаКлиенте
Асинх Процедура ПослеВводаПараметровАдминистрированияКластера(НовыеПараметрыСоединенияСКластером, ДополнительныеПараметры) Экспорт
	Если НовыеПараметрыСоединенияСКластером = Неопределено Тогда
		Закрыть();
		Возврат;
	КонецЕсли;
	
	ПараметрыСоединенияСКластером = НовыеПараметрыСоединенияСКластером;
	
	Попытка
		ВызватьЗаполнениеСписков(Истина);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		Ждать ПредупреждениеАсинх(КраткоеПредставлениеОшибки(ИнформацияОбОшибке),, НСтр("ru='Ошибка подключения к кластеру'"));
		НачатьАвторизациюВКластере();
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ВызватьЗаполнениеСписков(СохранитьПараметрыСоединенияСКластером = Ложь)
	РанееВыбраннаяИБ = Неопределено;
	Если Элементы.СписокИнформационныхБаз.ТекущиеДанные <> Неопределено Тогда
		РанееВыбраннаяИБ = Элементы.СписокИнформационныхБаз.ТекущиеДанные.Имя;
	КонецЕсли;
	
	РанееВыбранныйСеанс = Неопределено;
	Если Элементы.СписокСеансов.ТекущиеДанные <> Неопределено Тогда
		СтрСеансы = Элементы.СписокСеансов.ТекущиеДанные;
		РанееВыбранныйСеанс = Новый Структура("ИмяИБ, НомерСеанса", СтрСеансы.ИмяИБ, СтрСеансы.НомерСеанса);
	КонецЕсли;
	
	Состояние(НСтр("ru='Подождите...'"),, НСтр("ru='Заполнение списков баз и сеансов'"));
	ЗаполнитьСпискиНаСервере(СохранитьПараметрыСоединенияСКластером);
	Состояние();
	
	Если РанееВыбраннаяИБ <> Неопределено Тогда
		НайденныеСтроки = СписокИнформационныхБаз.НайтиСтроки(Новый Структура("Имя", РанееВыбраннаяИБ));
		Если НайденныеСтроки.Количество() = 1 Тогда
			Элементы.СписокИнформационныхБаз.ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
	Если РанееВыбранныйСеанс <> Неопределено Тогда
		НайденныеСтроки = СписокСеансов.НайтиСтроки(РанееВыбранныйСеанс);
		Если НайденныеСтроки.Количество() = 1 Тогда
			Элементы.СписокСеансов.ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСпискиНаСервере(Знач СохранитьПараметрыСоединенияСКластером = Ложь)
	СписокИнформационныхБаз.Очистить();
	СписокСеансов.Очистить();
	
	СоединениеСКластером = СоединениеСКластером(ПараметрыСоединенияСКластером);
	
	Если ПараметрыСоединенияСКластером.МетодПодключения = "COM" Тогда
		ЗаполнитьСпискиCOM(СоединениеСКластером);
	ИначеЕсли ПараметрыСоединенияСКластером.МетодПодключения = "RAS" Тогда
		ЗаполнитьСпискиRAS(СоединениеСКластером);
	Иначе
		ВызватьИсключение "Некорректный метод подключения " + ПараметрыСоединенияСКластером.МетодПодключения;
	КонецЕсли;
	
	СписокИнформационныхБаз.Сортировать("Имя");
	СписокСеансов.Сортировать("ИмяИБ, ИмяПользователя, ДатаНачала");
	
	Если СохранитьПараметрыСоединенияСКластером И ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
		КопияПараметров = НовыеПараметрыСоединенияСКластером();
		ЗаполнитьЗначенияСвойств(КопияПараметров, ПараметрыСоединенияСКластером,, "ПарольАгента, ПарольКластера");
		РеквизитФормыВЗначение("Объект").СохранитьНастройку("АдминистрированиеСервера",
			"ПараметрыСоединенияСКластером", КопияПараметров);
		//
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСпискиCOM(СоединениеСКластером)
	Для Каждого ОписаниеИБ Из СоединениеСКластером.Агент.GetInfoBases(СоединениеСКластером.Кластер) Цикл
		СтрИБ = СписокИнформационныхБаз.Добавить();
		СтрИБ.Имя = ОписаниеИБ.Name;
		СтрИБ.Описание = ОписаниеИБ.Descr;
	КонецЦикла;
	
	Для Каждого ОписаниеСеанса Из СоединениеСКластером.Агент.GetSessions(СоединениеСКластером.Кластер) Цикл
		СтрСеансы = СписокСеансов.Добавить();
		СтрСеансы.ИмяИБ = ОписаниеСеанса.InfoBase.Name;
		СтрСеансы.НомерСеанса = ОписаниеСеанса.SessionID;
		СтрСеансы.ИмяПользователя = ОписаниеСеанса.UserName;
		СтрСеансы.Приложение = ОписаниеСеанса.AppID;
		СтрСеансы.ДатаНачала = ОписаниеСеанса.StartedAt;
		
		Если ОписаниеСеанса.License <> Неопределено Тогда
			СтрСеансы.Лицензия = ОписаниеСеанса.License.FullPresentation;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСпискиRAS(СоединениеСКластером)
	ИменаИБПоИдентификаторам = Новый Соответствие;
		
	Для Каждого ОписаниеИБ Из СоединениеСКластером.ПолучитьИнформационныеБазы() Цикл
		СтрИБ = СписокИнформационныхБаз.Добавить();
		СтрИБ.Имя = ОписаниеИБ.Имя;
		СтрИБ.Описание = ОписаниеИБ.Описание;
		СтрИБ.Идентификатор = ОписаниеИБ.ИдентификаторИнформационнойБазы;
		
		ИменаИБПоИдентификаторам.Вставить(ОписаниеИБ.ИдентификаторИнформационнойБазы, ОписаниеИБ.Имя);
	КонецЦикла;
	
	Для Каждого ОписаниеСеанса Из СоединениеСКластером.ПолучитьСеансы() Цикл
		СтрСеансы = СписокСеансов.Добавить();
		СтрСеансы.ИмяИБ = ИменаИБПоИдентификаторам[ОписаниеСеанса.ИдентификаторИнформационнойБазы];
		СтрСеансы.ИдентификаторИБ = ОписаниеСеанса.ИдентификаторИнформационнойБазы;
		СтрСеансы.НомерСеанса = ОписаниеСеанса.НомерСеанса;
		СтрСеансы.ИмяПользователя = ОписаниеСеанса.ИмяПользователя;
		СтрСеансы.Приложение = ОписаниеСеанса.ИмяПриложения;
		СтрСеансы.ДатаНачала = ОписаниеСеанса.ВремяНачала;
		
		Если ОписаниеСеанса.Лицензии.Количество() = 1 Тогда
			СтрСеансы.Лицензия = ОписаниеСеанса.Лицензии[0].ПодробноеПредставление;
		ИначеЕсли ОписаниеСеанса.Лицензии.Количество() > 1 Тогда
			СтрСеансы.Лицензия = НСтр("ru='<несколько лицензий>'");
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Обработчик закрытия формы АдминистрированиеСервера_АвторизацияВИБ
//
// Параметры:
//  ПараметрыСоединенияСИБ - Структура, Неопределено - См. НовыеПараметрыСоединенияСИБ()
//  Контекст - Структура:
//  * ИмяИБ - Строка - Имя информационной базы в кластере
//  * Действие - Строка - "Изменить" или "Удалить"
&НаКлиенте
Асинх Процедура ПослеВводаПараметровСоединенияСИБ(ПараметрыСоединенияСИБ, Контекст) Экспорт
	Если ПараметрыСоединенияСИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Контекст.Действие = "Изменить" Или Контекст.Действие = "Скопировать" Тогда
		Состояние(НСтр("ru='Подождите...'"),, НСтр("ru='Получение текущих параметров ИБ'"));
		
		ДанныеДляИзмененияИБ = Неопределено;
		Попытка
			ДанныеДляИзмененияИБ = ДанныеДляИзмененияСуществующейИБ(ПараметрыСоединенияСКластером, ПараметрыСоединенияСИБ, Контекст.ИмяИБ);
			Если Не ЗначениеЗаполнено(ДанныеДляИзмененияИБ.ОписаниеИБ.ТипСУБД) Тогда
				// Не удалась авторизация, нет полных данных об информационной базе
				ВызватьИсключение НСтр("ru='Имя пользователя или пароль администратора ИБ неверны'");
			КонецЕсли;
		Исключение
			Ждать ПредупреждениеАсинх(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),, НСтр("ru='Ошибка получения информации об информационной базе'"));
			НачатьАвторизованноеДействиеСИБ(Контекст.ИмяИБ, Контекст.Действие);
			Возврат;
		КонецПопытки;
		Состояние();
		
		ЭтоНовая = (Контекст.Действие = "Скопировать");
		
		Если ЭтоНовая Тогда
			ДанныеДляИзмененияИБ.ОписаниеИБ.Имя = "";
			ДанныеДляИзмененияИБ.ОписаниеИБ.Описание = "";
			ДанныеДляИзмененияИБ.ОписаниеИБ.ПарольСУБД = "";
			
			ДанныеДляИзмененияИБ.ОписаниеИБ.БлокировкаНачалаСеансов = Ложь;
			ДанныеДляИзмененияИБ.ОписаниеИБ.НачалоБлокировкиСеансов = Дата(1, 1, 1);
			ДанныеДляИзмененияИБ.ОписаниеИБ.ОкончаниеБлокировкиСеансов = Дата(1, 1, 1);
			ДанныеДляИзмененияИБ.ОписаниеИБ.КодРазрешения = "";
			ДанныеДляИзмененияИБ.ОписаниеИБ.ПараметрБлокировкиСеансов = "";
			ДанныеДляИзмененияИБ.ОписаниеИБ.СообщениеБлокировкиСеансов = "";
		КонецЕсли;
		
		НовыйКонтекст = Новый Структура("ЭтоНовая, ПараметрыСоединенияСИБ", ЭтоНовая, ПараметрыСоединенияСИБ);
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПослеЗакрытияФормыИнформационнойБазы", ЭтотОбъект, НовыйКонтекст);
		
		ПараметрыФормы = Новый Структура("ОписаниеИнформационнойБазы, ЭтоНовая, ИменаПрофилейБезопасности", ДанныеДляИзмененияИБ.ОписаниеИБ, ЭтоНовая, ДанныеДляИзмененияИБ.ИменаПрофилейБезопасности);
		ОткрытьФорму("ВнешняяОбработка.Инструментики.Форма.АдминистрированиеСервера_ИБ", ПараметрыФормы,,,,, ОповещениеОЗавершении);
	ИначеЕсли Контекст.Действие = "Удалить" Тогда
		ВызватьУдалениеИБАсинх(Контекст.ИмяИБ, ПараметрыСоединенияСИБ);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Асинх Процедура ВызватьУдалениеИБАсинх(ИмяИБ, ПараметрыСоединенияСИБ)
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить("Оставить", НСтр("ru='Оставить без изменений'"));
	Кнопки.Добавить("Очистить", НСтр("ru='Очистить'"));
	Кнопки.Добавить("Удалить", НСтр("ru='Удалить вместе с ИБ'"));
	Кнопки.Добавить(КодВозвратаДиалога.Отмена);
	ДействиеСБазойДанных = Ждать ВопросАсинх(НСтр("ru='Что делать с базой данных?'"), Кнопки,, КодВозвратаДиалога.Отмена);
	Если ДействиеСБазойДанных = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Состояние(НСтр("ru='Подождите...'"),, НСтр("ru='Удаление информационной базы'"));
	Попытка
		УдалитьИБНаСервере(ПараметрыСоединенияСКластером, ИмяИБ, ПараметрыСоединенияСИБ, ДействиеСБазойДанных);
	Исключение
		ШапкаПредупреждения = НСтр("ru='При удалении ИБ возникла ошибка. В некоторых случаях (при ошибках удаления/очистки связанной с ИБ базы данных) информационная база все-таки удаляется. Если база осталась в списке, повторите действие'");
		Ждать ПредупреждениеАсинх(ШапкаПредупреждения + Символы.ПС + Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	ВызватьЗаполнениеСписков();
КонецПроцедуры

// Выполняет удаление базы из кластера
//
// Параметры:
//  ПараметрыСоединенияСКластером - Структура - См. НовыеПараметрыСоединенияСКластером()
//  ИмяИБ - Строка - Имя удаляемой ИБ в кластере
//  ПараметрыСоединенияСИБ - Структура - См. НовыеПараметрыСоединенияСИБ()
//  ДействиеСБазойДанных - Строка - Режим удаления информационной базы
//                         "Оставить" - не выполнять с базой данных никаких действий, только удаление ИБ в кластере
//                         "Очистить" - оставить базу пустой, удалить из нее все содержимое
//                         "Удалить" - полностью удалить базу данных вместе с базой в кластере
&НаСервереБезКонтекста
Процедура УдалитьИБНаСервере(Знач ПараметрыСоединенияСКластером, Знач ИмяИБ, Знач ПараметрыСоединенияСИБ, Знач ДействиеСБазойДанных)
	СоединениеСКластером = СоединениеСКластером(ПараметрыСоединенияСКластером, Истина);
	ИБ = ОбъектИнформационнойБазы(ПараметрыСоединенияСКластером, СоединениеСКластером, ПараметрыСоединенияСИБ, ИмяИБ);
	
	Результат = НовоеОписаниеИнформационнойБазы();
	
	Если ПараметрыСоединенияСКластером.МетодПодключения = "COM" Тогда
		СоответствиеРежимаУдаленияБД = Новый Соответствие;
			
		СоответствиеРежимаУдаленияБД.Вставить("Оставить", 0);
		СоответствиеРежимаУдаленияБД.Вставить("Очистить", 2);
		СоответствиеРежимаУдаленияБД.Вставить("Удалить", 1);
		
		СоединениеСКластером.РабочийПроцесс.DropInfoBase(ИБ, СоответствиеРежимаУдаленияБД[ДействиеСБазойДанных]);
	ИначеЕсли ПараметрыСоединенияСКластером.МетодПодключения = "RAS" Тогда
		СоответствиеРежимаУдаленияБД = Новый Соответствие;
			
		СоответствиеРежимаУдаленияБД.Вставить("Оставить", АдминистрированиеРежимУдаленияИнформационнойБазы.НеВыполнятьДействийСБазойДанных);
		СоответствиеРежимаУдаленияБД.Вставить("Очистить", АдминистрированиеРежимУдаленияИнформационнойБазы.ОчиститьБазуДанных);
		СоответствиеРежимаУдаленияБД.Вставить("Удалить", АдминистрированиеРежимУдаленияИнформационнойБазы.УдалитьБазуДанных);
		
		ИБ.Удалить(СоответствиеРежимаУдаленияБД[ДействиеСБазойДанных]);
	Иначе
		ВызватьИсключение "Некорректный метод подключения " + ПараметрыСоединенияСКластером.МетодПодключения;
	КонецЕсли;
КонецПроцедуры

// Обработчик закрытия формы АдминистрированиеСервера_ИБ
//
// Параметры:
//  ОписаниеИнформационнойБазы - Структура, Неопределено - См. НовоеОписаниеИнформационнойБазы()
//  Контекст - Структура:
//   ЭтоНовая - Булево - Истина - добавляется новая ИБ, Ложь - изменяется существующая
//   ПараметрыСоединенияСИБ - Структура - См. НовыеПараметрыСоединенияСИБ
&НаКлиенте
Асинх Процедура ПослеЗакрытияФормыИнформационнойБазы(ОписаниеИнформационнойБазы, Контекст) Экспорт
	Если ОписаниеИнформационнойБазы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Пояснение = ?(Контекст.ЭтоНовая, НСтр("ru='Создание информационной базы'"), НСтр("ru='Сохранение параметров информационной базы'"));
	Состояние(НСтр("ru='Подождите...'"),, Пояснение);
	Попытка
		ЗаписатьИнформационнуюБазу(ПараметрыСоединенияСКластером, Контекст.ПараметрыСоединенияСИБ, ОписаниеИнформационнойБазы, Контекст.ЭтоНовая);
	Исключение
		Ждать ПредупреждениеАсинх(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),, НСтр("ru='Ошибка при записи информационной базы'"));
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПослеЗакрытияФормыИнформационнойБазы", ЭтотОбъект, Контекст);
		
		ПараметрыФормы = Новый Структура("ОписаниеИнформационнойБазы, ЭтоНовая", ОписаниеИнформационнойБазы, Контекст.ЭтоНовая);
		ОткрытьФорму("ВнешняяОбработка.Инструментики.Форма.АдминистрированиеСервера_ИБ", ПараметрыФормы,,,,, ОповещениеОЗавершении);
		Возврат;
	КонецПопытки;
	Состояние();
	
	Если Контекст.ЭтоНовая Тогда
		ВызватьЗаполнениеСписков();
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьИнформационнуюБазу(Знач ПараметрыСоединенияСКластером, Знач ПараметрыСоединенияСИБ, Знач ОписаниеИнформационнойБазы, Знач ЭтоНовая)
	СоединениеСКластером = СоединениеСКластером(ПараметрыСоединенияСКластером, Истина);
	
	ИБ = Неопределено;
	Если Не ЭтоНовая Тогда
		ИБ = ОбъектИнформационнойБазы(ПараметрыСоединенияСКластером, СоединениеСКластером, ПараметрыСоединенияСИБ, ОписаниеИнформационнойБазы.Имя);
	КонецЕсли;
	
	Если ПараметрыСоединенияСКластером.МетодПодключения = "COM" Тогда
		ЗаписатьИнформационнуюБазуCOM(СоединениеСКластером, ОписаниеИнформационнойБазы, ЭтоНовая, ИБ);
	ИначеЕсли ПараметрыСоединенияСКластером.МетодПодключения = "RAS" Тогда
		ЗаписатьИнформационнуюБазуRAS(СоединениеСКластером, ОписаниеИнформационнойБазы, ЭтоНовая, ИБ);
	Иначе
		ВызватьИсключение "Некорректный метод подключения " + ПараметрыСоединенияСКластером.МетодПодключения;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьИнформационнуюБазуCOM(СоединениеСКластером, ОписаниеИнформационнойБазы, ЭтоНовая, ИБ)
	Если ЭтоНовая Тогда
		ИБ = СоединениеСКластером.РабочийПроцесс.CreateInfoBaseInfo();
	КонецЕсли;
	
	ИБ.Descr = ОписаниеИнформационнойБазы.Описание;
	ИБ.ScheduledJobsDenied = ОписаниеИнформационнойБазы.БлокировкаРегламентныхЗаданий;
	ИБ.ExternalSessionManagerRequired = ОписаниеИнформационнойБазы.ОбязательноеВнешнееУправление;
	ИБ.LicenseDistributionAllowed = ?(ОписаниеИнформационнойБазы.РазрешитьВыдачуЛицензийСервером, 1, 0);
	ИБ.ExternalSessionManagerConnectionString = ОписаниеИнформационнойБазы.ВнешнееУправлениеСеансами;
	ИБ.SecurityProfileName = ОписаниеИнформационнойБазы.ПрофильБезопасности;
	ИБ.SafeModeSecurityProfileName = ОписаниеИнформационнойБазы.ПрофильБезопасностиБезопасногоРежима;
	ИБ.DBMS = ОписаниеИнформационнойБазы.ТипСУБД;
	ИБ.dbName = ОписаниеИнформационнойБазы.ИмяБазыСУБД;
	ИБ.dbUser = ОписаниеИнформационнойБазы.ЛогинСУБД;
	ИБ.dbPassword = ОписаниеИнформационнойБазы.ПарольСУБД;
	ИБ.dbServerName = ОписаниеИнформационнойБазы.СерверСУБД;
	
	Если ЭтоНовая Тогда
		ИБ.Name = ОписаниеИнформационнойБазы.Имя;
		ИБ.Locale = ОписаниеИнформационнойБазы.КодЯзыка;
		ИБ.SecurityLevel = ЗначениеЗащищенногоСоединенияВCOM(ОписаниеИнформационнойБазы.ЗащищенноеСоединение);
		
		Если ОписаниеИнформационнойБазы.ТипСУБД = "MSSQLServer" Тогда
			ИБ.DateOffset = ОписаниеИнформационнойБазы.СмещениеДат;
		КонецЕсли;
		
		СоздатьБД = ?(ОписаниеИнформационнойБазы.СоздатьБазуДанных, 1, 0);
		СоединениеСКластером.РабочийПроцесс.CreateInfoBase(ИБ, СоздатьБД);
	Иначе
		ИБ.SessionsDenied = ОписаниеИнформационнойБазы.БлокировкаНачалаСеансов;
		ИБ.DeniedFrom = ОписаниеИнформационнойБазы.НачалоБлокировкиСеансов;
		ИБ.DeniedTo = ОписаниеИнформационнойБазы.ОкончаниеБлокировкиСеансов;
		ИБ.PermissionCode = ОписаниеИнформационнойБазы.КодРазрешения;
		ИБ.DeniedParameter = ОписаниеИнформационнойБазы.ПараметрБлокировкиСеансов;
		ИБ.DeniedMessage = ОписаниеИнформационнойБазы.СообщениеБлокировкиСеансов;
		
		СоединениеСКластером.РабочийПроцесс.UpdateInfoBase(ИБ);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьИнформационнуюБазуRAS(СоединениеСКластером, ОписаниеИнформационнойБазы, ЭтоНовая, ИБ)
	Если ЭтоНовая Тогда
		ИБ = СоединениеСКластером.СоздатьИнформационнуюБазу();
	КонецЕсли;
	
	ИБ.Описание = ОписаниеИнформационнойБазы.Описание;
	ИБ.БлокировкаРегламентныхЗаданий = ОписаниеИнформационнойБазы.БлокировкаРегламентныхЗаданий;
	ИБ.ОбязательноеИспользованиеВнешнегоУправленияСеансами = ОписаниеИнформационнойБазы.ОбязательноеВнешнееУправление;
	ИБ.РазрешитьВыдачуЛицензий = ОписаниеИнформационнойБазы.РазрешитьВыдачуЛицензийСервером;
	ИБ.РезервированиеРабочихПроцессов = ОписаниеИнформационнойБазы.РезервированиеРабочихПроцессов;
	ИБ.СтрокаПараметровВнешнегоУправленияСеансами = ОписаниеИнформационнойБазы.ВнешнееУправлениеСеансами;
	ИБ.ПрофильБезопасности = ОписаниеИнформационнойБазы.ПрофильБезопасности;
	ИБ.ПрофильБезопасностиБезопасногоРежима = ОписаниеИнформационнойБазы.ПрофильБезопасностиБезопасногоРежима;
	ИБ.СУБД = ОписаниеИнформационнойБазы.ТипСУБД;
	ИБ.ИмяБазыДанных = ОписаниеИнформационнойБазы.ИмяБазыСУБД;
	ИБ.ПользовательБазыДанных = ОписаниеИнформационнойБазы.ЛогинСУБД;
	ИБ.ПарольПользователяБазыДанных = ОписаниеИнформационнойБазы.ПарольСУБД;
	ИБ.СерверБазДанных = ОписаниеИнформационнойБазы.СерверСУБД;
	
	Если ЭтоНовая Тогда
		ИБ.Имя = ОписаниеИнформационнойБазы.Имя;
		ИБ.СоздатьБазуДанных = ОписаниеИнформационнойБазы.СоздатьБазуДанных;
		ИБ.КодЯзыка = ОписаниеИнформационнойБазы.КодЯзыка;
		ИБ.УровеньБезопасностиСоединений = ЗначениеЗащищенногоСоединенияВRAS(ОписаниеИнформационнойБазы.ЗащищенноеСоединение);
		
		Если ОписаниеИнформационнойБазы.ТипСУБД = "MSSQLServer" Тогда
			ИБ.СмещениеДат = ОписаниеИнформационнойБазы.СмещениеДат;
		КонецЕсли;
	Иначе
		ИБ.ВключенаБлокировкаНачалаСеансов = ОписаниеИнформационнойБазы.БлокировкаНачалаСеансов;
		ИБ.ВремяНачалаБлокировки = ОписаниеИнформационнойБазы.НачалоБлокировкиСеансов;
		ИБ.ВремяОкончанияБлокировки = ОписаниеИнформационнойБазы.ОкончаниеБлокировкиСеансов;
		ИБ.КодРазрешенияНачалаСеансов = ОписаниеИнформационнойБазы.КодРазрешения;
		ИБ.ПараметрБлокировки = ОписаниеИнформационнойБазы.ПараметрБлокировкиСеансов;
		ИБ.СообщениеБлокировки = ОписаниеИнформационнойБазы.СообщениеБлокировкиСеансов;
	КонецЕсли;
	
	ИБ.Записать();
КонецПроцедуры

&НаКлиенте
Асинх Процедура УдалитьСеансыАсинх(Сеансы)
	ПредставленияСеансов = Новый Массив;
	Для Каждого Сеанс Из Сеансы Цикл
		ПредставленияСеансов.Добавить(СтрШаблон(НСтр("ru='Информационная база: %1, сеанс №%2'"), Сеанс.ИмяИБ, Сеанс.НомерСеанса));
	КонецЦикла;
	
	ШапкаВопроса = НСтр("ru='Следующие сеансы будут завершены. Продолжить?'");
	Ответ = Ждать ВопросАсинх(ШапкаВопроса + Символы.ПС + Символы.ПС + СтрСоединить(ПредставленияСеансов, Символы.ПС), РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Сообщение = НСтр("ru='Сеанс работы завершен администратором.'");
	Сообщение = Ждать ВвестиСтрокуАсинх(Сообщение, НСтр("ru='Сообщение пользователю'"));
	Если Не ЗначениеЗаполнено(Сообщение) Тогда
		Возврат;
	КонецЕсли;
	
	Состояние(НСтр("ru='Подождите....'"),, НСтр("ru='Выполняется завершение сеанса'"));
	УдалитьСеансыНаСервере(ПараметрыСоединенияСКластером, Сеансы, Сообщение);
	
	ВызватьЗаполнениеСписков();
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьСеансыНаСервере(Знач ПараметрыСоединенияСКластером, Знач Сеансы, Знач Сообщение)
	СоединениеСКластером = СоединениеСКластером(ПараметрыСоединенияСКластером);
	
	Если ПараметрыСоединенияСКластером.МетодПодключения = "COM" Тогда
		УдалитьСеансыCOM(СоединениеСКластером, Сеансы, Сообщение);
	ИначеЕсли ПараметрыСоединенияСКластером.МетодПодключения = "RAS" Тогда
		УдалитьСеансыRAS(СоединениеСКластером, Сеансы, Сообщение);
	Иначе
		ВызватьИсключение "Некорректный метод подключения " + ПараметрыСоединенияСКластером.МетодПодключения;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьСеансыCOM(СоединениеСКластером, Сеансы, Сообщение)
	ШаблонУспех = НСтр("ru='Сеанс №%1 информационной базы %2 завершен'");
	ШаблонОшибка = НСтр("ru='Не удалось завершить сеанс №%1 информационной базы %2: %3'");
	
	Для Каждого Сеанс Из СоединениеСКластером.Агент.GetSessions(СоединениеСКластером.Кластер) Цикл
		СеансИзСписка = Ложь;
		Для Каждого СтрСеансы Из Сеансы Цикл
			Если ВРег(Сеанс.InfoBase.Name) = ВРег(СтрСеансы.ИмяИБ) И Сеанс.SessionID = СтрСеансы.НомерСеанса Тогда
				СеансИзСписка = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Не СеансИзСписка Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			СоединениеСКластером.Агент.TerminateSession(СоединениеСКластером.Кластер, Сеанс, Сообщение);
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтрШаблон(ШаблонУспех, СтрСеансы.НомерСеанса, СтрСеансы.ИмяИБ);
			Сообщение.Сообщить();
		Исключение
			ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтрШаблон(ШаблонОшибка, СтрСеансы.НомерСеанса, СтрСеансы.ИмяИБ, ТекстОшибки);
			Сообщение.Сообщить();
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьСеансыRAS(СоединениеСКластером, Сеансы, Сообщение)
	ШаблонУспех = НСтр("ru='Сеанс №%1 информационной базы %2 завершен'");
	ШаблонОшибка = НСтр("ru='Не удалось завершить сеанс №%1 информационной базы %2: %3'");
	
	Для Каждого Сеанс Из СоединениеСКластером.ПолучитьСеансы() Цикл
		СеансИзСписка = Ложь;
		Для Каждого СтрСеансы Из Сеансы Цикл
			Если Сеанс.ИдентификаторИнформационнойБазы = СтрСеансы.ИдентификаторИБ И Сеанс.НомерСеанса = СтрСеансы.НомерСеанса Тогда
				СеансИзСписка = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Не СеансИзСписка Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			Сеанс.ЗавершитьСеанс(Сообщение);
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтрШаблон(ШаблонУспех, СтрСеансы.НомерСеанса, СтрСеансы.ИмяИБ);
			Сообщение.Сообщить();
		Исключение
			ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтрШаблон(ШаблонОшибка, СтрСеансы.НомерСеанса, СтрСеансы.ИмяИБ, ТекстОшибки);
			Сообщение.Сообщить();
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПрерватьСерверныйВызов(Знач ПараметрыСоединенияСКластером, Знач ДанныеИБ, Знач Сообщение)
	СоединениеСКластером = СоединениеСКластером(ПараметрыСоединенияСКластером);
	
	Если ПараметрыСоединенияСКластером.МетодПодключения = "COM" Тогда
		ПрерватьСерверныйВызовCOM(СоединениеСКластером, ДанныеИБ, Сообщение);
	ИначеЕсли ПараметрыСоединенияСКластером.МетодПодключения = "RAS" Тогда
		ПрерватьСерверныйВызовRAS(СоединениеСКластером, ДанныеИБ, Сообщение);
	Иначе
		ВызватьИсключение "Некорректный метод подключения " + ПараметрыСоединенияСКластером.МетодПодключения;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПрерватьСерверныйВызовCOM(СоединениеСКластером, ДанныеИБ, Сообщение)
	Для Каждого Сеанс Из СоединениеСКластером.Агент.GetSessions(СоединениеСКластером.Кластер) Цикл
		Если ВРег(Сеанс.InfoBase.Name) <> ВРег(ДанныеИБ.ИмяИБ)
			Или Сеанс.SessionID <> ДанныеИБ.НомерСеанса Тогда
			
			Продолжить;
		КонецЕсли;
		
		СоединениеСКластером.Агент.InterruptCurrentServerCall(СоединениеСКластером.Кластер, Сеанс, Сообщение);
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПрерватьСерверныйВызовRAS(СоединениеСКластером, ДанныеИБ, Сообщение)
	Для Каждого Сеанс Из СоединениеСКластером.ПолучитьСеансы() Цикл
		Если Сеанс.ИдентификаторИнформационнойБазы <> ДанныеИБ.ИдентификаторИБ
			Или Сеанс.НомерСеанса <> ДанныеИБ.НомерСеанса Тогда
			
			Продолжить;
		КонецЕсли;
		
		Сеанс.ЗавершитьСеанс(Сообщение);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура НачатьАвторизациюВКластере()
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПослеВводаПараметровАдминистрированияКластера", ЭтотОбъект);
	ПараметрыФормы = Новый Структура("ПараметрыСоединенияСКластером", ПараметрыСоединенияСКластером);
	ОткрытьФорму("ВнешняяОбработка.Инструментики.Форма.АдминистрированиеСервера_АвторизацияВКластере", ПараметрыФормы,,,,, ОповещениеОЗавершении);
КонецПроцедуры

#КонецОбласти
