
// --------------------------------------------------------------------------------
// Copyright (c) 2024 Igor Ryabov (https://github.com/IgorRyaboff/Instrumentiki)
// License: https://github.com/IgorRyaboff/Instrumentiki/blob/main/LICENSE
// --------------------------------------------------------------------------------

#Область ОписаниеПеременных

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// ++ Параметры подключения к сервису обновлений
	ИмяСервера = "publicfiles.iryaboff.ru";
	БазовыйАдресРесурса = "instrumentiki_updates/";
	Порт = 443;
	Таймаут = 5;
	ИспользоватьSSL = Истина;
	// -- Параметры подключения к сервису обновлений
	
	Если Объект.БезопасныйРежим Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Параметры.Свойство("ТекущаяВерсия", ТекущаяВерсия);
	
	ПоследниеВерсии = ПоследниеВерсии(ПараметрыПодключенияКСервису(ИмяСервера, БазовыйАдресРесурса, Порт, Таймаут, ИспользоватьSSL));
	ПоследниеВерсии.Свойство("Стабильная", ПоследняяСтабильная);
	ПоследниеВерсии.Свойство("Тестовая", ПоследняяТестовая);
	
	ЕстьОбновлениеСтабильной = (СравнитьВерсии(ТекущаяВерсия, ПоследняяСтабильная) = 1);
	ЕстьОбновлениеТестовой = (СравнитьВерсии(ТекущаяВерсия, ПоследняяТестовая) = 1);
	
	Если Не ЕстьОбновлениеСтабильной Тогда
		Элементы.НадписьСтабильнаяВерсия.Заголовок = "Обновление не требуется";
		Элементы.НадписьСтабильнаяВерсия.ЦветТекста = WebЦвета.Серый;
	КонецЕсли;
	
	Если Не ЕстьОбновлениеТестовой Тогда
		Элементы.НадписьТестоваяВерсия.Заголовок = "Обновление не требуется";
		Элементы.НадписьТестоваяВерсия.ЦветТекста = WebЦвета.Серый;
	ИначеЕсли СравнитьВерсии(ПоследняяСтабильная, ПоследняяТестовая) = -1 Тогда
		Элементы.НадписьТестоваяВерсия.Заголовок = "Тестовая версия устарела";
		Элементы.НадписьТестоваяВерсия.ЦветТекста = WebЦвета.Серый;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	Если НавигационнаяСсылкаФорматированнойСтроки = "СкачатьСтабильную" Тогда
		СтандартнаяОбработка = Ложь;
		СкачатьВерсиюАсинх("Стабильная", ПоследняяСтабильная);
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "СкачатьТестовую" Тогда
		СтандартнаяОбработка = Ложь;
		СкачатьВерсиюАсинх("Тестовая", ПоследняяТестовая);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
// Код процедур и функций
#КонецОбласти

#Область ОбработчикиКомандФормы
// Код процедур и функций
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Сравнивает две версии
//
// Параметры
//  ВерсияСлева - Строка -
//  ВерсияСправа - Строка -
//
// Возвращаемое значение:
//  Число - "0", если версии совпадают; "1", если ВерсияСлева > ВерсияСправа; "-1", если ВерсияСлева < ВерсияСправа
&НаКлиентеНаСервереБезКонтекста
Функция СравнитьВерсии(ВерсияСлева, ВерсияСправа)
	ЧастиСлева = СтрРазделить(ВерсияСлева, ".");
	ЧастиСправа = СтрРазделить(ВерсияСправа, ".");
	КоличествоЧастей = ?(ЧастиСлева.Количество() > ЧастиСправа.Количество(), ЧастиСлева.Количество(), ЧастиСправа.Количество());
	
	Пока ЧастиСлева.Количество() < КоличествоЧастей Цикл
		ЧастиСлева.Добавить("0");
	КонецЦикла;
	Пока ЧастиСправа.Количество() < КоличествоЧастей Цикл
		ЧастиСправа.Добавить("0");
	КонецЦикла;
	
	Для Сч = 0 По КоличествоЧастей - 1 Цикл
		Слева = Число(ЧастиСлева[Сч]);
		Справа = Число(ЧастиСправа[Сч]);
		
		Если Слева > Справа Тогда
			Возврат -1;
		ИначеЕсли Слева < Справа Тогда
			Возврат 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат 0;
КонецФункции

// Вызывает скачивание версии, а затем обеспечивает скачивание файла на стороне пользовательского интефейса
//
// Параметры:
//  Вариант - Строка - См. параметр Вариант в СкачатьНаСервере()
//  Версия - Строка -
&НаКлиенте
Асинх Процедура СкачатьВерсиюАсинх(Вариант, Версия)
	Состояние("Скачиваем файл...");
	Результат = СкачатьНаСервере(Вариант, Версия, УникальныйИдентификатор, ПараметрыПодключенияКСервису(ИмяСервера, БазовыйАдресРесурса, Порт, Таймаут, ИспользоватьSSL));
	Состояние();
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОжиданиеСкачивания;
	#Если ВебКлиент Тогда
		Ждать ПолучитьФайлССервераАсинх(Результат.Адрес, Результат.ИмяФайла, Новый ПараметрыДиалогаПолученияФайлов);
	#Иначе
		Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		Диалог.ПолноеИмяФайла = Результат.ИмяФайла;
		Диалог.Фильтр = "Внешняя обработка (*.epf)|*.epf";
		ВыбранныеФайлы = Ждать Диалог.ВыбратьАсинх();
		Если ВыбранныеФайлы = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Ждать ПолучитьФайлССервераАсинх(Результат.Адрес, ВыбранныеФайлы[0]);
	#КонецЕсли
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаГлавная;
	ПоказатьПредупреждение(, НСтр("ru='Скачивание завершено. Закройте все окна Инструментиков и откройте только что скачанную обработку'"));
КонецПроцедуры

// Формирует структуру параметров подключения к сервису обновлений
//
// Параметры:
//  ИмяСервера - Строка - Домен или IP-адрес
//  БазовыйАдресРесурса - Строка - Строка, добавляемая перед именами файлов при обращении к сервису
//                                 Должна быть пустой, либо содержать "/" в конце
//  Порт - Число -
//  Таймаут - Число - В секундах
//  ИспользоватьSSL - Булево - Использование защищённого соединения
//
// Возвращаемое значение:
//  Структура - Содержит свойства с теми же именами, что и в параметрах
&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыПодключенияКСервису(ИмяСервера, БазовыйАдресРесурса, Порт, Таймаут, ИспользоватьSSL)
	Результат = Новый Структура;
	
	Результат.Вставить("ИмяСервера", ИмяСервера);
	Результат.Вставить("БазовыйАдресРесурса", БазовыйАдресРесурса);
	Результат.Вставить("Порт", Порт);
	Результат.Вставить("Таймаут", Таймаут);
	Результат.Вставить("ИспользоватьSSL", ИспользоватьSSL);
	
	Возврат Результат;
КонецФункции

// Формирует объект соединения с сервисом обновлений
//
// Параметры:
//  ПараметрыПодключения - Структура - См. ПараметрыПодключенияКСервису()
//
// Возвращаемое значение:
//  HTTPСоединение -
&НаСервереБезКонтекста
Функция HTTPСоединение(ПараметрыПодключения)
	SSL = ?(ПараметрыПодключения.ИспользоватьSSL, Новый ЗащищенноеСоединениеOpenSSL, Неопределено);
	Возврат Новый HTTPСоединение(ПараметрыПодключения.ИмяСервера, ПараметрыПодключения.Порт,,,, ПараметрыПодключения.Таймаут, SSL);
КонецФункции

&НаСервереБезКонтекста
Функция ПоследниеВерсии(ПараметрыПодключения)
	Результат = Новый Структура("Стабильная, Тестовая");
	
	Соединение = HTTPСоединение(ПараметрыПодключения);
	
	Запрос = Новый HTTPЗапрос(ПараметрыПодключения.БазовыйАдресРесурса + "latest_stable");
	HTTPОтвет = Соединение.Получить(Запрос);
	Если HTTPОтвет.КодСостояния <> 200 Тогда
		ВызватьИсключение "При получении последней релизной версии сервер вернул код состояния " + HTTPОтвет.КодСостояния;
	КонецЕсли;
	Результат.Стабильная = HTTPОтвет.ПолучитьТелоКакСтроку();
	
	Запрос = Новый HTTPЗапрос(ПараметрыПодключения.БазовыйАдресРесурса + "latest_test");
	HTTPОтвет = Соединение.Получить(Запрос);
	Если HTTPОтвет.КодСостояния <> 200 Тогда
		ВызватьИсключение "При получении последней тестовой версии сервер вернул код состояния " + HTTPОтвет.КодСостояния;
	КонецЕсли;
	Результат.Тестовая = HTTPОтвет.ПолучитьТелоКакСтроку();
	
	Возврат Результат;
КонецФункции

// Скачивает файл обновления и помещает его во временное хранилище
//
// Параметры:
//  Вариант - Строка - Одно из: "Стабильная", "Тестовая"
//  Версия - Строка -
//  ИдентификаторФормы - УникальныйИдентификатор -
//
// Возвращаемое значение:
//  Структура:
//  * ИмяФайла - Строка - Имя сохраняемого файла по умолчанию
//  * Адрес - Строка - Адрес файла во временном хранилище
&НаСервереБезКонтекста
Функция СкачатьНаСервере(Знач Вариант, Знач Версия, Знач ИдентификаторФормы, Знач ПараметрыПодключения)
	Соединение = HTTPСоединение(ПараметрыПодключения);
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	
	Если Вариант = "Стабильная" Тогда
		ИмяФайла = "Инструментики.epf";
	ИначеЕсли Вариант = "Тестовая" Тогда
		ИмяФайла = "ИнструментикиТестоваяВерсия.epf";
	Иначе
		ВызватьИсключение "Некорректный вариант " + Вариант;
	КонецЕсли;
	
	Запрос = Новый HTTPЗапрос(СтрШаблон("%1%2.epf", ПараметрыПодключения.БазовыйАдресРесурса, СокрЛП(Версия)));
	HTTPОтвет = Соединение.Получить(Запрос);
	Если HTTPОтвет.КодСостояния <> 200 Тогда
		ВызватьИсключение "При скачивании файла сервер вернул код состояния " + HTTPОтвет.КодСостояния;
	КонецЕсли;
	ДвоичныеДанные = HTTPОтвет.ПолучитьТелоКакДвоичныеДанные();
	
	Адрес = ПоместитьВоВременноеХранилище(ДвоичныеДанные, ИдентификаторФормы);
	Возврат Новый Структура("ИмяФайла, Адрес", ИмяФайла, Адрес);
КонецФункции

#КонецОбласти
