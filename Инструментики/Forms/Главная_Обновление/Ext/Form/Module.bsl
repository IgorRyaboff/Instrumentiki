
// --------------------------------------------------------------------------------
// Copyright (c) 2024 Igor Ryabov (https://github.com/IgorRyaboff/Instrumentiki)
// License: https://github.com/IgorRyaboff/Instrumentiki/blob/main/LICENSE
// --------------------------------------------------------------------------------

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Объект.БезопасныйРежим Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ТекущаяВерсия = Объект.Версия;
	
	ЗаполнитьИнформациюОВерсиях();
	
	ЕстьОбновлениеСтабильной = ЗначениеЗаполнено(ПоследняяСтабильная)
	И (СравнитьВерсии(Объект.Версия, ПоследняяСтабильная) = 1);
	ЕстьОбновлениеТестовой = ЗначениеЗаполнено(ПоследняяТестовая)
	И (СравнитьВерсии(Объект.Версия, ПоследняяТестовая) = 1);
	
	Если Не ЕстьОбновлениеСтабильной Тогда
		Элементы.НадписьСтабильнаяВерсия.Заголовок = "Обновление не требуется";
		Элементы.НадписьСтабильнаяВерсия.ЦветТекста = WebЦвета.Серый;
	КонецЕсли;
	
	Если Не ЕстьОбновлениеТестовой Тогда
		Элементы.НадписьТестоваяВерсия.Заголовок = "Обновление не требуется";
		Элементы.НадписьТестоваяВерсия.ЦветТекста = WebЦвета.Серый;
	ИначеЕсли СравнитьВерсии(ПоследняяСтабильная, ПоследняяТестовая) = -1 Тогда
		Элементы.НадписьТестоваяВерсия.Заголовок = "Тестовая версия устарела";
		Элементы.НадписьТестоваяВерсия.ЦветТекста = WebЦвета.Серый;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	Если НавигационнаяСсылкаФорматированнойСтроки = "СкачатьСтабильную" Тогда
		
		СтандартнаяОбработка = Ложь;
		СкачатьВерсиюАсинх("Стабильная", СсылкаНаСкачиваниеСтабильной);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "СкачатьТестовую" Тогда
		
		СтандартнаяОбработка = Ложь;
		СкачатьВерсиюАсинх("Тестовая", СсылкаНаСкачиваниеТестовой);
		
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Сравнивает две версии
//
// Параметры
//  ВерсияСлева - Строка -
//  ВерсияСправа - Строка -
//
// Возвращаемое значение:
//  Число - "0", если версии совпадают; "1", если ВерсияСлева > ВерсияСправа; "-1", если ВерсияСлева < ВерсияСправа
&НаКлиентеНаСервереБезКонтекста
Функция СравнитьВерсии(ВерсияСлева, ВерсияСправа)
	ЧастиСлева = СтрРазделить(ВерсияСлева, ".");
	ЧастиСправа = СтрРазделить(ВерсияСправа, ".");
	КоличествоЧастей = ?(ЧастиСлева.Количество() > ЧастиСправа.Количество(), ЧастиСлева.Количество(), ЧастиСправа.Количество());
	
	Пока ЧастиСлева.Количество() < КоличествоЧастей Цикл
		ЧастиСлева.Добавить("0");
	КонецЦикла;
	Пока ЧастиСправа.Количество() < КоличествоЧастей Цикл
		ЧастиСправа.Добавить("0");
	КонецЦикла;
	
	Для Сч = 0 По КоличествоЧастей - 1 Цикл
		Слева = Число(ЧастиСлева[Сч]);
		Справа = Число(ЧастиСправа[Сч]);
		
		Если Слева > Справа Тогда
			Возврат -1;
		ИначеЕсли Слева < Справа Тогда
			Возврат 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат 0;
КонецФункции

// Вызывает скачивание версии, а затем обеспечивает скачивание файла на стороне пользовательского интефейса
//
// Параметры:
//  Вариант - Строка - См. параметр Вариант в СкачатьНаСервере()
//  Версия - Строка -
&НаКлиенте
Асинх Процедура СкачатьВерсиюАсинх(Вариант, Ссылка)
	Состояние("Скачиваем файл...");
	Результат = СкачатьНаСервере(Вариант, Ссылка, УникальныйИдентификатор);
	Состояние();
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОжиданиеСкачивания;
	#Если ВебКлиент Тогда
		Ждать ПолучитьФайлССервераАсинх(Результат.Адрес, Результат.ИмяФайла, Новый ПараметрыДиалогаПолученияФайлов);
	#Иначе
		Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		Диалог.ПолноеИмяФайла = Результат.ИмяФайла;
		Диалог.Фильтр = "Внешняя обработка (*.epf)|*.epf";
		ВыбранныеФайлы = Ждать Диалог.ВыбратьАсинх();
		Если ВыбранныеФайлы = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Ждать ПолучитьФайлССервераАсинх(Результат.Адрес, ВыбранныеФайлы[0]);
	#КонецЕсли
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаГлавная;
	ПоказатьПредупреждение(, НСтр("ru='Скачивание завершено. Закройте все окна Инструментиков и откройте только что скачанную обработку'"));
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИнформациюОВерсиях()
	Соединение = Новый HTTPСоединение("api.github.com", 443,,,, 5, Новый ЗащищенноеСоединениеOpenSSL);
		
	Запрос = Новый HTTPЗапрос("/repos/IgorRyaboff/Instrumentiki/releases");
	Запрос.Заголовки.Вставить("X-GitHub-Api-Version", "2022-11-28");
	Запрос.Заголовки.Вставить("Accept", "application/vnd.github+json");
	
	HTTPОтвет = Соединение.Получить(Запрос);
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(HTTPОтвет.ПолучитьТелоКакСтроку());
	ТелоОтвета = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	
	Для Каждого ОписаниеВерсии Из ТелоОтвета Цикл
		НомерВерсии = ОписаниеВерсии.tag_name;
		ЭтоПредварительнаяВерсия = ОписаниеВерсии.prerelease;
		СсылкаНаСкачивание = ОписаниеВерсии.assets[0].browser_download_url;
		
		Если Не ЭтоПредварительнаяВерсия И Не ЗначениеЗаполнено(ПоследняяСтабильная) Тогда
			ПоследняяСтабильная = НомерВерсии;
			СсылкаНаСкачиваниеСтабильной = СсылкаНаСкачивание;
		КонецЕсли;
		
		Если ЭтоПредварительнаяВерсия И Не ЗначениеЗаполнено(ПоследняяТестовая) Тогда
			ПоследняяТестовая = НомерВерсии;
			СсылкаНаСкачиваниеТестовой = СсылкаНаСкачивание;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПоследняяСтабильная) И ЗначениеЗаполнено(ПоследняяТестовая) Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Скачивает файл обновления и помещает его во временное хранилище
//
// Параметры:
//  Вариант - Строка - Одно из: "Стабильная", "Тестовая"
//  Ссылка - Строка - Прямая ссылка на скачивание
//  ИдентификаторФормы - УникальныйИдентификатор - Идентфиикатор текущей формы
//                       для помещения файла в ее временное хранилище
//
// Возвращаемое значение:
//  Структура:
//  * ИмяФайла - Строка - Имя сохраняемого файла по умолчанию
//  * Адрес - Строка - Адрес файла во временном хранилище
&НаСервереБезКонтекста
Функция СкачатьНаСервере(Знач Вариант, Знач Ссылка, Знач ИдентификаторФормы)
	Если Вариант = "Стабильная" Тогда
		ИмяФайла = "Инструментики.epf";
	ИначеЕсли Вариант = "Тестовая" Тогда
		ИмяФайла = "ИнструментикиТестоваяВерсия.epf";
	Иначе
		ВызватьИсключение "Некорректный вариант " + Вариант;
	КонецЕсли;
	
	ДвоичныеДанные = ДвоичныеДанныеФайлаРелизаGitHub(Ссылка);
	
	Адрес = ПоместитьВоВременноеХранилище(ДвоичныеДанные, ИдентификаторФормы);
	Возврат Новый Структура("ИмяФайла, Адрес", ИмяФайла, Адрес);
КонецФункции

&НаСервереБезКонтекста
Функция ДвоичныеДанныеФайлаРелизаGitHub(Ссылка)
	#Область РазборURL
	
	Если Не СтрНачинаетсяС(Ссылка, "https://") Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru='Некорректная схема ссылки: %1'"), Ссылка);
	КонецЕсли;
	
	СсылкаРазделеннаяСлешами = СтрРазделить(Ссылка, "/", Истина);
	
	АдресСервера = СсылкаРазделеннаяСлешами[2];
	
	// Три строки ниже удаляют первые три элемента массива
	СсылкаРазделеннаяСлешами.Удалить(0);
	СсылкаРазделеннаяСлешами.Удалить(0);
	СсылкаРазделеннаяСлешами.Удалить(0);
	АдресРесурса = СтрСоединить(СсылкаРазделеннаяСлешами, "/");
	
	#КонецОбласти
	
	Соединение = Новый HTTPСоединение(АдресСервера, 443,,,, 60, Новый ЗащищенноеСоединениеOpenSSL);
	Запрос = Новый HTTPЗапрос(АдресРесурса);
	HTTPОтвет = Соединение.Получить(Запрос);
	
	Если HTTPОтвет.КодСостояния = 200 Тогда
		
		ДвоичныеДанные = HTTPОтвет.ПолучитьТелоКакДвоичныеДанные();
		Возврат ДвоичныеДанные;
		
	ИначеЕсли HTTPОтвет.КодСостояния = 302 Тогда
		
		Возврат ДвоичныеДанныеФайлаРелизаGitHub(HTTPОтвет.Заголовки["Location"]);
		
	Иначе
		
		Шаблон = НСтр("ru='При скачивании файла по ссылке ""%1"" сервер вернул код состояния %2'");
		ВызватьИсключение СтрШаблон(Шаблон, Ссылка, HTTPОтвет.КодСостояния);
		
	КонецЕсли;
КонецФункции

#КонецОбласти
