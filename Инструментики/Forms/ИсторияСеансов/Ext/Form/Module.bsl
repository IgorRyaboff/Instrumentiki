
// --------------------------------------------------------------------------------
// Copyright (c) 2024 Igor Ryabov (https://github.com/IgorRyaboff/Instrumentiki)
// License: https://github.com/IgorRyaboff/Instrumentiki/blob/main/LICENSE
// --------------------------------------------------------------------------------

#Область ОписаниеПеременных

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Период.Вариант = ВариантСтандартногоПериода.Месяц;
	
	// ++ Заполнение списка приложений
	Приложения.Добавить("1CV8C", "Тонкий клиент", Истина);
	Приложения.Добавить("1CV8", "Толстый клиент", Истина);
	Приложения.Добавить("WebClient", "Веб-клиент", Истина);
	Приложения.Добавить("MobileClient", "Мобильный клиент", Истина);
	Приложения.Добавить("Designer", "Конфигуратор", Истина);
	// -- Заполнение списка приложений
	
	// ++ Заполнение списка пользователей
	ВсеПользователи = Новый СписокЗначений;
	Для Каждого Пользователь Из ПользователиИнформационнойБазы.ПолучитьПользователей() Цикл
		ВсеПользователи.Добавить(Пользователь.Имя, СтрШаблон("%1 (%2)", Пользователь.Имя, Пользователь.ПолноеИмя));
	КонецЦикла;
	ИменаПользователей.ДоступныеЗначения = ВсеПользователи;
	// -- Заполнение списка пользователей
	
	НомерТекущегоСеанса = ПолучитьТекущийСеансИнформационнойБазы().НомерСеанса;
	
	ИспользованиеЖурналаРегистрации = ПолучитьИспользованиеЖурналаРегистрации();
	Элементы.ДекорацияРегистрацияИнформацииВыключена.Видимость = (ИспользованиеЖурналаРегистрации.Найти(УровеньЖурналаРегистрации.Информация) = Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура Сформировать(Команда)
	Список.Очистить();
	
	Состояние("Формирование списка...");
	СформироватьНаСервере();
	Состояние("Список сформирован");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
//
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок
// Код процедур и функций
#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Асинх Процедура ВыбратьПриложения(Команда)
	НовыйСписок = Ждать Приложения.ОтметитьЭлементыАсинх("Приложения");
	Если НовыйСписок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Приложения = НовыйСписок;
КонецПроцедуры

&НаКлиенте
Процедура СортироватьСписокВозр(Команда)
	СортироватьТаблицуЗначений("Список", "Возр");
КонецПроцедуры

&НаКлиенте
Процедура СортироватьСписокУбыв(Команда)
	СортироватьТаблицуЗначений("Список", "Убыв");
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Формирование списка сеансов
//
&НаСервере
Процедура СформироватьНаСервере()
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("ДатаНачала", Период.ДатаНачала);
	Отбор.Вставить("ДатаОкончания", Период.ДатаОкончания);
	
	Отбор.Вставить("Событие", Новый Массив);
	Отбор.Событие.Добавить("_$Session$_.Start");
	Отбор.Событие.Добавить("_$Session$_.Finish");
	
	Отбор.Вставить("ИмяПриложения", Новый Массив);
	Для Каждого ЭлементСписка Из Приложения Цикл
		Если ЭлементСписка.Пометка Тогда
			Отбор.ИмяПриложения.Добавить(ЭлементСписка.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Если ИменаПользователей.Количество() > 0 Тогда
		Отбор.Вставить("Пользователь", ИменаПользователей.ВыгрузитьЗначения());
	КонецЕсли;
	
	ТаблицаЖР = Новый ТаблицаЗначений;
	ВыгрузитьЖурналРегистрации(ТаблицаЖР, Отбор, "Дата, Компьютер, ПредставлениеПриложения, Событие, ИмяПользователя, Сеанс");
	
	СеансыИзЖурналаРегистрации = Новый Соответствие;
	
	Для Каждого СтрИсточник Из ТаблицаЖР Цикл
		Если СтрИсточник.Событие = "_$Session$_.Start" Тогда
			СтрПриемник = Новый Структура("НомерСеанса, ИмяПользователя, Компьютер, Приложение, Начало, Окончание");
			СтрПриемник.НомерСеанса = СтрИсточник.Сеанс;
			СтрПриемник.ИмяПользователя = СтрИсточник.ИмяПользователя;
			СтрПриемник.Компьютер = СтрИсточник.Компьютер;
			СтрПриемник.Приложение = СтрИсточник.ПредставлениеПриложения;
			СтрПриемник.Начало = СтрИсточник.Дата;
			
			СеансыИзЖурналаРегистрации[СтрПриемник.НомерСеанса] = СтрПриемник;
		ИначеЕсли СтрИсточник.Событие = "_$Session$_.Finish" Тогда
			СтрПриемник = СеансыИзЖурналаРегистрации[СтрИсточник.Сеанс];
			Если СтрПриемник = Неопределено Тогда // Сеанс начался раньше даты начала периода, но закончился в пределах периода
				Продолжить;
			КонецЕсли;
			
			СтрПриемник.Окончание = СтрИсточник.Дата;
		КонецЕсли;
	КонецЦикла;
	
	АктивныеСеансы = Новый Соответствие;
	Если ПравоДоступа("Администрирование", Метаданные) Тогда
		Для Каждого Сеанс Из ПолучитьСеансыИнформационнойБазы() Цикл
			АктивныеСеансы.Вставить(Сеанс.НомерСеанса, Новый Структура("IP", Сеанс.IPАдресКлиента));
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого КлючЗнч Из СеансыИзЖурналаРегистрации Цикл
		СтрСписок = Список.Добавить();
		ЗаполнитьЗначенияСвойств(СтрСписок, КлючЗнч.Значение);
		
		ДанныеАктивногоСеанса = АктивныеСеансы[СтрСписок.НомерСеанса];
		Если ДанныеАктивногоСеанса <> Неопределено Тогда
			СтрСписок.Активен = Истина;
			СтрСписок.IP = ДанныеАктивногоСеанса.IP;
		КонецЕсли;
	КонецЦикла;
	
	Список.Сортировать("Начало Возр");
КонецПроцедуры

// Универсальная процедура сортировки таблицы значений
//
// Параметры:
//  ИмяТаблицыФормы - Строка - Имя элемента формы, ссылающегося на таблицу
//  Направление - Строка - "Возр" или "Убыв"
&НаСервере
Процедура СортироватьТаблицуЗначений(ИмяТаблицыФормы, Направление)
	ТаблицаФормы = Элементы[ИмяТаблицыФормы];
	ПрефиксПутиКДанным = ТаблицаФормы.ПутьКДанным + ".";
	
	ТекущаяКолонка = ТаблицаФормы.ТекущийЭлемент;
	ИмяКолонки = СтрЗаменить(ТекущаяКолонка.ПутьКДанным, ПрефиксПутиКДанным, "");
	
	ЭтотОбъект[ТаблицаФормы.ПутьКДанным].Сортировать(ИмяКолонки + " " + Направление);
КонецПроцедуры

#КонецОбласти
