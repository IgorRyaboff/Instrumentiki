
// --------------------------------------------------------------------------------
// Copyright (c) 2024 Igor Ryabov (https://github.com/IgorRyaboff/Instrumentiki)
// License: https://github.com/IgorRyaboff/Instrumentiki/blob/main/LICENSE
// --------------------------------------------------------------------------------

#Область ОписаниеПеременных

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Объект.БезопасныйРежим Тогда
		Сообщить(НСтр("ru='Этот инструмент недоступен при работе в безопасном режиме'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	#Область СохранениеДанных1
	ЗагрузитьДанныеАвтосохранения();
	#КонецОбласти
	
	ВидТелаЗапроса = "БезТела";
	УстановитьТекущуюСтраницуТелаЗапроса(ЭтотОбъект);
	УстановитьПодсказкуТелаЗапросаДвоичныеДанные(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	Если МетодАутентификации = "Базовая" Или МетодАутентификации = "ОС" Тогда
		ПроверяемыеРеквизиты.Добавить("ИмяПользователя");
	КонецЕсли;
	
	Для Сч = 0 По ЗаголовкиЗапроса.Количество() - 1 Цикл
		Если ПустаяСтрока(ЗаголовкиЗапроса[Сч].Ключ) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтрШаблон(НСтр("ru='Поле ""Ключ"" в строке %1 не заполено'"), Формат(Сч + 1, "ЧГ="));
			Сообщение.Поле = СтрШаблон("ЗаголовкиЗапроса[%1].Ключ", Формат(Сч, "ЧН=0; ЧГ="));
			Сообщение.УстановитьДанные(Объект);
			Сообщение.Сообщить();
			Отказ = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если Порт > 65535 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Порт не может быть больше 65535'");
		Сообщение.Поле = "Порт";
		Сообщение.УстановитьДанные(Объект);
		Сообщение.Сообщить();
		Отказ = Истина;
	КонецЕсли;
	
	Если ВидТелаЗапроса = "Строка" Тогда
		ПроверяемыеРеквизиты.Добавить("ТелоЗапросаСтрока");
	ИначеЕсли ВидТелаЗапроса = "ДвоичныеДанные" Тогда
		ПроверяемыеРеквизиты.Добавить("ТелоЗапросаДвоичныеДанные");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Порт = 80;
	ГдеВыполнять = "Клиент";
	МетодHTTP = "GET";
	МетодАутентификации = "БезАутентификации";
	
	УстановитьПараметрыЭлементовФормы();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	#Область СохранениеДанных1
	Если Модифицированность Тогда
		Отказ = Истина;
		Если Не ЗавершениеРаботы Тогда
			ЗапроситьСохранениеАсинх(Истина);
		КонецЕсли;
	КонецЕсли;
	#КонецОбласти
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура МетодАвторизацииПриИзменении(Элемент)
	УстановитьПараметрыЭлементовФормы();
КонецПроцедуры

&НаКлиенте
Процедура ВидТелаЗапросаПриИзменении(Элемент)
	УстановитьТекущуюСтраницуТелаЗапроса(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗаголовкиЗапроса

&НаКлиенте
Процедура ЗаголовкиКлючПриИзменении(Элемент)
	ТД = Элементы.ЗаголовкиЗапроса.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТД.Описание) Тогда
		Возврат;
	КонецЕсли;
	
	Описания = Новый Соответствие;
	Описания["Accept"] = "Список допустимых форматов ресурса";
	Описания["Accept-Charset"] = "Перечень поддерживаемых кодировок для предоставления пользователю";
	Описания["Accept-Encoding"] = "Перечень поддерживаемых способов кодирования содержимого сущности при передаче";
	Описания["Accept-Language"] = "Список поддерживаемых естественных языков";
	Описания["Expect"] = "Указывает серверу что клиент ожидает от него дополнительного действия";
	Описания["From"] = "Адрес электронной почты ответственного лица со стороны клиента";
	Описания["If-Match"] = "Список тегов версий сущности. Выполнять метод, если они существуют";
	Описания["If-Modified-Since"] = "Дата. Выполнять метод если сущность изменилась с указанного момента";
	Описания["If-None-Match"] = "	Список тегов версий сущности. Выполнять метод если ни одного из них не существует";
	Описания["If-Range"] = "Список тегов версий сущности или дата для определённого фрагмента сущности";
	Описания["If-Unmodified-Since"] = "Дата. Выполнять метод если сущность не изменилась с указанной даты";
	Описания["Referer"] = "URI ресурса, после которого клиент сделал текущий запрос";
	Описания["User-Agent"] = "Список названий и версий клиента и его компонентов с комментариями";
	
	ТД.Описание = Описания[ТД.Ключ];
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область СохранениеДанных1

&НаКлиенте
Асинх Процедура СохранениеДанных_ОткрытьФайл(Команда)
	Если Объект.БезопасныйРежим Тогда
		ПоказатьПредупреждение(, "Загрузка и сохранение данных недоступны в безопасном режиме",, "Безопасный режим");
		Возврат;
	КонецЕсли;
	
	Если Не Ждать ЗапроситьСохранениеАсинх() Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресДанныхАвтосохранения) Тогда
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Открыть сохраненные данные");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Открыть данные из файла");
		Ответ = Ждать ВопросАсинх("Есть сохраненные данные с прошлого сеанса использования инструмента", Кнопки);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			АдресДанныхАвтосохранения = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресДанныхАвтосохранения) Тогда
		АдресВХ = АдресДанныхАвтосохранения;
	Иначе
		ПараметрыДиалогаПомещенияФайлов = Новый ПараметрыДиалогаПомещенияФайлов;
		ПараметрыДиалогаПомещенияФайлов.МножественныйВыбор = Ложь;
		ПараметрыДиалогаПомещенияФайлов.Фильтр = "Сохранённые данные Инструментиков (*.xml)|*.xml";
		
		ОписаниеПомещенногоФайла = Ждать ПоместитьФайлНаСерверАсинх(,,, ПараметрыДиалогаПомещенияФайлов, ЭтотОбъект.УникальныйИдентификатор);
		Если ОписаниеПомещенногоФайла = Неопределено Тогда
			Возврат;
		КонецЕсли;
		АдресВХ = ОписаниеПомещенногоФайла.Адрес;
	КонецЕсли;
	
	ПрочитатьУниверсальныйПакет(АдресВХ);
КонецПроцедуры

&НаКлиенте
Процедура СохранениеДанных_СохранитьФайл(Команда)
	СохранитьАсинх();
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ВыполнитьЗапросКоманда(Команда)
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		Если ГдеВыполнять = "Клиент" Тогда
			ПоказатьПредупреждение(, "Выполнение HTTP-запросов на веб-клиенте не поддерживается Инструментиками
			                         |Выполните запрос на сервере, либо откройте обработку в обычном настольном клиенте",, "Ой, у вас веб-клиент");
			Возврат;
		КонецЕсли;
	#КонецЕсли
	
	Если ГдеВыполнять = "Сервер" И Объект.БезопасныйРежим Тогда
		ПоказатьПредупреждение(, "Выполнение запросов на сервере недоступно в безопасном режиме",, "Безопасный режим");
		Возврат;
	КонецЕсли;
	
	ВыполнитьАвтосохранение();
	
	СтруктураЗапроса = Новый Структура;
	СтруктураЗапроса.Вставить("ИмяСервера", ИмяСервера);
	СтруктураЗапроса.Вставить("Порт", Порт);
	СтруктураЗапроса.Вставить("МетодHTTP", МетодHTTP);
	СтруктураЗапроса.Вставить("АдресРесурса", АдресРесурса);
	СтруктураЗапроса.Вставить("ЗащищенноеСоединение", ЗащищенноеСоединение);
	СтруктураЗапроса.Вставить("Таймаут", Таймаут);
	СтруктураЗапроса.Вставить("ИмяПользователя", ИмяПользователя);
	СтруктураЗапроса.Вставить("Пароль", Пароль);
	СтруктураЗапроса.Вставить("МетодАутентификации", МетодАутентификации);
	
	СтруктураЗапроса.Вставить("ВидТелаЗапроса", ВидТелаЗапроса);
	СтруктураЗапроса.Вставить("ТелоЗапроса");
	Если ВидТелаЗапроса = "Строка" Тогда
		СтруктураЗапроса.ТелоЗапроса = ТелоЗапросаСтрока;
	ИначеЕсли ВидТелаЗапроса = "ДвоичныеДанные" Тогда
		СтруктураЗапроса.ТелоЗапроса = ТелоЗапросаДвоичныеДанные;
	КонецЕсли;
	
	СтруктураЗапроса.Вставить("Заголовки", Новый Соответствие);
	Для Каждого Стр Из ЗаголовкиЗапроса Цикл
		СтруктураЗапроса.Заголовки[Стр.Ключ] = Стр.Значение;
	КонецЦикла;
	
	Состояние("Выполнение запроса...",,, БиблиотекаКартинок.ПерейтиПоВнешнейНавигационнойСсылке);
	Если ГдеВыполнять = "Сервер" Тогда
		СтруктураОтвета = ВыполнитьHTTPЗапросНаСервере(СтруктураЗапроса);
	ИначеЕсли ГдеВыполнять = "Клиент" Тогда
		СтруктураОтвета = ВыполнитьHTTPЗапросНаКлиентеНаСервере(СтруктураЗапроса);
	Иначе
		ВызватьИсключение "А где выполнять-то? :/";
	КонецЕсли;
	Состояние("Запрос выполнен!",,, БиблиотекаКартинок.Оповещения);
	
	ТелоОтвета = ПолучитьСтрокуИзДвоичныхДанных(Base64Значение(СтруктураОтвета.Тело));
	КодСостоянияОтвета = СтруктураОтвета.КодСостояния;
	ВремяВыполненияЗапроса = СтруктураОтвета.ВремяВыполнения;
	
	ЗаголовкиОтвета.Очистить();
	Для Каждого КЗ Из СтруктураОтвета.Заголовки Цикл
		СтрЗаголовкиОтвета = ЗаголовкиОтвета.Добавить();
		СтрЗаголовкиОтвета.Ключ = КЗ.Ключ;
		СтрЗаголовкиОтвета.Значение = КЗ.Значение;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СгенерироватьКод(Команда)
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ОсновнойШаблон = ОсновнойШаблонГенерацииКода();
	ОсновнойШаблон = СтрЗаменить(ОсновнойШаблон, "[ИмяСервера]", СтрЗаменить(ИмяСервера, """", """"""));
	ОсновнойШаблон = СтрЗаменить(ОсновнойШаблон, "[Порт]", Формат(Порт, "ЧН=0; ЧГ="));
	ОсновнойШаблон = СтрЗаменить(ОсновнойШаблон, "[Таймаут]", Формат(Таймаут, "ЧН=0; ЧГ="));
	ОсновнойШаблон = СтрЗаменить(ОсновнойШаблон, "[ЗащищенноеСоединение]", ?(ЗащищенноеСоединение, "Новый ЗащищенноеСоединениеOpenSSL", "Неопределено"));
	ОсновнойШаблон = СтрЗаменить(ОсновнойШаблон, "[АдресРесурса]", СтрЗаменить(АдресРесурса, """", """"""));
	ОсновнойШаблон = СтрЗаменить(ОсновнойШаблон, "[МетодHTTP]", МетодHTTP);
	ОсновнойШаблон = СтрЗаменить(ОсновнойШаблон, "[ИмяПользователя]", ?(ЗначениеЗаполнено(ИмяПользователя), """" + СтрЗаменить(ИмяПользователя, """", """""") + """", "Неопределено"));
	ОсновнойШаблон = СтрЗаменить(ОсновнойШаблон, "[Пароль]", ?(ЗначениеЗаполнено(Пароль), """" + СтрЗаменить(Пароль, """", """""") + """", "Неопределено"));
	
	ЗаполнитьЗаголовкиВГенерируемомКоде(ОсновнойШаблон);
	ЗаполнитьУстановкуТелаЗапросаВГенерируемомКоде(ОсновнойШаблон);
	
	ОсновнойШаблон = СтрокаБезДублирующихсяПустыхСтрок(ОсновнойШаблон);
	
	ВвестиСтрокуАсинх(ОсновнойШаблон, "Сгенерированный код",, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаголовкиВГенерируемомКоде(Шаблон)
	НовыеСтроки = Новый Массив;
	
	Для Каждого Стр Из ЗаголовкиЗапроса Цикл
		Ключ = СтрЗаменить(Стр.Ключ, """", """""");
		Значение = СтрЗаменить(Стр.Значение, """", """""");
		
		НовыеСтроки.Добавить(СтрШаблон("HTTPЗапрос.Заголовки[""%1""] = ""%2"";", Ключ, Значение));
	КонецЦикла;
	
	Шаблон = СтрЗаменить(Шаблон, "[Заголовки]", СтрСоединить(НовыеСтроки, Символы.ПС));
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьУстановкуТелаЗапросаВГенерируемомКоде(Шаблон)
	Если ВидТелаЗапроса = "БезТела" Тогда
		Шаблон = СтрЗаменить(Шаблон, "[УстановкаТелаЗапроса]", "");
	ИначеЕсли ВидТелаЗапроса = "Строка" Тогда
		Текст = "HTTPЗапрос.УстановитьТелоИзСтроки(""""); // TODO: Вставить содержимое";
		Шаблон = СтрЗаменить(Шаблон, "[УстановкаТелаЗапроса]", Текст);
	ИначеЕсли ВидТелаЗапроса = "ДвоичныеДанные" Тогда
		Текст = "HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(Новый ДвоичныеДанные); // TODO: Вставить содержимое";
		Шаблон = СтрЗаменить(Шаблон, "[УстановкаТелаЗапроса]", Текст);
	Иначе
		ВызватьИсключение "Неизвестный вид тела запроса";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция СтрокаБезДублирующихсяПустыхСтрок(ИсходнаяСтрока)
	СтрокиШаблона = СтрРазделить(ИсходнаяСтрока, Символы.ПС, Истина);
	
	Сч = 0;
	Пока Сч < СтрокиШаблона.Количество() Цикл
		Если ПустаяСтрока(СтрокиШаблона[Сч]) Тогда
			Если Сч = 0 Или ПустаяСтрока(СтрокиШаблона[Сч - 1]) Тогда
				СтрокиШаблона.Удалить(Сч);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Сч = Сч + 1;
	КонецЦикла;
	
	Возврат СтрСоединить(СтрокиШаблона, Символы.ПС);
КонецФункции

&НаКлиенте
Асинх Процедура ЗагрузитьТелоЗапросаИзФайла(Команда)
	ПараметрыДиалога = Новый ПараметрыДиалогаПомещенияФайлов(, Ложь, НСтр("ru='Все файлы'") + "|*.*");
	Элементы.ЗагрузитьТелоЗапросаИзФайла.Доступность = Ложь;
	
	ОписаниеПомещенногоФайла = Ждать ПоместитьФайлНаСерверАсинх(,,, ПараметрыДиалога, УникальныйИдентификатор);
	Элементы.ЗагрузитьТелоЗапросаИзФайла.Доступность = Истина;
	
	Если ОписаниеПомещенногоФайла = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТелоЗапросаДвоичныеДанные = ОписаниеПомещенногоФайла.Адрес;
	УстановитьПодсказкуТелаЗапросаДвоичныеДанные(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СохранениеДанных1

// Формирует XML-файл для сохранения текущих данных и помещает его во временное хранилище
//
// Возвращаемое значение:
//  Строка - Адрес во временном хранилище
&НаСервере
Функция СформироватьУниверсальныйПакет()
	ВерсияФормата = 0;
	ИмяИнструмента = "";
	ИмяОбъекта = "";
	ПриОпределенииНастроекИнструментаXDTO(ВерсияФормата, ИмяОбъекта, ИмяИнструмента, Неопределено);
	
	МодульОбъекта = РеквизитФормыВЗначение("Объект");
	Фабрика = МодульОбъекта.ФабрикаXDTO(ВерсияФормата);
	
	ОбъектХДТО = Фабрика.Создать(Фабрика.Тип("instrumentiki", ИмяОбъекта));
	ПриЗаполненииПакетаXDTO(Фабрика, ОбъектХДТО);
	ОбъектХДТО.Проверить();
	
	АдресВХ = МодульОбъекта.ДанныеВУниверсальныйПакетВХ(ВерсияФормата, ОбъектХДТО, ИмяИнструмента, ЭтотОбъект.УникальныйИдентификатор);
	Возврат АдресВХ;
КонецФункции

// Загружает данные, ранее сохранённые в этом инструменте
//
// Параметры:
//  Адрес - Строка - Адрес файла во временном хранилище
&НаСервере
Процедура ПрочитатьУниверсальныйПакет(Адрес)
	МодульОбъекта = РеквизитФормыВЗначение("Объект");
	
	ВерсияФормата = 0;
	ИмяИнструмента = "";
	ИмяОбъекта = "";
	ПриОпределенииНастроекИнструментаXDTO(ВерсияФормата, ИмяОбъекта, ИмяИнструмента, Неопределено);
	
	ДанныеПакета = МодульОбъекта.ДанныеИзУниверсальногоПакетаВХ(Адрес, ИмяОбъекта);
	Если ДанныеПакета.Свойство("Ошибка") Тогда
		Сообщить(ДанныеПакета.Ошибка);
		Возврат;
	КонецЕсли;
	
	ПриЧтенииПакетаXDTO(ДанныеПакета.Объект, ДанныеПакета.ВерсияФормата);
	
	Модифицированность = Ложь;
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеАвтосохранения()
	КлючНастроек = "";
	ИмяОбъекта = "";
	ПриОпределенииНастроекИнструментаXDTO(Неопределено, ИмяОбъекта, Неопределено, КлючНастроек);
	
	МодульОбъекта = РеквизитФормыВЗначение("Объект");
	СохраненныеДанные = МодульОбъекта.СохраненнаяНастройка(КлючНастроек, "ДанныеАвтосохранения");
	
	Если ЗначениеЗаполнено(СохраненныеДанные) Тогда
		АдресВХ = ПоместитьВоВременноеХранилище(СохраненныеДанные, УникальныйИдентификатор);
		
		МодульОбъекта = РеквизитФормыВЗначение("Объект");
		РезультатЧтения = МодульОбъекта.ДанныеИзУниверсальногоПакетаВХ(АдресВХ, ИмяОбъекта);
		
		Если Не РезультатЧтения.Свойство("Ошибка") Тогда
			АдресДанныхАвтосохранения = АдресВХ;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ВыполнитьАвтосохранение()
	КлючНастроек = "";
	ПриОпределенииНастроекИнструментаXDTO(Неопределено, Неопределено, Неопределено, КлючНастроек);
	
	АдресПакетаВХ = СформироватьУниверсальныйПакет();
	ДанныеПакета = ПолучитьИзВременногоХранилища(АдресПакетаВХ);
	УдалитьИзВременногоХранилища(АдресПакетаВХ);
	
	МодульОбъекта = РеквизитФормыВЗначение("Объект");
	МодульОбъекта.СохранитьНастройку(ключНастроек, "ДанныеАвтосохранения", ДанныеПакета);
	АдресДанныхАвтосохранения = Неопределено;
КонецПроцедуры

// Запрашивает сохранение текущих данных
//
// Параметры:
//  ЗакрытьФорму - Булево - Если Истина, форма будет закрыта после сохранения или отказа от сохранения
//
// Возвращаемое значение:
//  Булево - Разрешить выполнение действия
&НаКлиенте
Асинх Функция ЗапроситьСохранениеАсинх(ЗакрытьФорму = Ложь)
	Если Не Модифицированность Тогда
		Возврат Истина;
	КонецЕсли;
	
	Ответ = Ждать ВопросАсинх("Данные были изменены. Сохранить изменения?", РежимДиалогаВопрос.ДаНетОтмена);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Результат = Ждать СохранитьАсинх();
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
		Результат = Истина;
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
	Если Результат И ЗакрытьФорму Тогда
		Модифицированность = Ложь;
		ЭтотОбъект.Закрыть();
	КонецЕсли;
	Возврат Результат;
КонецФункции

// Выполняет сохранение данных
//
// Возвращаемое значение:
//  Булево - Данные сохранены. Может быть Ложь, если пользователь отменил сохранение в соответствующих диалогах
&НаКлиенте
Асинх Функция СохранитьАсинх()
	Если Объект.БезопасныйРежим Тогда
		ПоказатьПредупреждение(, "Загрузка и сохранение данных недоступны в безопасном режиме",, "Безопасный режим");
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		АдресВХ = СформироватьУниверсальныйПакет();
		#Если ВебКлиент Тогда
			Ждать ПолучитьФайлССервераАсинх(АдресВХ, "Запрос.xml", Новый ПараметрыДиалогаПолученияФайлов);
		#Иначе
			Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
			Диалог.Фильтр = "Файл сохраняемых данных (*.xml)|*.xml";
			ВыбранныеФайлы = Ждать Диалог.ВыбратьАсинх();
			Если ВыбранныеФайлы = Неопределено Тогда
				Возврат Ложь;
			КонецЕсли;
			
			Ждать ПолучитьФайлССервераАсинх(АдресВХ, ВыбранныеФайлы[0]);
		#КонецЕсли
	Исключение
		Ждать ПредупреждениеАсинх(ОписаниеОшибки(),, "Ошибка сохранения данных");
	КонецПопытки;
	
	Модифицированность = Ложь;
	Возврат Истина;
КонецФункции

#КонецОбласти

// Процедура, определяющая параметры интеграции инструмента с функциями сохранения данных
//
// Параметры:
//  ВерсияФормата - Число -
//  ИмяОбъекта - Строка - Имя объекта XDTO
//  ИмяИнструмента - Строка - Пользовательское представление названия текущего инструмента
//  КлючНастроек - Строка - Ключ настроек хранилища общих настроек для данных автосохранения
&НаСервереБезКонтекста
Процедура ПриОпределенииНастроекИнструментаXDTO(ВерсияФормата, ИмяОбъекта, ИмяИнструмента, КлючНастроек)
	ВерсияФормата = 4;
	ИмяОбъекта = "КонсольHTTP_Данные";
	ИмяИнструмента = НСтр("ru='Консоль HTTP-запросов'");
	КлючНастроек = "КонсольHTTP";
КонецПроцедуры

// Функция формирования пакета XDTO для сохранения в файл
//
// Параметры:
//  Фабрика - ФабрикаXDTO -
//  Пакет - ОбъектXDTO -
//
// Возвращаемое значение:
//  ОбъектXDTO -
&НаСервере
Процедура ПриЗаполненииПакетаXDTO(Фабрика, Пакет)
	ТипПараметрыИЗаголовки = Фабрика.Тип("instrumentiki", "КонсольHTTP_ПараметрыЗапросаИЗаголовки");
	
	Пакет.ИмяСервера = ИмяСервера;
	Пакет.Порт = Порт;
	Пакет.ЗащищенноеСоединение = ЗащищенноеСоединение;
	Пакет.ГдеВыполнять = ГдеВыполнять;
	Пакет.МетодHTTP = МетодHTTP;
	Пакет.АдресРесурса = АдресРесурса;
	Пакет.Таймаут = Таймаут;
	Пакет.МетодАутентификации = МетодАутентификации;
	Пакет.ИмяПользователя = ИмяПользователя;
	Пакет.Пароль = ?(СохранятьПароль, Пароль, "");
	
	Для Каждого Стр Из ЗаголовкиЗапроса Цикл
		СтрХДТО = Фабрика.Создать(ТипПараметрыИЗаголовки);
		ЗаполнитьЗначенияСвойств(СтрХДТО, Стр);
		Пакет.ЗаголовкиЗапроса.Добавить(СтрХДТО);
	КонецЦикла;
	
	Для Каждого Стр Из ПараметрыЗапроса Цикл
		СтрХДТО = Фабрика.Создать(ТипПараметрыИЗаголовки);
		ЗаполнитьЗначенияСвойств(СтрХДТО, Стр);
		Пакет.ПараметрыЗапроса.Добавить(СтрХДТО);
	КонецЦикла;
	
	Пакет.ВидТелаЗапроса = ВидТелаЗапроса;
	Пакет.ТелоЗапросаСтрока = ?(ВидТелаЗапроса = "Строка", ТелоЗапросаСтрока, "");
	Пакет.ТелоЗапросаДвоичныеДанные = ?(ВидТелаЗапроса = "ДвоичныеДанные", ПолучитьИзВременногоХранилища(ТелоЗапросаДвоичныеДанные), Новый ХранилищеЗначения(Неопределено));
КонецПроцедуры

// Процедура чтения данных из файла
//
// Параметры:
//  Пакет - ОбъектXDTO -
//  ВерсияФормата - Число -
&НаСервере
Процедура ПриЧтенииПакетаXDTO(Пакет, ВерсияФормата)
	ИмяСервера = Пакет.ИмяСервера;
	Порт = Пакет.Порт;
	ЗащищенноеСоединение = Пакет.ЗащищенноеСоединение;
	ГдеВыполнять = Пакет.ГдеВыполнять;
	МетодHTTP = Пакет.МетодHTTP;
	АдресРесурса = Пакет.АдресРесурса;
	Таймаут = Пакет.Таймаут;
	МетодАутентификации = Пакет.МетодАутентификации;
	ИмяПользователя = Пакет.ИмяПользователя;
	Пароль = Пакет.Пароль;
	
	ЗаголовкиЗапроса.Очистить();
	Для Каждого СтрХДТО Из Пакет.ЗаголовкиЗапроса Цикл
		ЗаполнитьЗначенияСвойств(ЗаголовкиЗапроса.Добавить(), СтрХДТО);
	КонецЦикла;
	
	ПараметрыЗапроса.Очистить();
	Для Каждого Стр Из Пакет.ПараметрыЗапроса Цикл
		ЗаполнитьЗначенияСвойств(ПараметрыЗапроса.Добавить(), СтрХДТО);
	КонецЦикла;
	
	ВидТелаЗапроса = "БезТела";
	ТелоЗапросаСтрока = Неопределено;
	ТелоЗапросаДвоичныеДанные = Неопределено;
	
	Если ВерсияФормата >= 4 Тогда
		ВидТелаЗапроса = Пакет.ВидТелаЗапроса;
		
		Если Пакет.ВидТелаЗапроса = "Строка" Тогда
			ВидТелаЗапроса = "Строка";
			ТелоЗапросаСтрока = Пакет.ТелоЗапросаСтрока;
		ИначеЕсли Пакет.ВидТелаЗапроса = "ДвоичныеДанные" Тогда
			ВидТелаЗапроса = "ДвоичныеДанные";
			ТелоЗапросаДвоичныеДанные = ПоместитьВоВременноеХранилище(Пакет.ТелоЗапросаДвоичныеДанные, УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
	
	УстановитьТекущуюСтраницуТелаЗапроса(ЭтотОбъект);
	УстановитьПодсказкуТелаЗапросаДвоичныеДанные(ЭтотОбъект);
КонецПроцедуры

// Переносит вызов запроса на серверную часть
//
// Параметры:
//  СтруктураЗапроса - Структура - См. справку по данному параметру в ВыполнитьHTTPЗапросНаКлиентеНаСервере()
//
// Возвращаемое значение: См. ВыполнитьHTTPЗапросНаКлиентеНаСервере()
&НаСервереБезКонтекста
Функция ВыполнитьHTTPЗапросНаСервере(СтруктураЗапроса)
	Возврат ВыполнитьHTTPЗапросНаКлиентеНаСервере(СтруктураЗапроса);
КонецФункции

// Непосредственно выполняет HTTP-запрос
//
// Параметры:
//  СтруктураЗапроса - Структура -
//  * ИмяСервера - Строка -
//  * Порт - Строка -
//  * МетодHTTP - Строка -
//  * АдресРесурса - Строка -
//  * ЗащищенноеСоединение - Булево -
//  * Таймаут - Число -
//  * ИмяПользователя - Строка -
//  * Пароль - Строка -
//  * МетодАвторизации - Строка - "БезАутентификации", "Базовая", либо "ОС"
//  * Заголовки - Соответствие -
//
// Возвращаемое значение:
//  Структура -
//  * КодСостояния - Число -
//  * Заголовки - Соответствие -
//  * Тело - Строка - Тело ответа, закодированное в Base64
//  * ВремяВыполнения - Число - В миллисекундах
&НаКлиентеНаСервереБезКонтекста
Функция ВыполнитьHTTPЗапросНаКлиентеНаСервере(СтруктураЗапроса, НакопленноеВремяВыполнения = 0)
	ЗащищенноеСоединение = Неопределено;
	
	Если СтруктураЗапроса.ЗащищенноеСоединение Тогда
		ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL;
	Иначе
		ЗащищенноеСоединение = Неопределено;
	КонецЕсли;
	
	НачалоЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Соединение = Новый HTTPСоединение(СтруктураЗапроса.ИмяСервера, СтруктураЗапроса.Порт,
	СтруктураЗапроса.ИмяПользователя, СтруктураЗапроса.Пароль,, СтруктураЗапроса.Таймаут,
	ЗащищенноеСоединение, СтруктураЗапроса.МетодАутентификации = "ОС");
	
	Запрос = Новый HTTPЗапрос(СтруктураЗапроса.АдресРесурса, СтруктураЗапроса.Заголовки);
	Если СтруктураЗапроса.ВидТелаЗапроса = "Строка" Тогда
		Запрос.УстановитьТелоИзСтроки(СтруктураЗапроса.ТелоЗапроса);
	ИначеЕсли СтруктураЗапроса.ВидТелаЗапроса = "ДвоичныеДанные" Тогда
		Запрос.УстановитьТелоИзДвоичныхДанных(ТелоЗапросаДвоичныеДанныеИзВременногоХранилища(СтруктураЗапроса.ТелоЗапроса));
	КонецЕсли;
	
	ОтветHTTP = Соединение.ВызватьHTTPМетод(СтруктураЗапроса.МетодHTTP, Запрос);
	ВремяВыполненияМС = ТекущаяУниверсальнаяДатаВМиллисекундах() - НачалоЗамера + НакопленноеВремяВыполнения;
	
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("КодСостояния", ОтветHTTP.КодСостояния);
	СтруктураОтвета.Вставить("Заголовки", ОтветHTTP.Заголовки);
	СтруктураОтвета.Вставить("Тело", Base64Строка(ОтветHTTP.ПолучитьТелоКакДвоичныеДанные()));
	СтруктураОтвета.Вставить("ВремяВыполнения", ВремяВыполненияМС);
	Возврат СтруктураОтвета;
КонецФункции

&НаСервереБезКонтекста
Функция ТелоЗапросаДвоичныеДанныеИзВременногоХранилища(Адрес)
	Возврат ПолучитьИзВременногоХранилища(Адрес);
КонецФункции

// Возвращает основной шаблон для фичи генерации кода на встроенном языке 1С
//
// Возвращаемое значение:
//  Строка -
&НаКлиентеНаСервереБезКонтекста
Функция ОсновнойШаблонГенерацииКода()
	Возврат
	"HTTPСоединение = Новый HTTPСоединение(""[ИмяСервера]"", [Порт], [ИмяПользователя], [Пароль],, [Таймаут], [ЗащищенноеСоединение]);
	|HTTPЗапрос = Новый HTTPЗапрос(""[АдресРесурса]"");
	|
	|[Заголовки]
	|
	|[УстановкаТелаЗапроса]
	|
	|HTTPОтвет = HTTPСоединение.ВызватьHTTPМетод(""[МетодHTTP]"", HTTPЗапрос);";
КонецФункции

// Обновляет доступность, видимость и прочие параметры элементов формы в зависимости от значений реквизитов
&НаКлиенте
Процедура УстановитьПараметрыЭлементовФормы()
	Элементы.ГруппаАвторизацияБазовая.Доступность = (МетодАутентификации = "Базовая" Или МетодАутентификации = "ОС");
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьТекущуюСтраницуТелаЗапроса(Форма)
	Форма.Элементы.СтраницыТелоЗапроса.ТекущаяСтраница = Форма.Элементы.Найти("СтраницаТелоЗапроса" + Форма.ВидТелаЗапроса);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПодсказкуТелаЗапросаДвоичныеДанные(Форма)
	Если Форма.ТелоЗапросаДвоичныеДанные <> Неопределено Тогда
		Форма.Элементы.ПодсказкаТелоЗапросаДвоичныеДанные.Заголовок = НСтр("ru='Тело загружено из файла'");
	Иначе
		Форма.Элементы.ПодсказкаТелоЗапросаДвоичныеДанные.Заголовок = НСтр("ru='Тело не загружено'");
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
