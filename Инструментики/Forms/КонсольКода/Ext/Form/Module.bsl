
// --------------------------------------------------------------------------------
// Copyright (c) 2024 Igor Ryabov (https://github.com/IgorRyaboff/Instrumentiki)
// License: https://github.com/IgorRyaboff/Instrumentiki/blob/main/LICENSE
// --------------------------------------------------------------------------------

#Область ОписаниеПеременных

#КонецОбласти

#Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	МодульОбъекта = РеквизитФормыВЗначение("Объект");
	МодульОбъекта.ИнициализироватьКрасивыйРедакторКода(УникальныйИдентификатор);
	ЗначениеВРеквизитФормы(МодульОбъекта, "Объект");
	
	консолькодаТекст = Параметры.Код;
	НаКлиенте = Параметры.НаКлиенте;
	
	Если Параметры.ОбменДанными <> Неопределено Тогда
		Для Каждого КлючЗначение Из Параметры.ОбменДанными Цикл
			СтрОбменДанными = консолькодаОбменДанными.Добавить();
			СтрОбменДанными.Ключ = КлючЗначение.Ключ;
			СтрОбменДанными.Значение = КлючЗначение.Значение;
		КонецЦикла;
	КонецЕсли;
	
	Элементы.консолькодаПривилегированныйРежим.Доступность = Не БезопасныйРежим();
	#Область СохранениеДанных2
	СохрД_ЗагрузитьДанныеАвтосохранения();
	#КонецОбласти
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	#Если Не ВебКлиент Тогда
		Если ЭтоАдресВременногоХранилища(Объект.ПутьККрасивомуРедакторуКода) Тогда
			РаспаковатьКрасивыйРедакторКода();
		Иначе
			ЛокальныйПутьККрасивомуРедакторуКода = Объект.ПутьККрасивомуРедакторуКода;
		КонецЕсли;
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	#Область СохранениеДанных2
	Если Модифицированность Тогда
		Отказ = Истина;
		Если Не ЗавершениеРаботы Тогда
			СохрД_ЗапроситьСохранениеАсинх(Истина);
		КонецЕсли;
	КонецЕсли;
	#КонецОбласти
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если ЗначениеЗаполнено(ЛокальныйПутьККрасивомуРедакторуКода) И СтрНачинаетсяС(ЛокальныйПутьККрасивомуРедакторуКода, "file") И ЭтоАдресВременногоХранилища(Объект.ПутьККрасивомуРедакторуКода) Тогда
		Каталог = СтрЗаменить(ЛокальныйПутьККрасивомуРедакторуКода, "file://", "");
		
		Разд = СтрРазделить(СтрЗаменить(Каталог, "/", "\"), "\", Ложь);
		Разд.Удалить(Разд.ВГраница());
		Каталог = СтрСоединить(Разд, "\");
		
		УдалитьФайлыАсинх(Каталог);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура консолькодаКрасивыйРедакторДокументСформирован(Элемент)
	Вью = ВьюКрасивогоРедактора();
	Вью.setContent(консолькодаТекст);
	Вью.setOption("generateModificationEvent", true);
	Вью.setOption("generateOnKeyDownEvent", true);
	Вью.updateMetadata(СтруктураМетаданныхДляКрасивогоРедактора());
	Элементы.ФормаПереключитьРедакторКода.Доступность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура консолькодаКрасивыйРедакторПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	СобытиеРедактора = ДанныеСобытия.Event.EventData1C;
	Если СобытиеРедактора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СобытиеРедактора.event = "EVENT_CONTENT_CHANGED" Тогда
		консолькодаТекст = ВьюКрасивогоРедактора().getText();
		Модифицированность = Истина;
	ИначеЕсли СобытиеРедактора.event = "EVENT_ON_KEY_DOWN" Тогда
		Если СобытиеРедактора.params.keyCode = 9 Тогда // ESC
			Закрыть();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОбменДанными

&НаКлиенте
Процедура консолькодаОбменДаннымиНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	Если Элементы.консолькодаОбменДанными.ТекущийЭлемент.Имя = "консолькодаОбменДаннымиКлюч" Тогда
		СтрОбменДанными = Элемент.ТекущиеДанные;
		Если СтрОбменДанными = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыПеретаскивания.Значение = СтрШаблон("ОбменДанными[""%1""]", СтрЗаменить(СтрОбменДанными.Ключ, """", """"""));
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область СохранениеДанных2

&НаКлиенте
Асинх Процедура СохрД_ОткрытьФайл(Команда)
	Если Не Ждать СохрД_ЗапроситьСохранениеАсинх() Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресДанныхАвтосохранения) Тогда
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Открыть сохраненные данные");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Открыть данные из файла");
		Ответ = Ждать ВопросАсинх("Есть сохраненные данные с прошлого сеанса использования инструмента", Кнопки);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			АдресДанныхАвтосохранения = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресДанныхАвтосохранения) Тогда
		АдресВХ = АдресДанныхАвтосохранения;
	Иначе
		ПараметрыДиалогаПомещенияФайлов = Новый ПараметрыДиалогаПомещенияФайлов;
		ПараметрыДиалогаПомещенияФайлов.МножественныйВыбор = Ложь;
		ПараметрыДиалогаПомещенияФайлов.Фильтр = НСтр("ru='Сохранённые данные Инструментиков (*.xml)|*.xml|Все файлы|*'");
		
		ОписаниеПомещенногоФайла = Ждать ПоместитьФайлНаСерверАсинх(,,, ПараметрыДиалогаПомещенияФайлов, ЭтотОбъект.УникальныйИдентификатор);
		Если ОписаниеПомещенногоФайла = Неопределено Тогда
			Возврат;
		КонецЕсли;
		АдресВХ = ОписаниеПомещенногоФайла.Адрес;
	КонецЕсли;
	
	СохрД_ПрочитатьУниверсальныйПакет(АдресВХ);
КонецПроцедуры

&НаКлиенте
Процедура СохрД_СохранитьФайл(Команда)
	СохрД_СохранитьАсинх();
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ВыполнитьКод(Команда)
	ВызватьВыполнениеКода(1);
КонецПроцедуры

&НаКлиенте
Асинх Процедура ВыполнитьВРежимеБенчмарка(Команда)
	ВыполнитьБенчмаркАсинх(1);
КонецПроцедуры

&НаКлиенте
Асинх Процедура УстановитьЗначениеВОбменеДаннымиИзНавигационнойСсылки(Команда)
	ТекДанные = Элементы.консолькодаОбменДанными.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСсылка = Ждать ОткрОб_ЗапроситьСсылкуИзНавигационнойАсинх();
	Если НоваяСсылка <> Неопределено Тогда
		ТекДанные.Значение = НоваяСсылка;
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Асинх Процедура УстановитьЗначениеВОбменеДаннымиИзОткрытыхОкон(Команда)
	ТекДанные = Элементы.консолькодаОбменДанными.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСсылка = Ждать ОткрОб_ЗапроситьСсылкуИзОткрытыхОконАсинх();
	Если НоваяСсылка <> Неопределено Тогда
		ТекДанные.Значение = НоваяСсылка;
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Асинх Процедура ЗагрузитьПример(Команда = Неопределено)
	Если Не Ждать СохрД_ЗапроситьСохранениеАсинх() Тогда
		Возврат;
	КонецЕсли;
	
	Ответ = Ждать ВопросАсинх("Загрузить пример работы с таблицей ОбменДанными через программный код?", РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗагрузитьПримерНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьРедакторКода(Команда)
	#Если ВебКлиент Тогда
		ПоказатьПредупреждение(, "Красивый редактор кода недоступен в веб-клиенте ввиду ограничений Chrome",, "Ой, у вас веб-клиент");
		Возврат;
	#КонецЕсли
	
	ИспользуетсяКрасивыйРедакторКода = Не ИспользуетсяКрасивыйРедакторКода;
	
	Элементы.консолькодаТекст.Видимость = Не ИспользуетсяКрасивыйРедакторКода;
	Элементы.КрасивыйРедактор.Видимость = ИспользуетсяКрасивыйРедакторКода;
	Элементы.ФормаПереключитьРедакторКода.Доступность = Не ИспользуетсяКрасивыйРедакторКода; // Включится по событию редактора ДокументСформирован
	Элементы.ФормаПереключитьРедакторКода.Пометка = ИспользуетсяКрасивыйРедакторКода;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьОбменДанными(Команда)
	Элементы.ГруппаОбменДанными.Видимость = Не Элементы.ГруппаОбменДанными.Видимость;
	Элементы.ФормаПоказатьСкрытьОбменДанными.Пометка = Элементы.ГруппаОбменДанными.Видимость;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОткрытиеОбъектов1

// Запрашивает у пользователя навигационную ссылку и возвращает ссылку на объект ИБ
// При возникновении ошибки разбора ссылки формируется предупреждение
//
// Возвращаемое значение:
//  ЛюбаяСсылка, Неопределено -
&НаКлиенте
Асинх Функция ОткрОб_ЗапроситьСсылкуИзНавигационнойАсинх()
	ТекстСсылки = Ждать ВвестиСтрокуАсинх(Неопределено, НСтр("ru='Навигационная ссылка'"));
	Если ТекстСсылки = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		Ссылка = ОткрОб_СсылкаИзНавигационной(ТекстСсылки);
		Возврат Ссылка;
	Исключение
		Ждать ПредупреждениеАсинх(НСтр("ru='Ошибка получения ссылки'"));
		Возврат Неопределено;
	КонецПопытки;
КонецФункции

// Запрашивает выбор пользователем открытого окна программы и возвращает соответствующую окну ссылку на объект ИБ
// При возникновении ошибки разбора ссылки формируется предупреждение
//
// Возвращаемое значение:
//  ЛюбаяСсылка, Неопределено -
&НаКлиенте
Асинх Функция ОткрОб_ЗапроситьСсылкуИзОткрытыхОконАсинх()
	Окна = ПолучитьОкна();
	СписокДляВыбора = Новый СписокЗначений;
	
	Для Каждого ОткрытоеОкно Из Окна Цикл
		Если ОткрытоеОкно.НачальнаяСтраница Тогда
			Продолжить;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ОткрытоеОкно.ПолучитьНавигационнуюСсылку()) Тогда
			Продолжить;
		КонецЕсли;
		
		СписокДляВыбора.Добавить(ОткрытоеОкно.ПолучитьНавигационнуюСсылку(), ОткрытоеОкно.Заголовок);
	КонецЦикла;
	
	Если СписокДляВыбора.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru='Нет доступных для выбора окон'"));
		Возврат Неопределено;
	КонецЕсли;
	
	ВыбранныйЭлемент = Ждать СписокДляВыбора.ВыбратьЭлементАсинх(НСтр("ru='Выберите окно'"));
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		Ссылка = ОткрОб_СсылкаИзНавигационной(ВыбранныйЭлемент.Значение);
		Возврат Ссылка;
	Исключение
		Ждать ПредупреждениеАсинх(НСтр("ru='Ошибка получения ссылки'"));
		Возврат Неопределено;
	КонецПопытки;
КонецФункции

// Формирует ссылку на объект ИБ из навигационной ссылки вида "e1cib/data/Справочник.Контрагенты?ref=80a700155d116f0111ea5a82d06033f4"
// При невозможности сформировать ссылку вызывает исключение
//
// Параметры:
//  НавигационнаяСсылка - Строка -
//
// Возвращаемое значение:
//  Произвольный - Ссылка на объект ИБ
&НаСервереБезКонтекста
Функция ОткрОб_СсылкаИзНавигационной(Знач НавигационнаяСсылка)
	ПерваяТочка = Найти(НавигационнаяСсылка, "e1cib/data/");
    ВтораяТочка = Найти(НавигационнаяСсылка, "?ref=");
    
    ПредставлениеТипа = Сред(НавигационнаяСсылка, ПерваяТочка + 11, ВтораяТочка - ПерваяТочка - 11);
    ШаблонЗначения = ЗначениеВСтрокуВнутр(ПредопределенноеЗначение(ПредставлениеТипа + ".ПустаяСсылка"));
    ЗначениеСсылки = СтрЗаменить(ШаблонЗначения, "00000000000000000000000000000000", Сред(НавигационнаяСсылка, ВтораяТочка + 5));
	Возврат ЗначениеИзСтрокиВнутр(ЗначениеСсылки);
КонецФункции

#КонецОбласти

#Область СохранениеДанных2

// Формирует XML-файл для сохранения текущих данных и помещает его во временное хранилище
//
// Возвращаемое значение:
//  Строка - Адрес во временном хранилище
&НаСервере
Функция СохрД_СформироватьУниверсальныйПакет()
	ВерсияФормата = 0;
	ИмяИнструмента = "";
	ИмяОбъекта = "";
	ПриОпределенииНастроекИнструментаXDTO(ВерсияФормата, ИмяОбъекта, ИмяИнструмента, Неопределено);
	Если ВерсияФормата = 0 Тогда
		ВызватьИсключение "Не определены настройки инструмента XDTO";
	КонецЕсли;
	
	МодульОбъекта = РеквизитФормыВЗначение("Объект");
	Фабрика = МодульОбъекта.ФабрикаXDTO(ВерсияФормата);
	
	ОбъектХДТО = Фабрика.Создать(Фабрика.Тип("instrumentiki", ИмяОбъекта));
	ПриЗаполненииПакетаXDTO(Фабрика, ОбъектХДТО);
	ОбъектХДТО.Проверить();
	
	АдресВХ = МодульОбъекта.ДанныеВУниверсальныйПакетВХ(ВерсияФормата, ОбъектХДТО, ИмяИнструмента, ЭтотОбъект.УникальныйИдентификатор);
	Возврат АдресВХ;
КонецФункции

// Загружает данные, ранее сохранённые в этом инструменте
//
// Параметры:
//  Адрес - Строка - Адрес файла во временном хранилище
&НаСервере
Процедура СохрД_ПрочитатьУниверсальныйПакет(Адрес)
	МодульОбъекта = РеквизитФормыВЗначение("Объект");
	
	ВерсияФормата = 0;
	ИмяИнструмента = "";
	ИмяОбъекта = "";
	ПриОпределенииНастроекИнструментаXDTO(ВерсияФормата, ИмяОбъекта, ИмяИнструмента, Неопределено);
	
	ДанныеПакета = МодульОбъекта.ДанныеИзУниверсальногоПакетаВХ(Адрес, ИмяОбъекта);
	Если ДанныеПакета.Свойство("Ошибка") Тогда
		Сообщить(ДанныеПакета.Ошибка);
		Возврат;
	КонецЕсли;
	
	ПриЧтенииПакетаXDTO(ДанныеПакета.Объект, ДанныеПакета.ВерсияФормата);
	
	Модифицированность = Ложь;
КонецПроцедуры

&НаСервере
Процедура СохрД_ЗагрузитьДанныеАвтосохранения()
	КлючНастроек = "";
	ИмяОбъекта = "";
	ПриОпределенииНастроекИнструментаXDTO(Неопределено, ИмяОбъекта, Неопределено, КлючНастроек);
	
	МодульОбъекта = РеквизитФормыВЗначение("Объект");
	СохраненныеДанные = МодульОбъекта.СохраненнаяНастройка(КлючНастроек, "ДанныеАвтосохранения");
	
	Если ЗначениеЗаполнено(СохраненныеДанные) Тогда
		АдресВХ = ПоместитьВоВременноеХранилище(СохраненныеДанные, УникальныйИдентификатор);
		
		МодульОбъекта = РеквизитФормыВЗначение("Объект");
		РезультатЧтения = МодульОбъекта.ДанныеИзУниверсальногоПакетаВХ(АдресВХ, ИмяОбъекта);
		
		Если Не РезультатЧтения.Свойство("Ошибка") Тогда
			АдресДанныхАвтосохранения = АдресВХ;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СохрД_ВыполнитьАвтосохранение()
	КлючНастроек = "";
	ПриОпределенииНастроекИнструментаXDTO(Неопределено, Неопределено, Неопределено, КлючНастроек);
	
	АдресПакетаВХ = СохрД_СформироватьУниверсальныйПакет();
	ДанныеПакета = ПолучитьИзВременногоХранилища(АдресПакетаВХ);
	УдалитьИзВременногоХранилища(АдресПакетаВХ);
	
	МодульОбъекта = РеквизитФормыВЗначение("Объект");
	МодульОбъекта.СохранитьНастройку(ключНастроек, "ДанныеАвтосохранения", ДанныеПакета);
	АдресДанныхАвтосохранения = Неопределено;
КонецПроцедуры

// Запрашивает сохранение текущих данных
//
// Параметры:
//  ЗакрытьФорму - Булево - Если Истина, форма будет закрыта после сохранения или отказа от сохранения
//
// Возвращаемое значение:
//  Булево - Разрешить выполнение действия
&НаКлиенте
Асинх Функция СохрД_ЗапроситьСохранениеАсинх(ЗакрытьФорму = Ложь)
	Если Не Модифицированность Тогда
		Возврат Истина;
	КонецЕсли;
	
	Ответ = Ждать ВопросАсинх("Данные были изменены. Сохранить изменения?", РежимДиалогаВопрос.ДаНетОтмена);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Результат = Ждать СохрД_СохранитьАсинх();
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
		Результат = Истина;
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
	Если Результат И ЗакрытьФорму Тогда
		Модифицированность = Ложь;
		ЭтотОбъект.Закрыть();
	КонецЕсли;
	Возврат Результат;
КонецФункции

// Выполняет сохранение данных
//
// Возвращаемое значение:
//  Булево - Данные сохранены. Может быть Ложь, если пользователь отменил сохранение в соответствующих диалогах
&НаКлиенте
Асинх Функция СохрД_СохранитьАсинх()
	ИмяИнструмента = "";
	ПриОпределенииНастроекИнструментаXDTO(Неопределено, Неопределено, ИмяИнструмента, Неопределено);
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		АдресВХ = СохрД_СформироватьУниверсальныйПакет();
		#Если ВебКлиент Тогда
			Ждать ПолучитьФайлССервераАсинх(АдресВХ, ИмяИнструмента + ".xml", Новый ПараметрыДиалогаПолученияФайлов);
		#Иначе
			Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
			Диалог.Фильтр = "Файл сохраняемых данных (*.xml)|*.xml|Все файлы|*";
			ВыбранныеФайлы = Ждать Диалог.ВыбратьАсинх();
			Если ВыбранныеФайлы = Неопределено Тогда
				Возврат Ложь;
			КонецЕсли;
			
			Ждать ПолучитьФайлССервераАсинх(АдресВХ, ВыбранныеФайлы[0]);
		#КонецЕсли
	Исключение
		Ждать ПредупреждениеАсинх(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),, НСтр("ru='Ошибка сохранения данных'"));
	КонецПопытки;
	
	Модифицированность = Ложь;
	Возврат Истина;
КонецФункции

#КонецОбласти

// Процедура, определяющая параметры интеграции инструмента с функциями сохранения данных
//
// Параметры:
//  ВерсияФормата - Число -
//  ИмяОбъекта - Строка - Имя объекта XDTO
//  ИмяИнструмента - Строка - Пользовательское представление названия текущего инструмента
//  КлючНастроек - Строка - Ключ настроек хранилища общих настроек для данных автосохранения
&НаСервереБезКонтекста
Процедура ПриОпределенииНастроекИнструментаXDTO(ВерсияФормата, ИмяОбъекта, ИмяИнструмента, КлючНастроек)
	ВерсияФормата = 1;
	ИмяОбъекта = "КонсольКода_Данные";
	ИмяИнструмента = НСтр("ru='Консоль кода'");
	КлючНастроек = "КонсольКода";
КонецПроцедуры

// Функция формирования пакета XDTO для сохранения в файл
//
// Параметры:
//  Фабрика - ФабрикаXDTO -
//  Пакет - ОбъектXDTO -
//
// Возвращаемое значение:
//  ОбъектXDTO -
&НаСервере
Процедура ПриЗаполненииПакетаXDTO(Фабрика, Пакет)
	ВходныеДанные = Новый Структура("Текст, ПривилегированныйРежим, НаКлиенте", консолькодаТекст, консолькодаПривилегированныйРежим, НаКлиенте);
	ЗаполнитьЗначенияСвойств(Пакет, ВходныеДанные);
	
	Для Каждого Стр Из консолькодаОбменДанными Цикл
		СтрXDTO = Фабрика.Создать(Фабрика.Тип("instrumentiki", "КонсольКода_КлючЗначениеОбменаДанными"));
		СтрXDTO.Ключ = Стр.Ключ;
		СтрXDTO.Значение = Фабрика.Создать(Фабрика.Тип("http://v8.1c.ru/8.1/data/core", "ValueStorage"), Новый ХранилищеЗначения(Стр.Значение));
		Пакет.ОбменДанными.Добавить(СтрXDTO);
	КонецЦикла;
КонецПроцедуры

// Процедура чтения данных из файла
//
// Параметры:
//  Пакет - ОбъектXDTO -
//  ВерсияФормата - Число -
&НаСервере
Процедура ПриЧтенииПакетаXDTO(Пакет, ВерсияФормата)
	консолькодаТекст = Пакет.Текст;
	консолькодаПривилегированныйРежим = Пакет.ПривилегированныйРежим И Не БезопасныйРежим();
	НаКлиенте = Пакет.НаКлиенте;
	
	консолькодаОбменДанными.Очистить();
	Для Каждого СтрXDTO Из Пакет.ОбменДанными Цикл
		СтрТабл = консолькодаОбменДанными.Добавить();
		СтрТабл.Ключ = СтрXDTO.Ключ;
		СтрТабл.Значение = СтрXDTO.Значение.Получить();
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Асинх Процедура ВыполнитьБенчмаркАсинх(КоличествоИтераций)
	Начало = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	ВызватьВыполнениеКода(КоличествоИтераций);
	
	Конец = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ОбщееВремя = Конец - Начало;
	ОднаИтерация = Окр(ОбщееВремя / КоличествоИтераций, 2, РежимОкругления.Окр15как20);
	
	Если ОбщееВремя < 1000 Тогда
		Ответ = Ждать ВопросАсинх("Общее время выполнения составило менее 1 секунды. Увеличить число итераций в 100 раз?", РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ВыполнитьБенчмаркАсинх(КоличествоИтераций * 100);
			Возврат;
		КонецЕсли;
	ИначеЕсли ОбщееВремя < 5000 Тогда
		Ответ = Ждать ВопросАсинх("Общее время выполнения составило менее 5 секунд. Увеличить число итераций в 10 раз?", РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ВыполнитьБенчмаркАсинх(КоличествоИтераций * 10);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПоказатьПредупреждение(, СтрШаблон("Выполнено итераций: %1
							 |Общее время выполнения: %2 мс
							 |Время выполнения одной итерации: %3 мс", КоличествоИтераций, Конец - Начало, ОднаИтерация));
КонецПроцедуры

// Выполняет код на стороне сервера
//
// Параметры:
//  консолькодаКод - Строка - Выполняемый код
//  консолькодаПривилегированныйРежим - Булево - Если Истина, то код будет выполнен в привилегированном режиме
//  консолькодаКоличествоИтераций - Число - Сколько раз необходимо выполнить код. Используется для режима бенчмарка. При обычном выполнении следует передавать "1"
//  ОбменДанными - Соответствие - Представление таблицы формы ОбменДанными в виде соответствия
&НаСервереБезКонтекста
Процедура ВыполнитьКодНаСервереБезКонтекста(Знач консолькодаКод, Знач консолькодаПривилегированныйРежим, Знач консолькодаКоличествоИтераций, ОбменДанными)
	Если консолькодаПривилегированныйРежим Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	Для консолькодаСчетчик = 1 По консолькодаКоличествоИтераций Цикл
		Выполнить(консолькодаКод);
	КонецЦикла;
КонецПроцедуры

// Загружает пример работы с Консолью кода
&НаСервере
Процедура ЗагрузитьПримерНаСервере()
	Макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("КонсольКода_Пример");
	АдресВХ = ПоместитьВоВременноеХранилище(Макет.ПолучитьТекст(), ЭтаФорма.УникальныйИдентификатор);
	СохрД_ПрочитатьУниверсальныйПакет(АдресВХ);
КонецПроцедуры // ЗагрузитьПримерНаСервере()

// Подготовка соответствия ОбменДанными и вызов выполнения кода согласно данным формы
//
// Параметры:
//  КоличествоИтераций - Число - Сколько раз необходимо выполнить код
//                       Если запуск идёт НЕ в режиме бенчмарка, следует передать значение "1"
&НаКлиенте
Процедура ВызватьВыполнениеКода(консолькодаКоличествоИтераций)
	СохрД_ВыполнитьАвтосохранение();
	ОбменДанными = Новый Соответствие;
	
	ЕстьОшибкиВКлючахОбменаДанными = Ложь;
	Для Каждого Стр Из консолькодаОбменДанными Цикл
		ОбменДанными[Стр.Ключ] = Стр.Значение;
	КонецЦикла;
	
	Если ЕстьОшибкиВКлючахОбменаДанными Тогда
		Возврат;
	КонецЕсли;
	
	Если НаКлиенте Тогда
		#Если ВебКлиент Тогда
			ПоказатьПредупреждение(, "Выполнение кода на стороне клиента недоступно при работе через веб-клиент");
			Возврат;
		#Иначе
			Для консолькодаСч = 1 По консолькодаКоличествоИтераций Цикл
				Попытка
					Выполнить(консолькодаТекст);
				Исключение
					ПоказатьПредупреждение(, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),, "Ошибка выполнения кода");
				КонецПопытки;
			КонецЦикла;
		#КонецЕсли
	Иначе
		Попытка
			ВыполнитьКодНаСервереБезКонтекста(консолькодаТекст, консолькодаПривилегированныйРежим, консолькодаКоличествоИтераций, ОбменДанными);
		Исключение
			ПоказатьПредупреждение(, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),, "Ошибка выполнения кода");
		КонецПопытки;
	КонецЕсли;
	
	консолькодаОбменДанными.Очистить();
	
	Если ТипЗнч(ОбменДанными) <> Тип("Соответствие") И ТипЗнч(ОбменДанными) <> Тип("Структура") Тогда
		ПоказатьПредупреждение(, СтрШаблон("Объект ОбменДанными в коде был заменён на значение недопустимого типа (%1). Таблица ""Обмен данными"" будет очищена", ТипЗнч(ОбменДанными)));
	Иначе
		ОбменДаннымиОбработанный = Новый Соответствие;
		Для Каждого КЗ Из ОбменДанными Цикл
			ОбменДаннымиОбработанный[Строка(КЗ.Ключ)] = КЗ.Значение;
		КонецЦикла;
		
		Для Каждого КЗ Из ОбменДаннымиОбработанный Цикл
			Стр = консолькодаОбменДанными.Добавить();
			
			Стр.Ключ = Строка(КЗ.Ключ);
			Попытка
				Стр.Значение = КЗ.Значение;
			Исключение
				Стр.Значение = Неопределено;
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Возвращает объект внешнего программного интерфейса красивого редактора кода
//
// Возвращаемое значение:
//  Неопределено, ВнешнийОбъект -
&НаКлиенте
Функция ВьюКрасивогоРедактора()
	Возврат ?(Элементы.КрасивыйРедактор.Документ = Неопределено, Неопределено, Элементы.КрасивыйРедактор.Документ.defaultView);
КонецФункции

// Получает ZIP-файл из временного хранилища и распаковывает архив во временную директорию
// Для корректной работы в реквизите обработки ПутьККрасивомуРедакторуКода должен находиться адрес во временном хранилище
//
&НаКлиенте
Асинх Процедура РаспаковатьКрасивыйРедакторКода()
	Каталог = (Ждать КаталогВременныхФайловАсинх()) + Строка(Новый УникальныйИдентификатор) + "\";
	ПутьКАрхиву = Каталог + "archive.zip";
	
	Ждать СоздатьКаталогАсинх(Каталог);
	Ждать ПолучитьФайлССервераАсинх(Объект.ПутьККрасивомуРедакторуКода, ПутьКАрхиву);
	
	ЧтениеЗип = Новый ЧтениеZipФайла(ПутьКАрхиву);
	ЧтениеЗип.ИзвлечьВсе(Каталог);
	ЧтениеЗип.Закрыть();
	Ждать УдалитьФайлыАсинх(ПутьКАрхиву);
	
	ЛокальныйПутьККрасивомуРедакторуКода = "file://" + СтрЗаменить(Каталог, "\", "/") + "index.html";
КонецПроцедуры

// См. https://github.com/salexdv/bsl_console/blob/develop/docs/update_metadata.md
//
// Возвращаемое значение:
//  Структура -
&НаСервереБезКонтекста
Функция СтруктураМетаданныхДляКрасивогоРедактора()
	Результат = Новый Структура;
	
	Результат.Вставить("catalogs", ИменаОбъектовМетаданныхИзКоллекции(Метаданные.Справочники));
	Результат.Вставить("documents", ИменаОбъектовМетаданныхИзКоллекции(Метаданные.Документы));
	//Результат.Вставить("informationregisters", ИменаОбъектовМетаданныхИзКоллекции(Метаданные.РегистрыСведений));
	//Результат.Вставить("accumulationregisters", ИменаОбъектовМетаданныхИзКоллекции(Метаданные.РегистрыНакопления));
	//Результат.Вставить("accountingregisters", ИменаОбъектовМетаданныхИзКоллекции(Метаданные.РегистрыБухгалтерии));
	//Результат.Вставить("calculationregisters", ИменаОбъектовМетаданныхИзКоллекции(Метаданные.РегистрыРасчета));
	//Результат.Вставить("dataprocessors", ИменаОбъектовМетаданныхИзКоллекции(Метаданные.Обработки));
	//Результат.Вставить("reports", ИменаОбъектовМетаданныхИзКоллекции(Метаданные.Отчеты));
	//Результат.Вставить("enums", ИменаОбъектовМетаданныхИзКоллекции(Метаданные.Перечисления));
	//Результат.Вставить("chartsofaccounts", ИменаОбъектовМетаданныхИзКоллекции(Метаданные.ПланыСчетов));
	//Результат.Вставить("businessprocesses", ИменаОбъектовМетаданныхИзКоллекции(Метаданные.БизнесПроцессы));
	//Результат.Вставить("tasks", ИменаОбъектовМетаданныхИзКоллекции(Метаданные.Задачи));
	//Результат.Вставить("exchangeplans", ИменаОбъектовМетаданныхИзКоллекции(Метаданные.ПланыОбмена));
	//Результат.Вставить("chartsofcharacteristictypes", ИменаОбъектовМетаданныхИзКоллекции(Метаданные.ПланыВидовХарактеристик));
	//Результат.Вставить("chartsofcalculationtypes", ИменаОбъектовМетаданныхИзКоллекции(Метаданные.ПланыВидовРасчета));
	//Результат.Вставить("constants", ИменаОбъектовМетаданныхИзКоллекции(Метаданные.Константы));
	
	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, Результат);
	
	Возврат Запись.Закрыть();
КонецФункции

// Формирует структуру с именами метаданных для красивого редактора кода
// См. https://github.com/salexdv/bsl_console/blob/develop/docs/update_metadata.md
//
// Параметры:
//  КоллекцияОбъектовМетаданных - КоллекцияОбъектовМетаданных -
//
// Возвращаемое значение:
//  Структура -
&НаСервереБезКонтекста
Функция ИменаОбъектовМетаданныхИзКоллекции(КоллекцияОбъектовМетаданных)
	Результат = Новый Структура;
	
	Для Каждого Мета Из КоллекцияОбъектовМетаданных Цикл
		Результат.Вставить(Мета.Имя, Новый Структура);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

#КонецОбласти
