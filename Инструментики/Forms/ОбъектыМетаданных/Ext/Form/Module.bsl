
// --------------------------------------------------------------------------------
// Copyright (c) 2024 Igor Ryabov (https://github.com/IgorRyaboff/Instrumentiki)
// License: https://github.com/IgorRyaboff/Instrumentiki/blob/main/LICENSE
// --------------------------------------------------------------------------------

#Область ОписаниеПеременных

&НаСервере
Перем мОбъектыИмеющиеТаблицыРегистрации;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ОтборПоРасширениям.Добавить("", "<основная конфигурация>");
	Для Каждого Расширение Из РасширенияКонфигурации.Получить() Цикл
		Если Не Расширение.Активно Тогда
			Продолжить;
		КонецЕсли;
		
		ОтборПоРасширениям.Добавить(Расширение.Имя);
	КонецЦикла;
	
	Для Каждого Элемент Из ОтборПоРасширениям Цикл
		Элемент.Пометка = Истина;
	КонецЦикла;
	ОтборПоРасширениямПредставление = "Основная конфигурация и все расширения";
	Элементы.ОтборРасширенийПредставление.Видимость = (ОтборПоРасширениям.Количество() > 1);
	Элементы.ДеревоФункцийРасширениеКонфигурации.Видимость = (ОтборПоРасширениям.Количество() > 1);
	
	ЗаполнитьДеревоФункций();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтборРасширенийПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	НастроитьОтборПоРасширениямАсинх();
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	ВызватьЗаполнениеДереваФункций();
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИспользуетсяКешОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВызватьЗаполнениеДереваФункций(Ложь);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовДереваФормыДеревоФункций

&НаКлиенте
Асинх Процедура ДеревоФункцийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТД = Элементы.ДеревоФункций.ТекущиеДанные;
	Если ТД = Неопределено Или Не ЗначениеЗаполнено(ТД.Действие) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТД.Действие = "СтандартнаяОбработка" Тогда
		ПодключениеУспешно = ПодключитьСтандартнуюОбработку(ТД.ПараметрДействия);
		Если ПодключениеУспешно Тогда
			ОткрытьФорму(СтрШаблон("ВнешняяОбработка.%1.Форма", ТД.ПараметрДействия));
		Иначе
			ПоказатьПредупреждение(, "Не удалось подключить обработку. Возможно, она отсутствует в данной версии платформы");
		КонецЕсли;
	ИначеЕсли ТД.Действие = "ПредопределенноеЗначение" Тогда
		Попытка
			ПоказатьЗначение(, ПредопределенноеЗначение(ТД.ПараметрДействия));
		Исключение
			ПоказатьПредупреждение(, "Предопределенный элемент отсутствует в данных");
		КонецПопытки;
	ИначеЕсли ТД.Действие = "Последовательность" Тогда
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить("Регистр", "Регистрация");
		Кнопки.Добавить("Границы", "Границы");
		Кнопки.Добавить(Неопределено, "Отмена");
		Ответ = Ждать ВопросАсинх("Какую таблицу открыть?", Кнопки);
		Если Ответ = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если Ответ = "Регистр" Тогда
			ИмяТаблицы = "Последовательность." + ТД.ПараметрДействия;
		ИначеЕсли Ответ = "Границы" Тогда
			ИмяТаблицы = СтрШаблон("Последовательность.%1.Границы", ТД.ПараметрДействия);
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура("ИмяТаблицы, НеУстанавливатьОсновнуюТаблицу", ИмяТаблицы);
		ОткрытьФорму("ВнешняяОбработка.Инструментики.Форма.ДинамическийСписок", ПараметрыФормы,, ИмяТаблицы);
	ИначеЕсли ТД.Действие = "ОбъектМетаданных" Тогда
		ОткрытьФорму(ТД.ПараметрДействия.ФормаПоУмолчанию);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоФункцийПриАктивизацииСтроки(Элемент)
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		Действие = Элемент.ТекущиеДанные.Действие;
		ПараметрДействия = Элемент.ТекущиеДанные.ПараметрДействия;
	КонецЕсли;
	
	Элементы.ДеревоФункцийКонтекстноеМенюСкопироватьОбращениеКПредопределенному.Видимость = ((Действие = "ОбъектМетаданных" И ПараметрДействия.ИмеетПустуюСсылку) Или Действие = "ЗначениеПеречисления" Или Действие = "ПредопределенноеЗначение");
	Элементы.ДеревоФункцийКонтекстноеМенюСкопироватьОбращениеКПредопределенному.Заголовок = ?(Действие = "ОбъектМетаданных" И ПараметрДействия.ИмеетПустуюСсылку, "Скопировать обращение к пустой ссылке", "");
	Элементы.ДеревоФункцийКонтекстноеМенюЗаменитьПредопределенноеЗначение.Видимость = (Действие = "ПредопределенноеЗначение");
	Элементы.ДеревоФункцийКонтекстноеМенюСкачатьСтандартнуюОбработку.Видимость = (Действие = "СтандартнаяОбработка");
	Элементы.ДеревоФункцийКонтекстноеМенюОткрытьДинамическийСписок.Видимость = (Действие = "ОбъектМетаданных" И ПараметрДействия.ПоддерживаетДинамическийСписок);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СкачатьСтандартнуюОбработку(Команда)
	ТД = Элементы.ДеревоФункций.ТекущиеДанные;
	Если ТД = Неопределено Или Не ЗначениеЗаполнено(ТД.Действие) Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.БезопасныйРежим Тогда
		ПоказатьПредупреждение(, "Действие недоступно в безопасном режиме",, "Безопасный режим");
		Возврат;
	КонецЕсли;
	
	Если ТД.Действие <> "СтандартнаяОбработка" Тогда
		ПоказатьПредупреждение(, "Действие доступно только для элементов группы ""Стандартные""");
		Возврат;
	КонецЕсли;
	
	АдресВХ = ПоместитьСтандартнуюОбработкуВоВремХранилище(ТД.ПараметрДействия, ЭтаФорма.УникальныйИдентификатор);
	Если АдресВХ = Неопределено Тогда
		ПоказатьПредупреждение(, "Не удалось извлечь обработку. Возможно, она отсутствует в данной версии платформы");
		Возврат;
	КонецЕсли;
	
	НачатьПолучениеФайлаССервера(АдресВХ, ТД.ПараметрДействия + ".epf");
КонецПроцедуры

&НаКлиенте
Асинх Процедура ОткрытьДинамическийСписок(Команда)
	ТекДанные = Элементы.ДеревоФункций.ТекущиеДанные;
	Если ТекДанные = Неопределено Или Не ЗначениеЗаполнено(ТекДанные.Действие) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекДанные.Действие <> "ОбъектМетаданных" Или Не ТекДанные.ПараметрДействия.ПоддерживаетДинамическийСписок Тогда
		ПоказатьПредупреждение(, "Действие недоступно для этого элемента");
		Возврат;
	КонецЕсли;
	
	Если Не ТекДанные.ПараметрДействия.ПравоПросмотра Тогда
		ПоказатьПредупреждение(, "У вас нет прав для просмотра данного списка",, "Ошибка доступа");
		Возврат;
	КонецЕсли;
	
	СписокТаблиц = Новый СписокЗначений;
	
	Если СтрНачинаетсяС(ТекДанные.ПараметрДействия.ПолноеИмяМетаданных, "Регистр") Тогда
		ВиртуальныеТаблицы = СписокВиртуальныхТаблицРегистра(ТекДанные.ПараметрДействия.ПолноеИмяМетаданных);
		Для Каждого СтрИсточник Из ВиртуальныеТаблицы Цикл
			СписокТаблиц.Добавить(СтрИсточник.Значение, СтрИсточник.Представление);
		КонецЦикла;
	Иначе
		ТабличныеЧасти = ИменаТабличныхЧастейМетаданных(ТекДанные.ПараметрДействия.ПолноеИмяМетаданных);
		Для Каждого СтрИсточник Из ТабличныеЧасти Цикл
			СписокТаблиц.Добавить(СтрИсточник.Значение, СтрИсточник.Представление);
		КонецЦикла;
		
		Если СписокТаблиц.Количество() > 0 Или ТекДанные.ПараметрДействия.ИмеетТаблицуРегистрации Тогда
			СписокТаблиц.Вставить(0, ТекДанные.ПараметрДействия.ПолноеИмяМетаданных, "Основная таблица");
		КонецЕсли;
	КонецЕсли;
	
	Если ТекДанные.ПараметрДействия.ИмеетТаблицуРегистрации Тогда
		СписокТаблиц.Добавить(ТекДанные.ПараметрДействия.ПолноеИмяМетаданных + ".Изменения", "Изменения",, БиблиотекаКартинок.ПланОбмена);
	КонецЕсли;
	
	Если СписокТаблиц.Количество() = 0 Тогда
		ИмяТаблицы = ТекДанные.ПараметрДействия.ПолноеИмяМетаданных;
	ИначеЕсли СписокТаблиц.Количество() = 1 Тогда
		ИмяТаблицы = СписокТаблиц[0].Значение;
	Иначе
		Результат = Ждать СписокТаблиц.ВыбратьЭлементАсинх("Уточните таблицу", СписокТаблиц[0]);
		Если Результат = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ИмяТаблицы = Результат.Значение;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ИмяТаблицы", ИмяТаблицы);
	Если СтрЗаканчиваетсяНа(ИмяТаблицы, ".Изменения") Тогда
		ПараметрыФормы.Вставить("НеУстанавливатьОсновнуюТаблицу");
	КонецЕсли;
	
	ОткрытьФорму("ВнешняяОбработка.Инструментики.Форма.ДинамическийСписок", ПараметрыФормы,, ИмяТаблицы);
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьОбращениеКПредопределенному(Команда)
	ТекДанные = Элементы.ДеревоФункций.ТекущиеДанные;
	Если ТекДанные = Неопределено Или Не ЗначениеЗаполнено(ТекДанные.Действие) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекДанные.Действие = "ОбъектМетаданных" И ТекДанные.ПараметрДействия.ИмеетПустуюСсылку Тогда
		ЗначениеДляЗапроса = ТекДанные.ПараметрДействия.ПолноеИмяМетаданных + ".ПустаяСсылка";
		ЗначениеДляКода = ТекДанные.ПараметрДействия.ПолноеИмяМетаданных + ".ПустаяСсылка()";
	ИначеЕсли ТекДанные.Действие = "ЗначениеПеречисления" Или ТекДанные.Действие = "ПредопределенноеЗначение" Тогда
		ЗначениеДляЗапроса = ТекДанные.ПараметрДействия;
		ЗначениеДляКода = ЗначениеДляЗапроса;
	Иначе
		Возврат;
	КонецЕсли;
	
	ВвестиСтрокуАсинх(СтрШаблон("ЗНАЧЕНИЕ(%1)
	                            |
	                            |ПредопределенноеЗначение(""%1"")", ЗначениеДляЗапроса), "Вот ваш код",, Истина);
КонецПроцедуры

&НаКлиенте
Асинх Процедура ЗаменитьПредопределенноеЗначение(Команда)
	ТекДанные = Элементы.ДеревоФункций.ТекущиеДанные;
	Если ТекДанные = Неопределено Или Не ЗначениеЗаполнено(ТекДанные.Действие) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекДанные.Действие <> "ПредопределенноеЗначение" Тогда
		ПоказатьПредупреждение(, "Команда недоступна для этого элемента");
		Возврат;
	КонецЕсли;
	
	ЧастиПараметраДействия = СтрРазделить(ТекДанные.ПараметрДействия, ".");
	ИмяТипаМетаданных = ЧастиПараметраДействия[0];
	ИмяОбъектаМетаданных = ЧастиПараметраДействия[1];
	ИмяПредопределенного = ЧастиПараметраДействия[2];
	
	Если ИмяТипаМетаданных = "Справочник" Тогда
		Тип = Тип("СправочникСсылка." + ИмяОбъектаМетаданных);
	ИначеЕсли ИмяТипаМетаданных = "ПланВидовХарактеристик" Тогда
		Тип = Тип("ПланВидовХарактеристикСсылка." + ИмяОбъектаМетаданных);
	ИначеЕсли ИмяТипаМетаданных = "ПланСчетов" Тогда
		Тип = Тип("ПланСчетовСсылка." + ИмяОбъектаМетаданных);
	ИначеЕсли ИмяТипаМетаданных = "ПланВидовРасчета" Тогда
		Тип = Тип("ПланВидовРасчетаСсылка." + ИмяОбъектаМетаданных);
	КонецЕсли;
	
	Попытка
		СтароеЗначение = ПредопределенноеЗначение(ТекДанные.ПараметрДействия);
	Исключение
		ЧастиИмениЗначения = СтрРазделить(ТекДанные.ПараметрДействия, ".");
		ЧастиИмениЗначения[ЧастиИмениЗначения.ВГраница()] = "ПустаяСсылка";
		СтароеЗначение = ПредопределенноеЗначение(СтрСоединить(ЧастиИмениЗначения, "."));
	КонецПопытки;
	
	ЧастиИмениЗначения = СтрРазделить(ТекДанные.ПараметрДействия, ".");
	ИмяЗначенияКраткое = ЧастиИмениЗначения[ЧастиИмениЗначения.ВГраница()];
	ПараметрыФормы = Новый Структура("Значение, ИмяЗначения", СтароеЗначение, ИмяЗначенияКраткое);
	ОткрытьФорму("ВнешняяОбработка.Инструментики.Форма.ОбъектыМетаданных_ЗаменаПредопределенного", ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Асинх Процедура ОткрытьДинамическийСписокСПроизвольнойТаблицей(Команда)
	ИмяТаблицы = Ждать ВвестиСтрокуАсинх("", "Имя таблицы");
	Если Не ЗначениеЗаполнено(ИмяТаблицы) Тогда
		Возврат;
	КонецЕсли;
	
	СделатьОсновной = Ждать ВопросАсинх("Сделать таблицу основной таблицей динамического списка?", РежимДиалогаВопрос.ДаНет);
	
	ПараметрыФормы = Новый Структура("ИмяТаблицы", ИмяТаблицы);
	Если СделатьОсновной = КодВозвратаДиалога.Нет Тогда
		ПараметрыФормы.Вставить("НеУстанавливатьОсновнуюТаблицу");
	КонецЕсли;
	ОткрытьФорму("ВнешняяОбработка.Инструментики.Форма.ДинамическийСписок", ПараметрыФормы,, ИмяТаблицы);
КонецПроцедуры

&НаКлиенте
Процедура СфокусироватьСтрокуПоиска(Команда)
	ТекущийЭлемент = Элементы.СтрокаПоиска;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Добавляет строку, предщставляющую объект метаданных, в дерево функций
//
// Параметры:
//  Группа - КоллекцияСтрокДереваЗначений - Коллекция строк дерева, в которое будет добавлена новая строка
//  Наименование - Строка - Колонка "Наименование"
//  ИмяВКонфигураторе - Строка - Колонка "Имя в конфигураторе"
//  РасширениеКонфигурации - Строка - Колонка "Расширение конфигурации". Если объект метаданных принадлежит основной конфигурации, следует передавать пустую строку
//  Действие - Строка - Действие, выполняемое при выборе строки пользователем
//  ПараметрДействия - Произвольный - См. параметр "Действие"
//  НомерКартинки - Число - Порядковый (начиная с 0) номер картинки, используется в качестве данных картинки строк в дереве на форме
//  ТабличныеЧасти - СписокЗначений, Неопределено - Список табличных частей объекта метаданных
&НаСервере
Функция ДобавитьЭлементДерева(Группа, Наименование, ИмяВКонфигураторе, РасширениеКонфигурации, Действие, ПараметрДействия, НомерКартинки, ТабличныеЧасти = Неопределено)
	Элемент = Группа.Строки.Добавить();
	Элемент.Наименование = Наименование;
	Элемент.РасширениеКонфигурации = РасширениеКонфигурации;
	Элемент.ИмяВКонфигураторе = ИмяВКонфигураторе;
	Элемент.Действие = Действие;
	Элемент.ПараметрДействия = ПараметрДействия;
	Элемент.НомерКартинки = НомерКартинки;
	Элемент.ТабличныеЧасти = ТабличныеЧасти;
	Возврат Элемент;
КонецФункции

// Добавляет в дерево группу целую коллекцию объектов метаданных
//
// Параметры:
//  Дерево - ДеревоЗначений -
//  КоллекцияМетаданных - КоллекцияОбъектовМетаданных - коллекция, по данным которой будет заполнена группа объектов
//  ИмяГруппыДерева - Строка - Имя создаваемой группы дерева. Например, тип объектов метаданных
//  ШаблонИмениФормы - Строка - См. ДобавитьЭлементДерева(), параметр "Действие", пояснение значения "ОткрытьФорму"
//  НомерКартинки - Число - См. ДобавитьЭлементДерева(), параметр НомерКартинки
//  ШаблонПредопределенного - Строка - Шаблон для имени предопределенного значения
//                                     Вместо %1 подставляется имя объекта метаданних (напр., "Справочник")
//                                     Вместо %2 подставляется имя значения
&НаСервере
Процедура ДобавитьМетаданныеИзКоллекции(Дерево, КоллекцияМетаданных, ИмяГруппыДерева, НомерКартинки = 0, ПоддерживаетДинамическийСписок, ПоддерживаетПредопределенные)
	ГруппаДерева = Дерево.Строки.Добавить();
	ГруппаДерева.Наименование = ИмяГруппыДерева;
	ГруппаДерева.НомерКартинки = НомерКартинки;
	Для Каждого Мета Из КоллекцияМетаданных Цикл
		ПолноеИмя = Мета.ПолноеИмя();
		ТипОбъектаМетаданных = СтрРазделить(ПолноеИмя, ".")[0];
		
		ИмяРасширения = ?(Мета.РасширениеКонфигурации() <> Неопределено, Мета.РасширениеКонфигурации().Имя, "");
		
		ТабличныеЧасти = Новый СписокЗначений;
		
		СписокТЧМета = Новый Массив;
		//Попытка
		//	СписокТЧМета = Мета.ТабличныеЧасти;
		//Исключение
		//	//
		//КонецПопытки;
		Если ОбъектМетаданныхИмеетТабличныеЧасти(ТипОбъектаМетаданных) Тогда
			СписокТЧМета = Мета.ТабличныеЧасти;
		КонецЕсли;
		
		Для Каждого МетаТЧ Из СписокТЧМета Цикл
			ТабличныеЧасти.Добавить(СтрШаблон("%1.%2", ПолноеИмя, МетаТЧ.Имя), ?(ЗначениеЗаполнено(МетаТЧ.Синоним), МетаТЧ.Синоним, МетаТЧ.Имя));
		КонецЦикла;
		
		Если КоллекцияМетаданных = Метаданные.Константы Тогда
			ФормаПоУмолчанию = ПолноеИмя + ".ФормаКонстант";
		ИначеЕсли КоллекцияМетаданных = Метаданные.Отчеты Тогда
			ФормаПоУмолчанию = ПолноеИмя + ".Форма";
		ИначеЕсли КоллекцияМетаданных = Метаданные.Обработки Тогда
			ФормаПоУмолчанию = ПолноеИмя + ".Форма";
		Иначе
			ФормаПоУмолчанию = ПолноеИмя + ".ФормаСписка";
		КонецЕсли;
		
		ПараметрДействия = Новый Структура;
		ПараметрДействия.Вставить("ПолноеИмяМетаданных", ПолноеИмя);
		ПараметрДействия.Вставить("ФормаПоУмолчанию", ФормаПоУмолчанию);
		ПараметрДействия.Вставить("ПравоПросмотра", ПравоДоступа("Просмотр", Мета));
		ПараметрДействия.Вставить("ПоддерживаетДинамическийСписок", ПоддерживаетДинамическийСписок);
		ПараметрДействия.Вставить("ИмеетТаблицуРегистрации", мОбъектыИмеющиеТаблицыРегистрации.Найти(Мета, "Объект") <> Неопределено);
		ПараметрДействия.Вставить("ИмеетПустуюСсылку", ИмеетПустуюСсылкуМетаданных(ТипОбъектаМетаданных));
		
		ЭлементДерева = ДобавитьЭлементДерева(ГруппаДерева, Мета.Синоним, Мета.Имя, ИмяРасширения, "ОбъектМетаданных", Новый ФиксированнаяСтруктура(ПараметрДействия), НомерКартинки, ТабличныеЧасти);
		
		Если ПоддерживаетПредопределенные Тогда
			Для Каждого ИмяПредопределенного Из Мета.ПолучитьИменаПредопределенных() Цикл
				ПолноеИмяПредопределенного = СтрШаблон("%1.%2", ПолноеИмя, ИмяПредопределенного);
				ДобавитьЭлементДерева(ЭлементДерева, ИмяПредопределенного, ИмяПредопределенного, "", "ПредопределенноеЗначение", ПолноеИмяПредопределенного, 20);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	ГруппаДерева.Строки.Сортировать("Наименование Возр, ИмяВКонфигураторе Возр");
КонецПроцедуры

// Показать диалог выбора отбора по расширениям и установить его
//
&НаКлиенте
Асинх Процедура НастроитьОтборПоРасширениямАсинх()
	ПараметрыФормы = Новый Структура("Список, Режим", ОтборПоРасширениям, "ВыборЭлементов");
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораРасширенийДляОтбора", ЭтотОбъект);
	ОткрытьФорму("ВнешняяОбработка.Инструментики.Форма.Общая_СписокЗначений", ПараметрыФормы,,,,, ОписаниеОповещения);
КонецПроцедуры

// Обработчик закрытия формы выбора расширений в списке
//
// Параметры:
//  Результат - Неопределено, СписокЗначений - Список расширений с установленными пользователем пометками
//  ДополнительныеПараметры - Произвольный - Не используется этой процедурой
&НаКлиенте
Асинх Процедура ПослеВыбораРасширенийДляОтбора(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОтборПоРасширениям = Результат;
	
	ВыбранаОсновнаяКонфигурация = Ложь;
	ВыбраноХотяБыОдноРасширение = Ложь;
	ВыбраныВсеРасширения = Истина;
	
	Для Каждого Элемент Из Результат Цикл
		Если Не Элемент.Пометка Тогда
			Если Не ПустаяСтрока(Элемент.Значение) Тогда // Это расширение
				ВыбраныВсеРасширения = Ложь;
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Если ПустаяСтрока(Элемент.Значение) Тогда // Это основная конфигурация
			ВыбранаОсновнаяКонфигурация = Истина;
		Иначе // Это расширение
			ВыбраноХотяБыОдноРасширение = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ВыбранаОсновнаяКонфигурация И Не ВыбраноХотяБыОдноРасширение Тогда
		ОтборПоРасширениямПредставление = "Ничего не отображаем";
	ИначеЕсли ВыбранаОсновнаяКонфигурация И Не ВыбраноХотяБыОдноРасширение Тогда
		ОтборПоРасширениямПредставление = "Только основная конфигурация";
	ИначеЕсли ВыбранаОсновнаяКонфигурация И ВыбраноХотяБыОдноРасширение И Не ВыбраныВсеРасширения Тогда
		ОтборПоРасширениямПредставление = "Основная конфигурация и часть расширений";
	ИначеЕсли ВыбранаОсновнаяКонфигурация И ВыбраныВсеРасширения Тогда
		ОтборПоРасширениямПредставление = "Основная конфигурация и все расширения";
	ИначеЕсли Не ВыбранаОсновнаяКонфигурация И Не ВыбраныВсеРасширения Тогда
		ОтборПоРасширениямПредставление = "Только часть расширений";
	ИначеЕсли Не ВыбранаОсновнаяКонфигурация И ВыбраныВсеРасширения Тогда
		ОтборПоРасширениямПредставление = "Только расширения";
	Иначе
		ОтборПоРасширениямПредставление = СтрШаблон("не удалось сформировать представление (%1/%2/%3)", ВыбранаОсновнаяКонфигурация, ВыбраноХотяБыОдноРасширение, ВыбраныВсеРасширения);
	КонецЕсли;
	
	ВызватьЗаполнениеДереваФункций();
КонецПроцедуры

// Вызывает процедуру ЗаполнитьДеревоФункций() и отображает состояние ожидания заполнения в интерфейсе
// Следует использовать в клиентском коде вместо прямого вызова серверной процедуры ЗаполнитьДеревоФункций()
//
&НаКлиенте
Процедура ВызватьЗаполнениеДереваФункций(РазрешитьИспользованиеКеша = Истина)
	Состояние("Обновление дерева...");
	
	ЗаполнитьДеревоФункций(РазрешитьИспользованиеКеша);
	
	Если ЗначениеЗаполнено(СтрокаПоиска) Тогда
		Для Каждого Элемент Из ДеревоФункций.ПолучитьЭлементы() Цикл
			Элементы.ДеревоФункций.Развернуть(Элемент.ПолучитьИдентификатор(), Истина);
		КонецЦикла;
	КонецЕсли;
	
	Состояние("Дерево обновлено",,, БиблиотекаКартинок.ОформлениеЗнакФлажок);
КонецПроцедуры

#Область КешДереваФункций

&НаСервереБезКонтекста
Функция НовыйКешДереваФункций()
	Результат = Новый Структура;
	
	Результат.Вставить("ВерсияОсновнойКонфигурации", "");
	Результат.Вставить("ХешИнформацииОРасширениях", "");
	Результат.Вставить("ДеревоФункций", Новый ДеревоЗначений);
	
	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Функция ХешИнформацииОРасширениях()
	ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.MD5);
	
	Для Каждого Расширение Из РасширенияКонфигурации.Получить(Новый Структура) Цикл
		Если Не Расширение.Активно Тогда
			Продолжить;
		КонецЕсли;
		
		ХешированиеДанных.Добавить(Расширение.ХешСумма);
	КонецЦикла;
	
	Возврат ПолучитьBase64СтрокуИзДвоичныхДанных(ХешированиеДанных.ХешСумма);
КонецФункции

&НаСервере
Функция ЗакешированноеДеревоФункций()
	Кеш = РеквизитФормыВЗначение("Объект").СохраненнаяНастройка("ОбъектыМетаданных", "КешДереваФункций");
	Если Кеш = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Кеш.ВерсияОсновнойКонфигурации <> Метаданные.Версия Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Кеш.ХешИнформацииОРасширениях <> ХешИнформацииОРасширениях() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Кеш.ДеревоФункций;
КонецФункции

&НаСервере
Процедура ЗакешироватьДеревоФункций(Дерево)
	КешДереваФункций = НовыйКешДереваФункций();
	КешДереваФункций.ВерсияОсновнойКонфигурации = Метаданные.Версия;
	КешДереваФункций.ХешИнформацииОРасширениях = ХешИнформацииОРасширениях();
	КешДереваФункций.ДеревоФункций = Дерево;
	
	РеквизитФормыВЗначение("Объект").СохранитьНастройку("ОбъектыМетаданных", "КешДереваФункций", КешДереваФункций);
КонецПроцедуры

#КонецОбласти

// Очищает и заполняет данными дерево функций
//
&НаСервере
Процедура ЗаполнитьДеревоФункций(РазрешитьИспользованиеКеша = Истина)
	Дерево = ЗакешированноеДеревоФункций();
	Если Дерево = Неопределено Или Не РазрешитьИспользованиеКеша Тогда
		Дерево = РеквизитФормыВЗначение("ДеревоФункций");
		Дерево.Строки.Очистить(); 
		
		мОбъектыИмеющиеТаблицыРегистрации = Новый ТаблицаЗначений;
		мОбъектыИмеющиеТаблицыРегистрации.Колонки.Добавить("Объект");
		мОбъектыИмеющиеТаблицыРегистрации.Индексы.Добавить("Объект");
		
		Для Каждого План Из Метаданные.ПланыОбмена Цикл
			Для Каждого ЭлементСостава Из План.Состав Цикл
				СтрТаблицы = мОбъектыИмеющиеТаблицыРегистрации.Добавить();
				СтрТаблицы.Объект = ЭлементСостава.Метаданные;
			КонецЦикла;
		КонецЦикла;
		
		ДобавитьМетаданныеИзКоллекции(Дерево, Метаданные.Константы, "Константы", 1, Ложь, Ложь);
		ДобавитьМетаданныеИзКоллекции(Дерево, Метаданные.Справочники, "Справочники", 2, Истина, Истина);
		ДобавитьМетаданныеИзКоллекции(Дерево, Метаданные.Документы, "Документы", 3, Истина, Ложь);
		ДобавитьМетаданныеИзКоллекции(Дерево, Метаданные.ЖурналыДокументов, "Журналы документов", 4, Истина, Ложь);
		ДобавитьПоследовательности(Дерево);
		ДобавитьПеречисления(Дерево);
		ДобавитьМетаданныеИзКоллекции(Дерево, Метаданные.Отчеты, "Отчёты", 5, Ложь, Ложь);
		ДобавитьМетаданныеИзКоллекции(Дерево, Метаданные.Обработки, "Обработки", 6, Ложь, Ложь);
		ДобавитьМетаданныеИзКоллекции(Дерево, Метаданные.ПланыВидовХарактеристик, "Планы видов характеристик", 7, Истина, Истина);
		ДобавитьМетаданныеИзКоллекции(Дерево, Метаданные.ПланыСчетов, "Планы счетов", 8, Истина, Истина);
		ДобавитьМетаданныеИзКоллекции(Дерево, Метаданные.ПланыВидовРасчета, "Планы видов расчёта", 9, Истина, Истина);
		ДобавитьМетаданныеИзКоллекции(Дерево, Метаданные.РегистрыСведений, "Регистры сведений", 10, Истина, Ложь);
		ДобавитьМетаданныеИзКоллекции(Дерево, Метаданные.РегистрыНакопления, "Регистры накопления", 11, Истина, Ложь);
		ДобавитьМетаданныеИзКоллекции(Дерево, Метаданные.РегистрыБухгалтерии, "Регистры бухгалтерии", 12, Истина, Ложь);
		ДобавитьМетаданныеИзКоллекции(Дерево, Метаданные.РегистрыРасчета, "Регистры расчёта", 13, Истина, Ложь);
		ДобавитьМетаданныеИзКоллекции(Дерево, Метаданные.БизнесПроцессы, "Бизнес-процессы", 14, Истина, Ложь);
		ДобавитьМетаданныеИзКоллекции(Дерево, Метаданные.Задачи, "Задачи", 15, Истина, Ложь);
		ДобавитьМетаданныеИзКоллекции(Дерево, Метаданные.ПланыОбмена, "Планы обмена", 17, Истина, Ложь);
			
		ЗаполнитьДеревоСтандартнымиОбработками(Дерево);
		
		ЗакешироватьДеревоФункций(Дерево);
		
		Элементы.ГруппаИспользуетсяКеш.Видимость = Ложь;
	Иначе
		Элементы.ГруппаИспользуетсяКеш.Видимость = Истина;
	КонецЕсли;
	
	СтрокиПоиска = СтрРазделить(ВРег(СтрокаПоиска), " ", Ложь);
	
	ИспользуемыеРасширения = Новый Массив;
	Для Каждого ЭлементОтбора Из ОтборПоРасширениям Цикл
		Если ЭлементОтбора.Пометка Тогда
			ИспользуемыеРасширения.Добавить(ЭлементОтбора.Значение);
		КонецЕсли;
	КонецЦикла;
	Если ИспользуемыеРасширения.Количество() < ОтборПоРасширениям.Количество() Тогда
		Для Каждого КатегорияМетаданных Из Дерево.Строки Цикл
			ОтфильтроватьСтрокиДереваПоОтборуРасширений(КатегорияМетаданных.Строки, ИспользуемыеРасширения);
		КонецЦикла;
	КонецЕсли;
	
	ОтфильтроватьСтрокиДереваПоСтрокеПоиска(Дерево.Строки, СтрокиПоиска);
	
	Для Каждого КатегорияМетаданных Из Дерево.Строки Цикл
		КатегорияМетаданных.ГруппаСодержитОбъекты = КатегорияМетаданных.Строки.Количество() > 0;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(Дерево, "ДеревоФункций");
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтфильтроватьСтрокиДереваПоОтборуРасширений(СтрокиДереваЗначений, ИспользуемыеРасширения)
	Сч = 0;
	Пока Сч < СтрокиДереваЗначений.Количество() Цикл
		Строка = СтрокиДереваЗначений[Сч];
		
		ОтфильтроватьСтрокиДереваПоОтборуРасширений(Строка.Строки, ИспользуемыеРасширения);
		
		Если Строка.Строки.Количество() = 0 И ИспользуемыеРасширения.Найти(Строка.РасширениеКонфигурации) = Неопределено Тогда
			СтрокиДереваЗначений.Удалить(Строка);
		Иначе
			Сч = Сч + 1;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭлементДереваСоответствуетОтборуПоРасширениям(СтрокаДереваЗначений, ИспользуемыеРасширения)
	Если ИспользуемыеРасширения.Найти(СтрокаДереваЗначений.РасширениеКонфигурации) <> Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Для Каждого ПодчиненнаяСтрока Из СтрокаДереваЗначений.Строки Цикл
		Если ЭлементДереваСоответствуетОтборуПоРасширениям(ПодчиненнаяСтрока, ИспользуемыеРасширения) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции

// Создаёт и заполняет группу "Стандартные"
//
// Параметры:
//  Дерево - ДеревоЗначений - Дерево функций
&НаСервере
Процедура ЗаполнитьДеревоСтандартнымиОбработками(Дерево)
	ГруппаСтандартные = Дерево.Строки.Добавить();
	ГруппаСтандартные.Наименование = "Стандартные";
	ГруппаСтандартные.НомерКартинки = 18;
	
	ДобавитьСтандартнуюОбработку(ГруппаСтандартные, "StandardActiveUsers", "Активные пользователи");
	ДобавитьСтандартнуюОбработку(ГруппаСтандартные, "StandardAnalyticsSystemManagement", "Управление системой аналитики");
	ДобавитьСтандартнуюОбработку(ГруппаСтандартные, "StandardDataBaseCopiesManagement", "Управление копиями базы данных");
	ДобавитьСтандартнуюОбработку(ГруппаСтандартные, "StandardDataChangeHistory", "История изменений данных");
	ДобавитьСтандартнуюОбработку(ГруппаСтандартные, "StandardDeleteMarkedObjects", "Удаление помеченных объектов");
	ДобавитьСтандартнуюОбработку(ГруппаСтандартные, "StandardDocumentsPosting", "Проведение документов");
	ДобавитьСтандартнуюОбработку(ГруппаСтандартные, "StandardECSRegister", "Регистрация абонента сервиса и приложения");
	ДобавитьСтандартнуюОбработку(ГруппаСтандартные, "StandardErrorProcessingSettings", "Управление настройками обработки ошибок");
	ДобавитьСтандартнуюОбработку(ГруппаСтандартные, "StandardEventLog", "Журнал регистрации");
	ДобавитьСтандартнуюОбработку(ГруппаСтандартные, "StandardExtensionsManagement", "Управление расширениями конфигурации");
	ДобавитьСтандартнуюОбработку(ГруппаСтандартные, "StandardConfigurationExtensionsManagement", "Управление расширениями конфигурации (вариант 2)");
	ДобавитьСтандартнуюОбработку(ГруппаСтандартные, "StandardExternalDataSourcesManagement", "Управление внешними источниками данных");
	ДобавитьСтандартнуюОбработку(ГруппаСтандартные, "StandardFindByRef", "Поиск ссылок на объект");
	ДобавитьСтандартнуюОбработку(ГруппаСтандартные, "StandardFullTextSearchManagement", "Управление полнотекстовым поиском");
	ДобавитьСтандартнуюОбработку(ГруппаСтандартные, "StandardIntegrationServicesManagment", "Управление сервисами интеграции");
	ДобавитьСтандартнуюОбработку(ГруппаСтандартные, "StandardTotalsManagement", "Управление итогами");
	ДобавитьСтандартнуюОбработку(ГруппаСтандартные, "StandartServersControl", "Управление серверами");
	ДобавитьСтандартнуюОбработку(ГруппаСтандартные, "QueryWizard", "Конструктор запроса");
	ДобавитьСтандартнуюОбработку(ГруппаСтандартные, "StandardAdditionalAuthenticationSettings", "Дополнительные настройки аутентификации");
	ДобавитьСтандартнуюОбработку(ГруппаСтандартные, "StandardAuthenticationLocks", "Список блокировок аутентификации пользователей");
	ДобавитьСтандартнуюОбработку(ГруппаСтандартные, "StandardBinaryDataStorageManagement", "Управление хранилищем двоичных данных");
	ДобавитьСтандартнуюОбработку(ГруппаСтандартные, "StandardCollaborationSystemManagement", "Регистрация абонента сервиса и приложения (вариант 2)");
	ДобавитьСтандартнуюОбработку(ГруппаСтандартные, "StandardConfigurationLicense", "Лицензирование конфигурации");
	ДобавитьСтандартнуюОбработку(ГруппаСтандартные, "StandardDatabaseTablespaceManagement", "Управление табличными пространствами базы данных");
	ДобавитьСтандартнуюОбработку(ГруппаСтандартные, "StandardEventLogSettings", "Настройка журнала регистрации");
	ДобавитьСтандартнуюОбработку(ГруппаСтандартные, "StandardFindByReference", "Поиск ссылок на объект (вариант 2)");
	ДобавитьСтандартнуюОбработку(ГруппаСтандартные, "StandardInfobaseParameters", "Параметры информационной базы");
	ДобавитьСтандартнуюОбработку(ГруппаСтандартные, "StandardInfobaseRegionalSettings", "Региональные установки информационной базы");
	ДобавитьСтандартнуюОбработку(ГруппаСтандартные, "StandardLicenseAcquisition", "Получение лицензии");
	ДобавитьСтандартнуюОбработку(ГруппаСтандартные, "StandardMobileAppBuilderServiceLoader", "Сервис сборки мобильных приложений");
	ДобавитьСтандартнуюОбработку(ГруппаСтандартные, "StandardServersManagement", "Управление серверами (вариант 2)");
	ДобавитьСтандартнуюОбработку(ГруппаСтандартные, "StandardSpeechToText", "Управление распознаванием речи");
	ДобавитьСтандартнуюОбработку(ГруппаСтандартные, "StandardUserList", "Список пользователей");
	
	ГруппаСтандартные.Строки.Сортировать("Наименование Возр, ИмяВКонфигураторе Возр");
КонецПроцедуры

// Добавить элемент группы "Стандартные"
//
// Параметры:
//  ГруппаДерева - СтрокаДереваЗначений -
//  Имя - Строка - Имя обработки как в ресурсах платформы (например, StandartActiveUsers)
//  Наименование - Строка - Выводимое пользователю наименование
&НаСервере
Процедура ДобавитьСтандартнуюОбработку(ГруппаДерева, Имя, Наименование)
	ДобавитьЭлементДерева(ГруппаДерева, Наименование, Имя, "", "СтандартнаяОбработка", Имя, 18);
КонецПроцедуры

// Попытаться подключить стандартную обработку из ресурсов платформы
//
// Параметры:
//  Имя - Строка - Имя обработки в ресурсах платформы
//
// Возвращаемое значение:
//  Булево - Удалось ли подключить обработку
&НаСервереБезКонтекста
Функция ПодключитьСтандартнуюОбработку(Имя)
	Попытка
		ВнешниеОбработки.Подключить(СтрШаблон("v8res://mngbase/%1.epf", Имя), Имя, Ложь);
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
КонецФункции

// Помещает файл стандартной обработки во временное хранилище
//
// Параметры:
//  Имя - Строка - Имя стандартной обработки
//  УникальныйИдентификаторФормы - УникальныйИдентификатор - УИ текущей формы
//
// Возвращаемое значение:
//  Строка - Адрес во временном хранилище
//  Неопределено - при невозможности извлечь файл из ресурсов платформы
&НаСервереБезКонтекста
Функция ПоместитьСтандартнуюОбработкуВоВремХранилище(Имя, УникальныйИдентификаторФормы)
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("epf");
	Попытка
		КопироватьФайл(СтрШаблон("v8res://mngbase/%1.epf", Имя), ИмяВременногоФайла);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	ДвДанные = Новый ДвоичныеДанные(ИмяВременногоФайла);
	АдресВХ = ПоместитьВоВременноеХранилище(ДвДанные, УникальныйИдентификаторФормы);
	УдалитьФайлы(ИмяВременногоФайла);
	Возврат АдресВХ;
КонецФункции

// Добавляет в дерево функций перечисления и их значения
//
// Параметры:
//  Дерево - ДеревоЗначений -
&НаСервере
Процедура ДобавитьПеречисления(Дерево)
	Группа = Дерево.Строки.Добавить();
	Группа.Наименование = "Перечисления";
	Группа.НомерКартинки = 19;
	
	Для Каждого Мета Из Метаданные.Перечисления Цикл
		ИмяРасширения = ?(Мета.РасширениеКонфигурации() <> Неопределено, Мета.РасширениеКонфигурации().Имя, "");
		
		ГруппаПеречисление = Группа.Строки.Добавить();
		ГруппаПеречисление.ИмяВКонфигураторе = Мета.Имя;
		ГруппаПеречисление.Наименование = Мета.Синоним;
		ГруппаПеречисление.НомерКартинки = 19;
		ГруппаПеречисление.РасширениеКонфигурации = ИмяРасширения;
		
		Для Каждого Значение Из Мета.ЗначенияПеречисления Цикл
			ИмяРасширенияЗначения = ?(Значение.РасширениеКонфигурации() <> Неопределено, Значение.РасширениеКонфигурации().Имя, "");
			
			ЗначениеВДереве = ГруппаПеречисление.Строки.Добавить();
			ЗначениеВДереве.ИмяВКонфигураторе = Значение.Имя;
			ЗначениеВДереве.ПараметрДействия = СтрШаблон("Перечисление.%1.%2", Мета.Имя, Значение.Имя);
			ЗначениеВДереве.Наименование = Значение.Синоним;
			ЗначениеВДереве.НомерКартинки = 19;
			ЗначениеВДереве.РасширениеКонфигурации = ИмяРасширенияЗначения;
			ЗначениеВДереве.Действие = "ЗначениеПеречисления";
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

// Формирует список доступных виртуальных таблиц регистра
//
// Параметры:
//  ВидРегистра - Строка - Одно из "РегистрСведений", "РегистрНакопления", "РегистрРасчета", "РегистрБухгалтерии"
//  ИмяРегистра - Строка -
//
// Возвращемое значение:
//  СписокЗначений из Строка - Имена доступных таблиц в виде, готовом для подстановки в запрос (напр., "РегистрНакопления.ТоварыНаСкладах.Остатки")
//                             Всегда содержит запись основной таблицы (не виртуальной) с представлением "Детальные записи"
&НаСервереБезКонтекста
Функция СписокВиртуальныхТаблицРегистра(ПолноеИмяМетаданных)
	Результат = Новый СписокЗначений;
	Результат.Добавить(ПолноеИмяМетаданных, "Детальные записи");
	Мета = Метаданные.НайтиПоПолномуИмени(ПолноеИмяМетаданных);
	
	Если СтрНачинаетсяС(ПолноеИмяМетаданных, "РегистрСведений.") Тогда
		Если Мета.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
			Результат.Добавить(СтрШаблон("%1.СрезПервых", ПолноеИмяМетаданных), "Срез первых");
			Результат.Добавить(СтрШаблон("%1.СрезПоследних", ПолноеИмяМетаданных), "Срез последних");
		КонецЕсли;
	ИначеЕсли СтрНачинаетсяС(ПолноеИмяМетаданных, "РегистрНакопления.") Тогда
		Если Мета.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки Тогда
			Результат.Добавить(СтрШаблон("%1.Остатки", ПолноеИмяМетаданных), "Остатки");
			Результат.Добавить(СтрШаблон("%1.Обороты", ПолноеИмяМетаданных), "Обороты");
			Результат.Добавить(СтрШаблон("%1.ОстаткиИОбороты", ПолноеИмяМетаданных), "Остатки и обороты");
		Иначе
			// Дублирую код, чтобы Обороты не стали первым или последним пунктом в остаточных регистрах
			Результат.Добавить(СтрШаблон("%1.Обороты", ПолноеИмяМетаданных), "Обороты");
		КонецЕсли;
	ИначеЕсли СтрНачинаетсяС(ПолноеИмяМетаданных, "РегистрБухгалтерии.") Тогда
		Результат.Добавить(СтрШаблон("%1.ДвиженияССубконто", ПолноеИмяМетаданных), "ДвиженияССубконто");
		Результат.Добавить(СтрШаблон("%1.Обороты", ПолноеИмяМетаданных), "Обороты");
		Результат.Добавить(СтрШаблон("%1.ОборотыДтКт", ПолноеИмяМетаданных), "ОборотыДтКт");
		Результат.Добавить(СтрШаблон("%1.Остатки", ПолноеИмяМетаданных), "Остатки");
		Результат.Добавить(СтрШаблон("%1.ОстаткиИОбороты", ПолноеИмяМетаданных), "ОстаткиИОбороты");
		Результат.Добавить(СтрШаблон("%1.Субконто", ПолноеИмяМетаданных), "Субконто");
	ИначеЕсли СтрНачинаетсяС(ПолноеИмяМетаданных, "РегистрРасчета.") Тогда
		// При использовании этой таблицы сейчас есть проблемы
		// Результат.Добавить(СтрШаблон("%1.%2.БазаНачисления", ПолноеИмяМетаданных), "База начисления");
		
		Если Мета.ПериодДействия Тогда
			Результат.Добавить(СтрШаблон("%1.ДанныеГрафика", ПолноеИмяМетаданных), "Данные графика");
			Результат.Добавить(СтрШаблон("%1.ФактическийПериодДействия", ПолноеИмяМетаданных), "Фактический период действия");
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Добавляет в дерево функций сведения о последовательностях конфигурации
//
// Параметры:
//  Дерево - ДеревоЗначений -
&НаСервере
Процедура ДобавитьПоследовательности(Дерево)
	Группа = Дерево.Строки.Добавить();
	Группа.Наименование = "Последовательности";
	Группа.НомерКартинки = 21;
	
	Для Каждого Мета Из Метаданные.Последовательности Цикл
		ИмяРасширения = ?(Мета.РасширениеКонфигурации() <> Неопределено, Мета.РасширениеКонфигурации().Имя, "");
		
		ДобавитьЭлементДерева(Группа, Мета.Синоним, Мета.Имя, Мета.РасширениеКонфигурации(), "Последовательность", Мета.Имя, 21);
	КонецЦикла;
КонецПроцедуры

// Формирует список табличных частей переданного объекта метаданных
// Если объект метаданных не поддерживает табличные части, возвращается пустой список
//
// Параметры:
//  ПолноеИмяМетаданных - Строка - Например, "Справочник.Банки"
//
// Возвращаемое значение:
//  СписокЗначений из Строка - Значением является полное имя ТЧ (например, "Справочник.Организации.ДополнительныеРеквизиты")
//                             Представлением является синоним табличной части
&НаСервереБезКонтекста
Функция ИменаТабличныхЧастейМетаданных(ПолноеИмяМетаданных)
	ТаблЧасти = Новый СписокЗначений;
	
	Попытка
		МетаданныеТЧ = Метаданные.НайтиПоПолномуИмени(ПолноеИмяМетаданных).ТабличныеЧасти;
	Исключение
		Возврат ТаблЧасти;
	КонецПопытки;
	
	Для Каждого Мета Из МетаданныеТЧ Цикл
		ТаблЧасти.Добавить(ПолноеИмяМетаданных + "." + Мета.Имя, Мета.Синоним);
	КонецЦикла;
	
	Возврат ТаблЧасти;
КонецФункции

//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных -
//
// Возвращаемое значение:
//  Булево - Является ли данный объект метаданных объектом ссылочного типа (справочник, документ и т.д.)
&НаСервереБезКонтекста
Функция ИмеетПустуюСсылкуМетаданных(ТипОбъектаМетаданных)
	Возврат (ТипОбъектаМетаданных = "Справочник" Или ТипОбъектаМетаданных = "Документ" Или ТипОбъектаМетаданных = "Перечисление" Или ТипОбъектаМетаданных = "ПланВидовХарактеристик"
	         Или ТипОбъектаМетаданных = "ПланСчетов" Или ТипОбъектаМетаданных = "ПланВидовРасчета" Или ТипОбъектаМетаданных = "ПланОбмена");
КонецФункции

&НаСервереБезКонтекста
Процедура ОтфильтроватьСтрокиДереваПоСтрокеПоиска(СтрокиДереваЗначений, СтрокиПоиска)
	Если СтрокиПоиска.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Сч = 0;
	Пока Сч < СтрокиДереваЗначений.Количество() Цикл
		Строка = СтрокиДереваЗначений[Сч];
		
		ОтфильтроватьСтрокиДереваПоСтрокеПоиска(Строка.Строки, СтрокиПоиска);
		
		Если Строка.Строки.Количество() = 0 И Не СтрокаСоответствуетСтрокамПоиска(Строка.Наименование, СтрокиПоиска) И Не СтрокаСоответствуетСтрокамПоиска(Строка.ИмяВКонфигураторе, СтрокиПоиска) Тогда
			СтрокиДереваЗначений.Удалить(Строка);
		Иначе
			Сч = Сч + 1;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаСоответствуетСтрокамПоиска(ПроверяемаяСтрока, СтрокиПоиска)
	ПроверяемыеСтроки = СтрРазделить(ВРег(ПроверяемаяСтрока), " ", Ложь);
	
	Для СчСП = 0 По СтрокиПоиска.ВГраница() Цикл
		Найдено = Ложь;
		Для СчПС = 0 По ПроверяемыеСтроки.ВГраница() Цикл
			Если СтрНайти(ПроверяемыеСтроки[СчПС], СтрокиПоиска[СчСП]) <> 0 Тогда
				Найдено = Истина;
				Прервать; // Прерывание вложенного цикла с СчПС
			КонецЕсли;
		КонецЦикла;
		
		Если Не Найдено Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

&НаСервереБезКонтекста
Функция ОбъектМетаданныхИмеетТабличныеЧасти(ПолноеИмя)
	ПерваяЧастьПолногоИмени = СтрРазделить(ПолноеИмя, ".")[0];
	
	Возврат ПерваяЧастьПолногоИмени = "Справочник"
		Или ПерваяЧастьПолногоИмени = "Документ"
		Или ПерваяЧастьПолногоИмени = "ПланВидовХарактеристик"
		Или ПерваяЧастьПолногоИмени = "ПланСчетов"
		Или ПерваяЧастьПолногоИмени = "ПланВидовРасчета"
		Или ПерваяЧастьПолногоИмени = "БизнесПроцесс"
		Или ПерваяЧастьПолногоИмени = "Задача"
		Или ПерваяЧастьПолногоИмени = "ПланОбмена";
КонецФункции

#КонецОбласти
