
// --------------------------------------------------------------------------------
// Copyright (c) 2024 Igor Ryabov (https://github.com/IgorRyaboff/Instrumentiki)
// License: https://github.com/IgorRyaboff/Instrumentiki/blob/main/LICENSE
// --------------------------------------------------------------------------------

#Область ОписаниеПеременных

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если Не ЗавершениеРаботы Тогда
		УдаляемыеАдреса = Новый Массив;
		Для Каждого СтрФайлы Из ПриложенныеФайлы Цикл
			УдаляемыеАдреса.Добавить(СтрФайлы.Адрес);
		КонецЦикла;
		
		Если УдаляемыеАдреса.Количество() > 0 Тогда
			УдалитьНесколькоАдресовИзВременногоХранилища(УдаляемыеАдреса);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
// Код процедур и функций
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПриложенныеФайлы

&НаКлиенте
Процедура ПриложенныеФайлыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтрФайлы = Элемент.ТекущиеДанные;
	Если СтрФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПолучитьФайлССервераАсинх(СтрФайлы.Адрес, СтрФайлы.ИмяФайла, Новый ПараметрыДиалогаПолученияФайлов);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Асинх Процедура ОткрытьФайл(Команда)
	ПараметрыДиалога = Новый ПараметрыДиалогаПомещенияФайлов(, Ложь, НСтр("ru='Отчет об ошибке|*.zip|Все файлы|*'"));
	ОписаниеПомещенногоФайла = Ждать ПоместитьФайлНаСерверАсинх(,,, ПараметрыДиалога, УникальныйИдентификатор);
	Если ОписаниеПомещенногоФайла = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Состояние(НСтр("ru='Чтение отчета...'"));
	ОткрытьФайлНаСервере(ОписаниеПомещенногоФайла.Адрес);
	Заголовок = НСтр("ru='Просмотр отчетов об ошибках: '") + ОписаниеПомещенногоФайла.СсылкаНаФайл.Имя;
	Состояние();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОткрытьФайлНаСервере(Знач Адрес)
	Дерево = РеквизитФормыВЗначение("ОтчетОбОшибке");
	Дерево.Строки.Очистить();
	
	Для Каждого СтрФайлы Из ПриложенныеФайлы Цикл
		УдалитьИзВременногоХранилища(СтрФайлы.Адрес);
	КонецЦикла;
	ПриложенныеФайлы.Очистить();
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(Адрес);
	УдалитьИзВременногоХранилища(Адрес);
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("zip");
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	ДвоичныеДанные = Неопределено;
	
	Попытка
		ЧтениеZIP = Новый ЧтениеZipФайла;
		ЧтениеZIP.Открыть(ИмяВременногоФайла);
	Исключение
		ТекстОшибки = НСтр("ru = 'Не удалось открыть ZIP-архив. Возможно, он поврежден
                            |Ошибка: '") + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Сообщить(ТекстОшибки);
		
		ЧтениеZIP.Закрыть();
		Возврат;
	КонецПопытки;
	
	Если ЧтениеZIP.Элементы.Найти("report.json") = Неопределено Тогда
		Сообщить(НСтр("ru = 'Архив не содержит файла report.json, это не отчет об ошибке из 1С'"));
		УдалитьФайлы(ИмяВременногоФайла);
		Возврат;
	КонецЕсли;
	
	ИмяВременногоКаталога = СтрШаблон("%1%2\", КаталогВременныхФайлов(), Новый УникальныйИдентификатор);
	ЧтениеZIP.ИзвлечьВсе(ИмяВременногоКаталога);
	ЧтениеZIP.Закрыть();
	УдалитьФайлы(ИмяВременногоФайла);
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.ОткрытьФайл(ИмяВременногоКаталога + "report.json");
	
	Попытка
		ДанныеОтчета = ПрочитатьJSON(ЧтениеJSON);
	Исключение
		ТекстОшибки = НСтр("ru = 'Основной файл отчета report.json поврежден
                            |Ошибка: '") + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Сообщить(ТекстОшибки);
		
		ЧтениеJSON.Закрыть();
		УдалитьФайлы(ИмяВременногоКаталога);
		Возврат;
	КонецПопытки;
	ЧтениеJSON.Закрыть();
	
	ЧтениеТекста = Новый ЧтениеТекста(ИмяВременногоКаталога + "report.json", КодировкаТекста.UTF8);
	ТекстJSON = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();
	
	ДобавитьСтрокуДерева(Дерево, НСтр("ru='Время: '") + ДанныеОтчета.time);
	
	Строка = ДобавитьСтрокуДерева(Дерево, НСтр("ru='Информация о клиентском приложении'"));
	ДобавитьСтрокуДерева(Строка, НСтр("ru='ОС: '") + ДанныеОтчета.clientInfo.platformType);
	ДобавитьСтрокуДерева(Строка, НСтр("ru='Версия платформы 1С: '") + ДанныеОтчета.clientInfo.appVersion);
	ДобавитьСтрокуДерева(Строка, НСтр("ru='Имя приложения 1С: '") + ДанныеОтчета.clientInfo.appName);
	
	Строка = ДобавитьСтрокуДерева(Дерево, НСтр("ru='Информация о сеансе'"));
	ДобавитьСтрокуДерева(Строка, НСтр("ru='Разделители: '") + ДанныеОтчета.sessionInfo.dataSeparation);
	
	ИмяПользователя = ?(ДанныеОтчета.sessionInfo.Свойство("userName"), ДанныеОтчета.sessionInfo.userName, НСтр("ru='Не указано в отчете'"));
	ДобавитьСтрокуДерева(Строка, НСтр("ru='Имя пользователя: '") + ИмяПользователя);
	
	ДобавитьСтрокуДерева(Строка, НСтр("ru='Язык платформы: '") + ДанныеОтчета.sessionInfo.platformInterfaceLanguageCode);
	ДобавитьСтрокуДерева(Строка, НСтр("ru='Язык конфигурации: '") + ДанныеОтчета.sessionInfo.configurationInterfaceLanguageCode);
	ДобавитьСтрокуДерева(Строка, НСтр("ru='Локаль: '") + ДанныеОтчета.sessionInfo.localeCode);
	
	Строка = ДобавитьСтрокуДерева(Дерево, НСтр("ru='Информация об информационной базе'"));
	ДобавитьСтрокуДерева(Строка, НСтр("ru='Локаль: '") + ДанныеОтчета.infoBaseInfo.localeCode);
	
	Строка = ДобавитьСтрокуДерева(Дерево, НСтр("ru='Информация о сервере'"));
	ДобавитьСтрокуДерева(Строка, НСтр("ru='Версия платформы: '") + ДанныеОтчета.serverInfo.appVersion);
	ДобавитьСтрокуДерева(Строка, НСтр("ru='ОС: '") + ДанныеОтчета.serverInfo.type);
	ДобавитьСтрокуДерева(Строка, НСтр("ru='СУБД: '") + ДанныеОтчета.serverInfo.dbms);
	
	Строка = ДобавитьСтрокуДерева(Дерево, НСтр("ru='Информация о конфигурации'"));
	Если ДанныеОтчета.Свойство("configInfo") Тогда
		ДобавитьСтрокуДерева(Строка, НСтр("ru='Имя конфигурации: '") + ДанныеОтчета.configInfo.name);
		ДобавитьСтрокуДерева(Строка, НСтр("ru='Версия конфигурации: '") + ДанныеОтчета.configInfo.version);
		ДобавитьСтрокуДерева(Строка, НСтр("ru='Режим совместимости конфигурации: '") + ДанныеОтчета.configInfo.compatibilityMode);
		ДобавитьСтрокуДерева(Строка, НСтр("ru='Хеш-сумма конфигурации: '") + ДанныеОтчета.configInfo.hash);
		ДобавитьСтрокуДерева(Строка, НСтр("ru='Изменения разрешены: '") + ДанныеОтчета.configInfo.changeEnabled);
		
		Если ДанныеОтчета.configInfo.Свойство("extentions") Тогда
			Строка = ДобавитьСтрокуДерева(Строка, НСтр("ru='Установленные расширения'"));
			Для Каждого ДанныеРасширения Из ДанныеОтчета.configInfo.extentions Цикл
				ДобавитьСтрокуДерева(Строка, ДанныеРасширения[0], НСтр("ru='Хеш-сумма: '") + ДанныеРасширения[1]);
			КонецЦикла;
		Иначе
			Строка = ДобавитьСтрокуДерева(Строка, НСтр("ru='Расширений нет'"));
		КонецЕсли;
	Иначе
		ДобавитьСтрокуДерева(Строка, НСтр("ru='Раздел не включен в отчет'"));
	КонецЕсли;
	
	Строка = ДобавитьСтрокуДерева(Дерево, НСтр("ru='Информация об ошибке'"));
	
	ДобавитьСтрокуДерева(Строка, НСтр("ru='Представление ошибки (кликните для просмотра подробностей)'"), ПредставлениеНабораОшибок(ДанныеОтчета.errorInfo.applicationErrorInfo.errors));
	
	Если ДанныеОтчета.errorInfo.systemErrorInfo.Свойство("clientStack") Тогда
		ДобавитьСтрокуДерева(Строка, НСтр("ru='Стек платформы клиента (кликните для просмотра)'"), ДанныеОтчета.errorInfo.systemErrorInfo.clientStack);
		ДобавитьСтрокуДерева(Строка, НСтр("ru='Хеш стека платформы клиента (кликните для просмотра)'"), ДанныеОтчета.errorInfo.systemErrorInfo.clientStackHash);
	КонецЕсли;
	
	Если ДанныеОтчета.errorInfo.systemErrorInfo.Свойство("serverStack") Тогда
		ДобавитьСтрокуДерева(Строка, НСтр("ru='Стек платформы сервера (кликните для просмотра)'"), ДанныеОтчета.errorInfo.systemErrorInfo.serverStack);
		ДобавитьСтрокуДерева(Строка, НСтр("ru='Хеш стека платформы сервера (кликните для просмотра)'"), ДанныеОтчета.errorInfo.systemErrorInfo.serverStackHash);
	КонецЕсли;
	
	Если ДанныеОтчета.errorInfo.Свойство("stack") Тогда
		ДобавитьСтрокуДерева(Строка, НСтр("ru='Содержимое стека (кликните для просмотра подробностей)'"), ПредставлениеСтекаОшибки(ДанныеОтчета.errorInfo.applicationErrorInfo.stack));
	КонецЕсли;
	
	Если ДанныеОтчета.errorInfo.Свойство("userDescription") И ЗначениеЗаполнено(ДанныеОтчета.errorInfo.userDescription) Тогда
		ДобавитьСтрокуДерева(Строка, НСтр("ru='Есть описание от пользователя (кликните для просмотра)'"), ДанныеОтчета.errorInfo.userDescription);
	КонецЕсли;
	
	СкриншотПрочитан = Ложь;
	Если ДанныеОтчета.Свойство("screenshot") Тогда
		ФайлОС = Новый Файл(ИмяВременногоКаталога + ДанныеОтчета.screenshot.file);
		Если ФайлОС.Существует() Тогда
			Элементы.СтраницаСкриншот.Доступность = Истина;
			
			Картинка = Новый Картинка(ФайлОС.ПолноеИмя);
			АдресСкриншота = ПоместитьВоВременноеХранилище(Картинка, УникальныйИдентификатор);
			СкриншотПрочитан = Истина;
		Иначе
			Сообщить(СтрШаблон(НСтр("ru='Не удалось найти файл скриншота ""%1""'"), ФайлОС.Имя));
		КонецЕсли;
	КонецЕсли;
	
	Если СкриншотПрочитан Тогда
		Элементы.СтраницаСкриншот.Доступность = Истина;
	Иначе
		Элементы.СтраницаСкриншот.Доступность = Ложь;
		
		Если ЭтоАдресВременногоХранилища(АдресСкриншота) Тогда
			УдалитьИзВременногоХранилища(АдресСкриншота);
		КонецЕсли;
		АдресСкриншота = Неопределено;
	КонецЕсли;
	
	Если ДанныеОтчета.Свойство("additionalFiles") Тогда
		Для Каждого ИмяФайла из ДанныеОтчета.additionalFiles Цикл
			ФайлОС = Новый Файл(ИмяВременногоКаталога + ИмяФайла);
			Если ФайлОС.Существует() Тогда
				ДвоичныеДанные = Новый ДвоичныеДанные(ФайлОС.ПолноеИмя);
				Адрес = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
				
				СтрФайлы = ПриложенныеФайлы.Добавить();
				СтрФайлы.ИмяФайла = ИмяФайла;
				СтрФайлы.Адрес = Адрес;
				СтрФайлы.Размер = ПредставлениеРазмераФайла(ДвоичныеДанные.Размер());
			Иначе
				Сообщить(СтрШаблон(НСтр("ru='Не удалось найти прикрепленный файл ""%1""'"), ФайлОС.Имя));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ДанныеОтчета.Свойство("additionalInfo") Тогда
		ДобавитьСтрокуДерева(Дерево, НСтр("ru='Есть дополнительная информация (кликните для просмотра)'"), ДанныеОтчета.additionalInfo);
	КонецЕсли;
	
	Элементы.СтраницаФайлы.Доступность = (ПриложенныеФайлы.Количество() > 0);
	
	УдалитьФайлы(ИмяВременногоКаталога);
	ЗначениеВРеквизитФормы(Дерево, "ОтчетОбОшибке");
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаРасшифровка;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПредставлениеНабораОшибок(НаборОшибок)
	ЧастиРезультата = Новый Массив;
	
	Для Каждого Ошибка Из НаборОшибок Цикл
		Если ЗначениеЗаполнено(Ошибка[0]) И Ошибка[1].Количество() > 0 Тогда
			Шаблон = "%1
	                 |
	                 |[%2]";
			Строка = СтрШаблон(Шаблон, Ошибка[0], СтрСоединить(Ошибка[1], ", "));
			ЧастиРезультата.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтрСоединить(ЧастиРезультата, НСтр("ru = '
                                                |по причине:
                                                |'"));
КонецФункции

&НаСервереБезКонтекста
Функция ПредставлениеСтекаОшибки(Стек)
	Строки = Новый Массив;
	
	Сч = Стек.ВГраница();
	Пока Сч >= 0 Цикл
		ЭлементСтека = Стек[Сч];
		Строки.Добавить(СтрШаблон("%1(%2): %3", ЭлементСтека[0], ЭлементСтека[1], ЭлементСтека[2]));
		Сч = Сч - 1;
	КонецЦикла;
	
	Возврат СтрСоединить(Строки, Символы.ПС);
КонецФункции

&НаСервереБезКонтекста
Функция ДобавитьСтрокуДерева(Знач СтрокаИлиКоллекцияСтрок, КраткаяИнформация, ПодробнаяИнформация = "")
	Если ТипЗнч(СтрокаИлиКоллекцияСтрок) = Тип("СтрокаДереваЗначений") Или ТипЗнч(СтрокаИлиКоллекцияСтрок) = Тип("ДеревоЗначений") Тогда
		СтрокаИлиКоллекцияСтрок = СтрокаИлиКоллекцияСтрок.Строки;
	КонецЕсли;
	
	СтрокаДерева = СтрокаИлиКоллекцияСтрок.Добавить();
	СтрокаДерева.КраткаяИнформация = КраткаяИнформация;
	СтрокаДерева.ПодробнаяИнформация = ПодробнаяИнформация;
	Возврат СтрокаДерева;
КонецФункции

&НаСервереБезКонтекста
Функция ПредставлениеРазмераФайла(РазмерБайт)
	РазмерКб = РазмерБайт / 1024;
	РазмерМб = РазмерКб / 1024;
	
	Если РазмерБайт < 1024 Тогда
		Возврат Формат(РазмерБайт, "Л=ru_RU; ЧГ=; ЧФ='Ч байт'");
	ИначеЕсли РазмерКб < 1024 Тогда
		Возврат Формат(РазмерКб, "Л=ru_RU; ЧДЦ=1; ЧГ=; ЧФ='Ч Кб'");
	Иначе
		Возврат Формат(РазмерМб, "Л=ru_RU; ЧДЦ=1; ЧГ=; ЧФ='Ч Мб'");
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Процедура УдалитьНесколькоАдресовИзВременногоХранилища(Знач УдаляемыеАдреса)
	Для Каждого Адрес Из УдаляемыеАдреса Цикл
		УдалитьИзВременногоХранилища(Адрес);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти
