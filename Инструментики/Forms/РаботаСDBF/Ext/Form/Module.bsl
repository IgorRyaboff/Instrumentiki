
// --------------------------------------------------------------------------------
// Copyright (c) 2024 Igor Ryabov (https://github.com/IgorRyaboff/Instrumentiki)
// License: https://github.com/IgorRyaboff/Instrumentiki/blob/main/LICENSE
// --------------------------------------------------------------------------------

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Объект.ИмяПриложенияСеанса = "WebClient" Тогда
		Сообщить(НСтр("ru='Этот инструмент недоступен на веб-клиенте'"));
		Отказ = Истина;
		Возврат
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если Модифицированность Тогда
		Если Не ЗавершениеРаботы Тогда
			ВопросПередЗакрытиемАсинх();
		КонецЕсли;
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КодировкаПриИзменении(Элемент)
	Если ЗначениеЗаполнено(ПутьКТекущемуФайлу) Тогда
		ПрочитатьФайл(ПутьКТекущемуФайлу, Кодировка, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПодзаголовокФормыПриИзменении(Элемент)
	Если ЗначениеЗаполнено(ПодзаголовокФормы) Тогда
		Заголовок = СтрШаблон(НСтр("ru='%1: Работа с DBF-таблицами'"), ПодзаголовокФормы);
	Иначе
		Заголовок = НСтр("ru='Работа с DBF-таблицами'");
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблица

&НаКлиенте
Процедура ТаблицаПриИзменении(Элемент)
	Записей = Таблица.Количество();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Асинх Процедура ОткрытьФайл(Команда)
	Если Модифицированность И Не Ждать ВопросПередПотерейНесохраненныхДанныхАсинх() Тогда
		Возврат;
	КонецЕсли;
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.МножественныйВыбор = Ложь;
	Диалог.Фильтр = "DBF-таблица|*.dbf";
	
	Выбранные = Ждать Диалог.ВыбратьАсинх();
	Если Выбранные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПрочитатьФайл(Выбранные[0]);
	Элементы.ФормаСохранитьФайлКак.Доступность = Не ТолькоПросмотрТаблицы;
	Элементы.ФормаСохранитьФайл.Доступность = Не ТолькоПросмотрТаблицы;
	Элементы.Таблица.ТолькоПросмотр = ТолькоПросмотрТаблицы;
КонецПроцедуры

&НаКлиенте
Асинх Процедура СохранитьФайл(Команда)
	Если Команда.Имя = "СохранитьФайлКак" Тогда
		Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		Диалог.ПолноеИмяФайла = ПутьКТекущемуФайлу;
		Диалог.Фильтр = "DBF-таблица|*.dbf";
		Выбранные = Ждать Диалог.ВыбратьАсинх();
		Если Выбранные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ПутьКТекущемуФайлу = Выбранные[0];
	КонецЕсли;
	
	ХБасе = Новый XBase;
	ХБасе.Кодировка = КодировкаXBase[Кодировка];
	Для Каждого ОписаниеПоля Из ОписаниеПолей Цикл
		ХБасе.Поля.Добавить(ОписаниеПоля.ИмяПоля, ОписаниеПоля.ТипXBase, ОписаниеПоля.Длина, ОписаниеПоля.Точность);
	КонецЦикла;
	ХБасе.СоздатьФайл(ПутьКТекущемуФайлу);
	ХБасе.ЗакрытьФайл();
	
	ХБасе = Новый XBase;
	ХБасе.ОткрытьФайл(ПутьКТекущемуФайлу);
	
	Для Каждого СтрТаблица Из Таблица Цикл
		ХБасе.Добавить();
		ЗаполнитьЗначенияСвойств(ХБасе, СтрТаблица);
		ХБасе.Записать();
	КонецЦикла;
	
	ХБасе.ЗакрытьФайл();
	ПоказатьПредупреждение(, "Файл сохранён");
	Модифицированность = Ложь;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Выполняет чтение файла DBF, создание реквизитов на форме и заполнение данных на форме
//
// Параметры:
//  Путь - Строка - Полный путь к файлу DBF
//  ВыбраннаяКодировка - КодировкаXBase - Если задано, файл будет прочитан в указанной кодировке
//  СменаКодировки - Булево - Процедура вызвана при смене кодировки.
//                            В этом случае, например, не будет выводиться предупреждение о неподдерживаемых полях.
&НаКлиенте
Асинх Процедура ПрочитатьФайл(Путь, ВыбраннаяКодировка = Неопределено, СменаКодировки = Ложь)
	Таблица.Очистить();
	ТолькоПросмотрТаблицы = Ложь;
	
	ОписаниеПолей.Очистить();
	
	Файл = Новый Файл(Путь);
	Если СтрДлина(Файл.Имя) > 8 Тогда
		ВременнаяПапка = Ждать КаталогВременныхФайловАсинх() + Строка(Новый УникальныйИдентификатор) + "\";
		Ждать СоздатьКаталогАсинх(ВременнаяПапка);
		ИмяВременногоФайла = ВременнаяПапка + "tmp.dbf";
		Ждать КопироватьФайлАсинх(Путь, ИмяВременногоФайла);
		ХБасе = Новый XBase(ИмяВременногоФайла,, Истина);
	Иначе
		ХБасе = Новый XBase(Путь,, Истина);
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура;
	Для Каждого Поле Из ХБасе.Поля Цикл
		ОписаниеТипов = ОписаниеТиповИзНазванияТипаDBF(Поле.Тип, Поле.Длина, Поле.Точность);
		Если ОписаниеТипов = Неопределено Тогда
			ТолькоПросмотрТаблицы = Истина;
		Иначе
			СтруктураРеквизитов.Вставить(Поле.Имя, ОписаниеТипов);
		КонецЕсли;
		
		СтрОписаниеПолей = ОписаниеПолей.Добавить();
		СтрОписаниеПолей.ИмяПоля = Поле.Имя;
		СтрОписаниеПолей.ТипXBase = Поле.Тип;
		СтрОписаниеПолей.ИмяТипа = СтрШаблон("%1 (%2)", ?(ОписаниеТипов <> Неопределено, Строка(ОписаниеТипов), "Неподдерживаемый тип"), Поле.Тип);
		СтрОписаниеПолей.Длина = Поле.Длина;
		СтрОписаниеПолей.Точность = Поле.Точность;
	КонецЦикла;
	
	СоздатьРеквизитыНаСервере(СтруктураРеквизитов);
	
	Записей = ХБасе.КоличествоЗаписей();
	Если ЗначениеЗаполнено(ВыбраннаяКодировка) Тогда
		ХБасе.Кодировка = КодировкаXBase[ВыбраннаяКодировка];
	КонецЕсли;
	
	Кодировка = Строка(ХБасе.Кодировка);
	
	ХБасе.Первая();
	Пока Не ХБасе.ВКонце() Цикл
		Если ХБасе.ЗаписьУдалена() Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Таблица.Добавить(), ХБасе);		
		ХБасе.Следующая();
	КонецЦикла;
	
	ХБасе.ЗакрытьФайл();
	ПутьКТекущемуФайлу = Путь;
	
	Если ИмяВременногоФайла <> Неопределено Тогда
		Ждать УдалитьФайлыАсинх(ВременнаяПапка);
	КонецЕсли;
	
	Если ТолькоПросмотрТаблицы И Не СменаКодировки Тогда
		ПоказатьПредупреждение(, "В таблице есть поля типов, работа с которыми не поддерживается средствами 1С, поэтому таблица открыта только для чтения",, "Только просмотр");
	КонецЕсли;
КонецПроцедуры

// Преобразует название типа из терминологии DBF в объект встроенного языка 1С
//
// Параметры:
//  Тип - Строка - Наименование типа в терминологии DBF
//  Длина - Число -
//  Точность - Число -
//
// Возвращаемое значение:
//  ОписаниеТипов -
//  Неопределено - Если указанный тип не поддерживается XBase
&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТиповИзНазванияТипаDBF(Тип, Длина, Точность)
	Если Тип = "S" Тогда
		Возврат Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(Длина));
	ИначеЕсли Тип = "S" Тогда
		Возврат Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(Длина));
	ИначеЕсли Тип = "N" Или Тип = "F" Тогда
		Возврат Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(Длина, Точность));
	ИначеЕсли Тип = "D" Тогда
		Возврат Новый ОписаниеТипов("Дата");
	ИначеЕсли Тип = "L" Тогда
		Возврат Новый ОписаниеТипов("Булево");
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

// Создаёт реквизиты таблицы Таблица, а также поля формы к ним
//
// Параметры:
//  СтруктураРеквизитов - Структура - Добавляемые реквизиты. Ключ - имя поля как в таблице DBF, значение - объект Тип
&НаСервере
Процедура СоздатьРеквизитыНаСервере(СтруктураРеквизитов)
	Пока Элементы.Таблица.ПодчиненныеЭлементы.Количество() > 0 Цикл
		Элементы.Удалить(Элементы.Таблица.ПодчиненныеЭлементы[0]);
	КонецЦикла;
	
	Удаляемые = Новый Массив;
	Для Каждого Р Из ПолучитьРеквизиты("Таблица") Цикл
		Удаляемые.Добавить("Таблица." + Р.Имя);
	КонецЦикла;
	ИзменитьРеквизиты(, Удаляемые);
	
	// Создание реквизитов
	ДобавляемыеРеквизиты = Новый Массив;
	Для Каждого КЗ Из СтруктураРеквизитов Цикл
		Имя = КЗ.Ключ;
		Тип = КЗ.Значение;
		
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(Имя, Тип, "Таблица"));
	КонецЦикла;
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	Для Каждого КЗ Из СтруктураРеквизитов Цикл
		Имя = КЗ.Ключ;
		Поле = Элементы.Добавить("Таблица" + Имя, Тип("ПолеФормы"), Элементы.Таблица);
		Поле.Вид = ?(КЗ.Значение.СодержитТип(Тип("Булево")), ВидПоляФормы.ПолеФлажка, ВидПоляФормы.ПолеВвода);
		Поле.ПутьКДанным = "Таблица." + Имя;
	КонецЦикла;
КонецПроцедуры

// Вызывается перед закрытием, если есть несохранённые изменения
//
&НаКлиенте
Асинх Процедура ВопросПередЗакрытиемАсинх()
	Если Ждать ВопросПередПотерейНесохраненныхДанныхАсинх() Тогда
		Закрыть();
	КонецЕсли;
КонецПроцедуры

// Выводит вопрос о сохранении несохраненных данных
//
// Возвращаемое значение:
//  Булево - Пользователь согласился на продолжение текущего действия с потерей данных
&НаКлиенте
Асинх Функция ВопросПередПотерейНесохраненныхДанныхАсинх()
	Ответ = Ждать ВопросАсинх("Данные в таблице были изменены. Продолжить с потерей текущих изменений?", РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Модифицированность = Ложь;
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

#КонецОбласти
