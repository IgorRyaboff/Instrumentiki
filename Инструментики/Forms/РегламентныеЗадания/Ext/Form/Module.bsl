
// --------------------------------------------------------------------------------
// Copyright (c) 2024 Igor Ryabov (https://github.com/IgorRyaboff/Instrumentiki)
// License: https://github.com/IgorRyaboff/Instrumentiki/blob/main/LICENSE
// --------------------------------------------------------------------------------

#Область ОписаниеПеременных

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ОбновитьСписокНаСервере();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПодзаголовокФормыПриИзменении(Элемент)
	Если ЗначениеЗаполнено(ПодзаголовокФормы) Тогда
		Заголовок = СтрШаблон(НСтр("ru='%1: Регламентные задания'"), ПодзаголовокФормы);
	Иначе
		Заголовок = НСтр("ru='Регламентные задания'");
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗадания

&НаКлиенте
Процедура ЗаданияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекДанные = Элементы.Задания.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ИдентификаторЗадания", ТекДанные.УникальныйИдентификатор);
	ОткрытьФорму("ВнешняяОбработка.Инструментики.Форма.РегламентныеЗадания_ФормаЭлемента", ПараметрыФормы,,,,, ОписаниеОповещенияЗакрытияФормыЭлемента());
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновитьСписок(Команда)
	ВызватьОбновлениеСписка();
КонецПроцедуры

&НаКлиенте
Асинх Процедура УдалитьЗадание(Команда)
	ТекДанные = Элементы.Задания.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекДанные.Предопределенное Тогда
		ПоказатьПредупреждение(, "Нельзя удалять предопределённые регламентные задания");
		Возврат;
	КонецЕсли;
	
	Ответ = Ждать ВопросАсинх("Удалить регламентное задание?", РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьЗаданиеНаСервере(ТекДанные.УникальныйИдентификатор);
	Состояние("Задание удалено!");
	ВызватьОбновлениеСписка();
КонецПроцедуры

&НаКлиенте
Асинх Процедура СоздатьЗадание(Команда)
	СписокМетаданныхРЗ = СписокМетаданныхРЗ();
	
	Ответ = Ждать СписокМетаданныхРЗ.ВыбратьЭлементАсинх();
	Если Ответ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Метаданные", Ответ.Значение);
	ОткрытьФорму("ВнешняяОбработка.Инструментики.Форма.РегламентныеЗадания_ФормаЭлемента", ПараметрыФормы,,,,, ОписаниеОповещенияЗакрытияФормыЭлемента());
КонецПроцедуры

&НаКлиенте
Асинх Процедура ЗапуститьЗадание(Команда)
	ТекДанные = Элементы.Задания.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить("Фоново", НСтр("ru='В фоне'"));
	Кнопки.Добавить("Синхронно", НСтр("ru='Синхронно'"));
	Кнопки.Добавить(Неопределено, НСтр("ru='Отменить'"));
	Ответ = Ждать ВопросАсинх(НСтр("ru='Как запустить задание?'"), Кнопки,, "Фоново");
	
	Если Ответ = Неопределено Тогда
		Возврат;
	ИначеЕсли Ответ = "Фоново" Тогда
		ИдентификаторФоновогоЗадания = ЗапуститьЗаданиеНаСервере(ТекДанные.УникальныйИдентификатор);
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВыполнениеЗадания;
		Элементы.ПрерватьВыполнениеЗадания.Доступность = Истина;
		
		ПодключитьОбработчикОжидания("ПроверкаФоновогоЗаданияКлиент", 2, Истина);
	ИначеЕсли Ответ = "Синхронно" Тогда
		Состояние(НСтр("ru='Выполнение задания...'"));
		Попытка
			ВыполнитьФоновоеЗаданиеСинхронно(ТекДанные.УникальныйИдентификатор);
			Состояние(НСтр("ru='Задание выполнено'"));
		Исключение
			ПоказатьПредупреждение(, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),, НСтр("ru='Ошибка выполнения функции регламентного задания'"));
			Состояние(НСтр("ru='Задание завершено с ошибкой!'"));
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПрерватьВыполнениеЗадания(Команда)
	// Элементы.ПрерватьВыполнениеЗадания.Доступность = Ложь;
	ПрерватьВыполнениеЗаданияНаСервере(ИдентификаторФоновогоЗадания);
	ОтключитьОбработчикОжидания("ПроверкаФоновогоЗаданияКлиент");
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОжиданиеОтменыЗадания;
	ПроверкаФоновогоЗаданияКлиент();
КонецПроцедуры

&НаКлиенте
Процедура НеОжидатьЗавершенияЗадания(Команда)
	ОтключитьОбработчикОжидания("ПроверкаФоновогоЗаданияКлиент");
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОсновная;
КонецПроцедуры

&НаКлиенте
Процедура СортироватьВозр(Команда)
	СортироватьТаблицуЗначений("Задания", "Возр");
КонецПроцедуры

&НаКлиенте
Процедура СортироватьУбыв(Команда)
	СортироватьТаблицуЗначений("Задания", "Убыв");
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Формирует список объектов метаданных регламентных заданий
//
// Возвращаемое значение:
//  СписокЗначений - Значение: Имя объекта метаданных, Представление: синоним объекта метаданных, а при его отсутствии - имя объекта метаданных
&НаСервереБезКонтекста
Функция СписокМетаданныхРЗ()
	Результат = Новый СписокЗначений;
	Для Каждого Мета Из Метаданные.РегламентныеЗадания Цикл
		Результат.Добавить(Мета.Имя, ?(ЗначениеЗаполнено(Мета.Синоним), Мета.Синоним, Мета.Имя));
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Обёртка для вызова обновления списка регламентных заданий из клиентского кода
// Рекомендуется использовать вместо прямого вызова ОбновитьСписокНаСервере()
//
&НаКлиенте
Процедура ВызватьОбновлениеСписка()
	ТекДанные = Элементы.Задания.ТекущиеДанные;
	РанееВыбранноеЗадание = ?(ТекДанные <> Неопределено, ТекДанные.УникальныйИдентификатор, Неопределено);
	
	Состояние("Обновление списка...");
	
	Задания.Очистить();
	ОбновитьСписокНаСервере();
	
	Если РанееВыбранноеЗадание <> Неопределено Тогда
		НайденныеСтроки = Задания.НайтиСтроки(Новый Структура("УникальныйИдентификатор", РанееВыбранноеЗадание));
		Если НайденныеСтроки.Количество() <> 0 Тогда
			Элементы.Задания.ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
	Состояние("Готово!");
КонецПроцедуры

// Заполняет таблицу Задания
// Вместо прямого вызова из клиентских функций рекомендуется использовать ВызватьОбновлениеСписка()
//
&НаСервере
Процедура ОбновитьСписокНаСервере()
	Задания.Очистить();
	Для Каждого РЗ Из РегламентныеЗадания.ПолучитьРегламентныеЗадания() Цикл
		СтрРЗ = Задания.Добавить();
		СтрРЗ.Использование = РЗ.Использование;
		СтрРЗ.Предопределенное = РЗ.Предопределенное;
		СтрРЗ.УникальныйИдентификатор = РЗ.УникальныйИдентификатор;
		СтрРЗ.Имя = РЗ.Метаданные.Имя;
		СтрРЗ.Наименование = ?(ЗначениеЗаполнено(РЗ.Наименование), РЗ.Наименование, РЗ.Метаданные.Синоним);
		СтрРЗ.ПредставлениеРасписания = Строка(РЗ.Расписание);
		
		ФоновоеЗадание = РЗ.ПоследнееЗадание;
		Если ФоновоеЗадание <> Неопределено Тогда
			СтрРЗ.ПоследнееВыполнениеСостояние = КраткоеПредставлениеСостоянияФЗ(ФоновоеЗадание.Состояние);
			СтрРЗ.ПоследнееВыполнениеНачало = ФоновоеЗадание.Начало;
			СтрРЗ.ПоследнееВыполнениеКонец = ФоновоеЗадание.Конец;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Выполняет удаление регл. задания
//
// Параметры:
//  Идентификатор - УникальныйИдентификатор - Идентификатор удаляемого регл. задания
&НаСервереБезКонтекста
Процедура УдалитьЗаданиеНаСервере(Идентификатор)
	РЗ = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(Идентификатор);
	Если РЗ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РЗ.Удалить();
КонецПроцедуры

// Получить краткое представление состояния выполнения фонового задания
//
// Параметры:
//  Состояние - СостояниеФоновогоЗадания -
//
// Возвращаемое значение:
//  Строка -
&НаСервереБезКонтекста
Функция КраткоеПредставлениеСостоянияФЗ(Состояние)
	Если Состояние = СостояниеФоновогоЗадания.Активно Тогда
		Возврат "Активно";
	ИначеЕсли Состояние = СостояниеФоновогоЗадания.Завершено Тогда
		Возврат "Успешно";
	ИначеЕсли Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
		Возврат "Ошибка!";
	ИначеЕсли Состояние = СостояниеФоновогоЗадания.Отменено Тогда
		Возврат "Отменено";
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Процедура ВыполнитьФоновоеЗаданиеСинхронно(ИдентификаторЗадания)
	РеглЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
	
	ИмяМетода = РеглЗадание.Метаданные.ИмяМетода;
	Параметры = РеглЗадание.Параметры;
	
	ЧастиСтрокиПараметры = Новый Массив;
	Для Сч = 0 По Параметры.ВГраница() Цикл
		ЧастиСтрокиПараметры.Добавить(СтрШаблон("Параметры[%1]", Формат(Сч, "ЧН=0; ЧГ=")));
	КонецЦикла;
	
	СтрокаПараметров = СтрСоединить(ЧастиСтрокиПараметры, ", ");
	Выполнить(СтрШаблон("%1(%2);", ИмяМетода, СтрокаПараметров));
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗапуститьЗаданиеНаСервере(ИдентификаторЗадания)
	РеглЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
	ФоновоеЗадание = ФоновыеЗадания.Выполнить(РеглЗадание.Метаданные.ИмяМетода, РеглЗадание.Параметры);
	Возврат ФоновоеЗадание.УникальныйИдентификатор;
КонецФункции

&НаКлиенте
Процедура ПроверкаФоновогоЗаданияКлиент() Экспорт
	ДанныеЗадания = СостояниеФоновогоЗадания(ИдентификаторФоновогоЗадания);
	
	Если ДанныеЗадания.Состояние = "Задание выполняется" Тогда
		ПодключитьОбработчикОжидания("ПроверкаФоновогоЗаданияКлиент", 2, Истина);
	Иначе
		ПоказатьПредупреждение(, ?(ЗначениеЗаполнено(ДанныеЗадания.ОписаниеОшибки), ДанныеЗадания.ОписаниеОшибки, ДанныеЗадания.Состояние),, ДанныеЗадания.Состояние);
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОсновная;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция СостояниеФоновогоЗадания(УникальныйИдентификатор)
	ФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(УникальныйИдентификатор);
	
	Если ФоновоеЗадание.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ФоновоеЗадание.ИнформацияОбОшибке);
	Иначе
		ОписаниеОшибки = Неопределено;
	КонецЕсли;
	
	Возврат Новый Структура("Состояние, ОписаниеОшибки", Строка(ФоновоеЗадание.Состояние), ОписаниеОшибки);
КонецФункции

&НаСервереБезКонтекста
Процедура ПрерватьВыполнениеЗаданияНаСервере(УникальныйИдентификатор)
	ФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(УникальныйИдентификатор);
	
	Если ФоновоеЗадание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
		ФоновоеЗадание.Отменить();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ОписаниеОповещенияЗакрытияФормыЭлемента()
	Возврат Новый ОписаниеОповещения("ПослеЗакрытияФормыЭлемента", ЭтотОбъект);
КонецФункции

&НаКлиенте
Процедура ПослеЗакрытияФормыЭлемента(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	Если РезультатЗакрытия <> Неопределено И РезультатЗакрытия Тогда
		ВызватьОбновлениеСписка();
	КонецЕсли;
КонецПроцедуры

// Универсальная процедура сортировки таблицы значений
//
// Параметры:
//  ИмяТаблицыФормы - Строка - Имя элемента формы, ссылающегося на таблицу
//  Направление - Строка - "Возр" или "Убыв"
&НаСервере
Процедура СортироватьТаблицуЗначений(ИмяТаблицыФормы, Направление)
	ТаблицаФормы = Элементы[ИмяТаблицыФормы];
	ПрефиксПутиКДанным = ТаблицаФормы.ПутьКДанным + ".";
	
	ТекущаяКолонка = ТаблицаФормы.ТекущийЭлемент;
	ИмяКолонки = СтрЗаменить(ТекущаяКолонка.ПутьКДанным, ПрефиксПутиКДанным, "");
	
	ЭтотОбъект[ТаблицаФормы.ПутьКДанным].Сортировать(ИмяКолонки + " " + Направление);
КонецПроцедуры

#КонецОбласти
