
// --------------------------------------------------------------------------------
// Copyright (c) 2024 Igor Ryabov (https://github.com/IgorRyaboff/Instrumentiki)
// License: https://github.com/IgorRyaboff/Instrumentiki/blob/main/LICENSE
// --------------------------------------------------------------------------------

#Область ОписаниеПеременных

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ЗаполнитьТаблицуКонстантНаСервере();
	Элементы.ПривилегированныйРежим.Доступность = Не БезопасныйРежим();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
// Код процедур и функций
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаКонстант

&НаКлиенте
Процедура ТаблицаКонстантЗначениеПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ТаблицаКонстант.ТекущиеДанные;
	УстановитьНовоеЗначениеКонстанты(ТекущиеДанные.Имя, ТекущиеДанные.Значение, ПривилегированныйРежим);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновитьТаблицуКонстант(Команда)
	ТаблицаКонстант.Очистить();
	ЗаполнитьТаблицуКонстантНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьВКонсолиКода(Команда)
	ТекДанные = Элементы.ТаблицаКонстант.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоХранилищеЗначения = (ТипЗнч(ТекДанные.Значение) = Тип("ХранилищеЗначения"));
	
	ШаблонКода = "Значение = Константы.%1.Получить()%2;
	             |
				 |// Обработка значения
				 |
				 |Константы.%1.Установить(%3);";
	Код = СтрШаблон(ШаблонКода, ТекДанные.Имя, ?(ЭтоХранилищеЗначения, ".Получить()", ""), ?(ЭтоХранилищеЗначения, "Новый ХранилищеЗначения(Значение)", "Значение"));
	
	ПараметрыФормы = Новый Структура("Код, НаКлиенте", Код, Ложь);
	ОткрытьФорму("ВнешняяОбработка.Инструментики.Форма.КонсольКода", ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура СортироватьВозр(Команда)
	СортироватьТаблицуЗначений("ТаблицаКонстант", "Возр");
КонецПроцедуры

&НаКлиенте
Процедура СортироватьУбыв(Команда)
	СортироватьТаблицуЗначений("ТаблицаКонстант", "Убыв");
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Устанавливает значение константы
//
// Параметры:
//  Имя - Строка - Имя константы
//  Значение - Произвольный - Значение константы
//  ПривилегированныйРежим - Булево - Если Истина, то установка значения будет выполнена в привилегированном режиме
&НаСервереБезКонтекста
Процедура УстановитьНовоеЗначениеКонстанты(Имя, Значение, ПривилегированныйРежим)
	Если ПривилегированныйРежим Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	Константы[Имя].Установить(Значение);
КонецПроцедуры

// Заполняет таблицу формы ТаблицаКонстант
//
&НаСервере
Процедура ЗаполнитьТаблицуКонстантНаСервере()
	Если ПривилегированныйРежим Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	Для Каждого Константа Из Метаданные.Константы Цикл
		Стр = ТаблицаКонстант.Добавить();
		Стр.Имя = Константа.Имя;
		Стр.Синоним = Константа.Синоним;
		Попытка
			Стр.Значение = Константы[Константа.Имя].Получить();
			Стр.Тип = Строка(ТипЗнч(Стр.Значение));
			Если ТипЗнч(Стр.Значение) = Тип("ХранилищеЗначения") Тогда
				Стр.Тип = Стр.Тип + СтрШаблон(" (%1)", ТипЗнч(Стр.Значение.Получить()));
				Стр.Значение = Новый ХранилищеЗначения(Неопределено);
			КонецЕсли;
		Исключение
			Стр.Значение = NULL;
			Стр.ОшибкаПолучения = Истина;
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

// Универсальная процедура сортировки таблицы значений
//
// Параметры:
//  ИмяТаблицыФормы - Строка - Имя элемента формы, ссылающегося на таблицу
//  Направление - Строка - "Возр" или "Убыв"
&НаСервере
Процедура СортироватьТаблицуЗначений(ИмяТаблицыФормы, Направление)
	ТаблицаФормы = Элементы[ИмяТаблицыФормы];
	ПрефиксПутиКДанным = ТаблицаФормы.ПутьКДанным + ".";
	
	ТекущаяКолонка = ТаблицаФормы.ТекущийЭлемент;
	ИмяКолонки = СтрЗаменить(ТекущаяКолонка.ПутьКДанным, ПрефиксПутиКДанным, "");
	
	ЭтотОбъект[ТаблицаФормы.ПутьКДанным].Сортировать(ИмяКолонки + " " + Направление);
КонецПроцедуры

#КонецОбласти
