
// --------------------------------------------------------------------------------
// Copyright (c) 2024 Igor Ryabov (https://github.com/IgorRyaboff/Instrumentiki)
// License: https://github.com/IgorRyaboff/Instrumentiki/blob/main/LICENSE
// --------------------------------------------------------------------------------

#Область ОписаниеПеременных

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	#Область СохранениеДанных1
	ЗагрузитьДанныеАвтосохранения();
	#КонецОбласти
	
	ВремяВыполнения = 5000;
	ГдеВыполнять = "Сервер";
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	#Область СохранениеДанных1
	Если Модифицированность Тогда
		Отказ = Истина;
		Если Не ЗавершениеРаботы Тогда
			ЗапроситьСохранениеАсинх(Истина);
		КонецЕсли;
	КонецЕсли;
	#КонецОбласти
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТестируемыйКодКодПриИзменении(Элемент)
	ЗамерВыполнен = Ложь;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТестируемыйКод

&НаКлиенте
Процедура ТестируемыйКодПриИзменении(Элемент)
	ЗамерВыполнен = Ложь;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыполнитьЗамер(Команда)
	ВыполнитьАвтосохранение();
	
	Если ГдеВыполнять = "Клиент" И ПоправкаНаВнутренниеИздержкиКлиент = 0 Тогда
		Состояние("Выполняется замер...",, "<Без кода>");
		КоличествоИтерацийБезКода = ВыполнитьЗамерНаКлиентеНаСервере("", "", ВремяВыполнения);
		ПоправкаНаВнутренниеИздержкиКлиент = ВремяВыполнения / КоличествоИтерацийБезКода;
	ИначеЕсли ГдеВыполнять = "Сервер" и ПоправкаНаВнутренниеИздержкиСервер = 0 Тогда
		Состояние("Выполняется замер...",, "<Без кода>");
		КоличествоИтерацийБезКода = ВыполнитьЗамерНаСервере("", "", ВремяВыполнения);
		ПоправкаНаВнутренниеИздержкиСервер = ВремяВыполнения / КоличествоИтерацийБезКода;
	КонецЕсли;
	
	ЛучшееВремяВыполнения = -1;
	ХудшееВремяВыполнения = -1;
	
	Для Каждого СтрТестируемыйКод Из ТестируемыйКод Цикл
		Прогресс = Цел((ТестируемыйКод.Индекс(СтрТестируемыйКод) + 1) / ТестируемыйКод.Количество() * 100);
		Состояние("Выполняется замер...", Прогресс, СтрТестируемыйКод.Представление);
		
		Попытка
			Если ГдеВыполнять = "Клиент" Тогда
				СтрТестируемыйКод.КоличествоИтераций = ВыполнитьЗамерНаКлиентеНаСервере(КодИнициализации, СтрТестируемыйКод.Код, ВремяВыполнения);
				СтрТестируемыйКод.СреднееВремяВыполнения = (ВремяВыполнения / СтрТестируемыйКод.КоличествоИтераций) - ПоправкаНаВнутренниеИздержкиКлиент;
			ИначеЕсли ГдеВыполнять = "Сервер" Тогда
				СтрТестируемыйКод.КоличествоИтераций = ВыполнитьЗамерНаСервере(КодИнициализации, СтрТестируемыйКод.Код, ВремяВыполнения);
				СтрТестируемыйКод.СреднееВремяВыполнения = (ВремяВыполнения / СтрТестируемыйКод.КоличествоИтераций) - ПоправкаНаВнутренниеИздержкиСервер;
			Иначе
				ВызватьИсключение "Некорректное значение реквизита ""Где выполнять"": " + ГдеВыполнять;
			КонецЕсли;
			
			Если СтрТестируемыйКод.СреднееВремяВыполнения < ЛучшееВремяВыполнения Или ЛучшееВремяВыполнения = -1 Тогда
				ЛучшееВремяВыполнения = СтрТестируемыйКод.СреднееВремяВыполнения;
			КонецЕсли;
				
			Если СтрТестируемыйКод.СреднееВремяВыполнения > ХудшееВремяВыполнения Или ХудшееВремяВыполнения = -1 Тогда
				ХудшееВремяВыполнения = СтрТестируемыйКод.СреднееВремяВыполнения;
			КонецЕсли;
		Исключение
			ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаголовокПредупреждения = СтрШаблон(НСтр("ru = 'Ошибка выполнения кода (блок ""%1"")'"), СтрТестируемыйКод.Представление);
			ПоказатьПредупреждение(, ПредставлениеОшибки,, ЗаголовокПредупреждения);
			Состояние();
			Возврат;
		КонецПопытки;
	КонецЦикла;
	
	Если ТестируемыйКод.Количество() > 0 Тогда
		ТестируемыйКод.НайтиСтроки(Новый Структура("СреднееВремяВыполнения", ЛучшееВремяВыполнения))[0].ИндексКартинки = 1;
		ТестируемыйКод.НайтиСтроки(Новый Структура("СреднееВремяВыполнения", ХудшееВремяВыполнения))[0].ИндексКартинки = 2;
	КонецЕсли;
	
	ЗамерВыполнен = Истина;
	Состояние("Замер завершен");
КонецПроцедуры

#Область СохранениеДанных1

&НаКлиенте
Асинх Процедура СохранениеДанных_ОткрытьФайл(Команда)
	Если Объект.БезопасныйРежим Тогда
		ПоказатьПредупреждение(, "Загрузка и сохранение данных недоступны в безопасном режиме",, "Безопасный режим");
		Возврат;
	КонецЕсли;
	
	Если Не Ждать ЗапроситьСохранениеАсинх() Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресДанныхАвтосохранения) Тогда
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Открыть сохраненные данные");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Открыть данные из файла");
		Ответ = Ждать ВопросАсинх("Есть сохраненные данные с прошлого сеанса использования инструмента", Кнопки);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			АдресДанныхАвтосохранения = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресДанныхАвтосохранения) Тогда
		АдресВХ = АдресДанныхАвтосохранения;
	Иначе
		ПараметрыДиалогаПомещенияФайлов = Новый ПараметрыДиалогаПомещенияФайлов;
		ПараметрыДиалогаПомещенияФайлов.МножественныйВыбор = Ложь;
		ПараметрыДиалогаПомещенияФайлов.Фильтр = "Сохранённые данные Инструментиков (*.xml)|*.xml";
		
		ОписаниеПомещенногоФайла = Ждать ПоместитьФайлНаСерверАсинх(,,, ПараметрыДиалогаПомещенияФайлов, ЭтотОбъект.УникальныйИдентификатор);
		Если ОписаниеПомещенногоФайла = Неопределено Тогда
			Возврат;
		КонецЕсли;
		АдресВХ = ОписаниеПомещенногоФайла.Адрес;
	КонецЕсли;
	
	ПрочитатьУниверсальныйПакет(АдресВХ);
КонецПроцедуры

&НаКлиенте
Процедура СохранениеДанных_СохранитьФайл(Команда)
	СохранитьАсинх();
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Асинх Процедура ОткрытьПример(Команда)
	Если Не Ждать ЗапроситьСохранениеАсинх() Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьПримерНаСервере();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Выполняет тестируемый блок на сервере
// См. ВыполнитьЗамерНаКлиентеНаСервере()
//
&НаСервереБезКонтекста
Функция ВыполнитьЗамерНаСервере(Знач КодИнициализации, Знач ВыполняемыйКод, Знач ВремяВыполнения)
	Возврат ВыполнитьЗамерНаКлиентеНаСервере(КодИнициализации, ВыполняемыйКод, ВремяВыполнения);
КонецФункции

// Выполняет тестируемый блок кода
//
// Параметры:
//  _КодИнициализации - Строка - Текст кода инициализации
//  _ВыполняемыйКод - Строка - Тестируемый программный код
//  _ВремяВыполнения - Число - Время в мс, в течение которого необходимо 
//
// Возвращаемое значение:
//  Число - Количество итераций, которое удалось выполнить за время, переданное в параметре _ВремяВыполнения
&НаКлиентеНаСервереБезКонтекста
Функция ВыполнитьЗамерНаКлиентеНаСервере(Знач _КодИнициализации, Знач _ВыполняемыйКод, Знач _ВремяВыполнения)
	Параметры = Новый Структура;
	ОжидаемыйРезультат = Неопределено;
	Результат = Неопределено;
	Выполнить(_КодИнициализации);
	
	_НачалоЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
	_КоличествоИтераций = 0;
	
	Пока (ТекущаяУниверсальнаяДатаВМиллисекундах() - _НачалоЗамера) < _ВремяВыполнения Цикл
		Выполнить(_ВыполняемыйКод);
		_КоличествоИтераций = _КоличествоИтераций + 1;
	КонецЦикла;
	
	Если ОжидаемыйРезультат <> Неопределено И Результат <> ОжидаемыйРезультат Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Фактически полученный результат не соответствует ожидаемому:
                                          |Ожидаемый результат: %1 (тип %2)
                                          |Полученный результат: %3 (тип %4)'"), ОжидаемыйРезультат, ТипЗнч(ОжидаемыйРезультат), Результат, ТипЗнч(Результат));
	КонецЕсли;
	
	Возврат _КоличествоИтераций;
КонецФункции

#Область СохранениеДанных1

// Формирует XML-файл для сохранения текущих данных и помещает его во временное хранилище
//
// Возвращаемое значение:
//  Строка - Адрес во временном хранилище
&НаСервере
Функция СформироватьУниверсальныйПакет()
	ВерсияФормата = 0;
	ИмяИнструмента = "";
	ИмяОбъекта = "";
	ПриОпределенииНастроекИнструментаXDTO(ВерсияФормата, ИмяОбъекта, ИмяИнструмента, Неопределено);
	
	МодульОбъекта = РеквизитФормыВЗначение("Объект");
	Фабрика = МодульОбъекта.ФабрикаXDTO(ВерсияФормата);
	
	ОбъектХДТО = Фабрика.Создать(Фабрика.Тип("instrumentiki", ИмяОбъекта));
	ПриЗаполненииПакетаXDTO(Фабрика, ОбъектХДТО);
	ОбъектХДТО.Проверить();
	
	АдресВХ = МодульОбъекта.ДанныеВУниверсальныйПакетВХ(ВерсияФормата, ОбъектХДТО, ИмяИнструмента, ЭтотОбъект.УникальныйИдентификатор);
	Возврат АдресВХ;
КонецФункции

// Загружает данные, ранее сохранённые в этом инструменте
//
// Параметры:
//  Адрес - Строка - Адрес файла во временном хранилище
&НаСервере
Процедура ПрочитатьУниверсальныйПакет(Адрес)
	МодульОбъекта = РеквизитФормыВЗначение("Объект");
	
	ВерсияФормата = 0;
	ИмяИнструмента = "";
	ИмяОбъекта = "";
	ПриОпределенииНастроекИнструментаXDTO(ВерсияФормата, ИмяОбъекта, ИмяИнструмента, Неопределено);
	
	ДанныеПакета = МодульОбъекта.ДанныеИзУниверсальногоПакетаВХ(Адрес, ИмяОбъекта);
	Если ДанныеПакета.Свойство("Ошибка") Тогда
		Сообщить(ДанныеПакета.Ошибка);
		Возврат;
	КонецЕсли;
	
	ПриЧтенииПакетаXDTO(ДанныеПакета.Объект, ДанныеПакета.ВерсияФормата);
	
	Модифицированность = Ложь;
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеАвтосохранения()
	КлючНастроек = "";
	ИмяОбъекта = "";
	ПриОпределенииНастроекИнструментаXDTO(Неопределено, ИмяОбъекта, Неопределено, КлючНастроек);
	
	МодульОбъекта = РеквизитФормыВЗначение("Объект");
	СохраненныеДанные = МодульОбъекта.СохраненнаяНастройка(КлючНастроек, "ДанныеАвтосохранения");
	
	Если ЗначениеЗаполнено(СохраненныеДанные) Тогда
		АдресВХ = ПоместитьВоВременноеХранилище(СохраненныеДанные, УникальныйИдентификатор);
		
		МодульОбъекта = РеквизитФормыВЗначение("Объект");
		РезультатЧтения = МодульОбъекта.ДанныеИзУниверсальногоПакетаВХ(АдресВХ, ИмяОбъекта);
		
		Если Не РезультатЧтения.Свойство("Ошибка") Тогда
			АдресДанныхАвтосохранения = АдресВХ;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ВыполнитьАвтосохранение()
	КлючНастроек = "";
	ПриОпределенииНастроекИнструментаXDTO(Неопределено, Неопределено, Неопределено, КлючНастроек);
	
	АдресПакетаВХ = СформироватьУниверсальныйПакет();
	ДанныеПакета = ПолучитьИзВременногоХранилища(АдресПакетаВХ);
	УдалитьИзВременногоХранилища(АдресПакетаВХ);
	
	МодульОбъекта = РеквизитФормыВЗначение("Объект");
	МодульОбъекта.СохранитьНастройку(ключНастроек, "ДанныеАвтосохранения", ДанныеПакета);
	АдресДанныхАвтосохранения = Неопределено;
КонецПроцедуры

// Запрашивает сохранение текущих данных
//
// Параметры:
//  ЗакрытьФорму - Булево - Если Истина, форма будет закрыта после сохранения или отказа от сохранения
//
// Возвращаемое значение:
//  Булево - Разрешить выполнение действия
&НаКлиенте
Асинх Функция ЗапроситьСохранениеАсинх(ЗакрытьФорму = Ложь)
	Если Не Модифицированность Тогда
		Возврат Истина;
	КонецЕсли;
	
	Ответ = Ждать ВопросАсинх("Данные были изменены. Сохранить изменения?", РежимДиалогаВопрос.ДаНетОтмена);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Результат = Ждать СохранитьАсинх();
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
		Результат = Истина;
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
	Если Результат И ЗакрытьФорму Тогда
		Модифицированность = Ложь;
		ЭтотОбъект.Закрыть();
	КонецЕсли;
	Возврат Результат;
КонецФункции

// Выполняет сохранение данных
//
// Возвращаемое значение:
//  Булево - Данные сохранены. Может быть Ложь, если пользователь отменил сохранение в соответствующих диалогах
&НаКлиенте
Асинх Функция СохранитьАсинх()
	Если Объект.БезопасныйРежим Тогда
		ПоказатьПредупреждение(, "Загрузка и сохранение данных недоступны в безопасном режиме",, "Безопасный режим");
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		АдресВХ = СформироватьУниверсальныйПакет();
		#Если ВебКлиент Тогда
			Ждать ПолучитьФайлССервераАсинх(АдресВХ, "Запрос.xml", Новый ПараметрыДиалогаПолученияФайлов);
		#Иначе
			Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
			Диалог.Фильтр = "Файл сохраняемых данных (*.xml)|*.xml";
			ВыбранныеФайлы = Ждать Диалог.ВыбратьАсинх();
			Если ВыбранныеФайлы = Неопределено Тогда
				Возврат Ложь;
			КонецЕсли;
			
			Ждать ПолучитьФайлССервераАсинх(АдресВХ, ВыбранныеФайлы[0]);
		#КонецЕсли
	Исключение
		Ждать ПредупреждениеАсинх(ОписаниеОшибки(),, "Ошибка сохранения данных");
	КонецПопытки;
	
	Модифицированность = Ложь;
	Возврат Истина;
КонецФункции

#КонецОбласти

// Процедура, определяющая параметры интеграции инструмента с функциями сохранения данных
//
// Параметры:
//  ВерсияФормата - Число -
//  ИмяОбъекта - Строка - Имя объекта XDTO
//  ИмяИнструмента - Строка - Пользовательское представление названия текущего инструмента
//  КлючНастроек - Строка - Ключ настроек хранилища общих настроек для данных автосохранения
&НаСервереБезКонтекста
Процедура ПриОпределенииНастроекИнструментаXDTO(ВерсияФормата, ИмяОбъекта, ИмяИнструмента, КлючНастроек)
	ВерсияФормата = 3;
	ИмЯОбъекта = "СравнениеПроизводительностиКода_Данные";
	ИмяИнструмента = НСтр("ru='Сравнение производительности кода'");
	КлючНастроек = "СравнениеПроизводительностиКода";
КонецПроцедуры

// Функция формирования пакета XDTO для сохранения в файл
//
// Параметры:
//  Фабрика - ФабрикаXDTO -
//  Пакет - ОбъектXDTO -
//
// Возвращаемое значение:
//  ОбъектXDTO -
&НаСервере
Процедура ПриЗаполненииПакетаXDTO(Фабрика, Пакет)
	ТипСтрТестируемыйКод = Фабрика.Тип("instrumentiki", "СравнениеПроизводительностиКода_СтрТестируемыйКод");
	
	ЗаполнитьЗначенияСвойств(Пакет, ЭтотОбъект, "ГдеВыполнять, ВремяВыполнения, КодИнициализации");
	
	Для Каждого СтрТестируемыйКод Из ТестируемыйКод Цикл
		СтрХДТО = Фабрика.Создать(ТипСтрТестируемыйКод);
		ЗаполнитьЗначенияСвойств(СтрХДТО, СтрТестируемыйКод);
		Пакет.ТестируемыйКод.Добавить(СтрХДТО);
	КонецЦикла;
КонецПроцедуры

// Процедура чтения данных из файла
//
// Параметры:
//  Пакет - ОбъектXDTO -
//  ВерсияФормата - Число -
&НаСервере
Процедура ПриЧтенииПакетаXDTO(Пакет, ВерсияФормата)
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Пакет, "ВремяВыполнения, КодИнициализации, ГдеВыполнять");
	
	ТестируемыйКод.Очистить();
	Для Каждого СтрХДТО Из Пакет.ТестируемыйКод Цикл
		СтрТестируемыйКод = ТестируемыйКод.Добавить();
		ЗаполнитьЗначенияСвойств(СтрТестируемыйКод, СтрХДТО);
	КонецЦикла;
	
	ЗамерВыполнен = Ложь;
КонецПроцедуры

&НаСервере
Процедура ОткрытьПримерНаСервере()
	Макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("СравнениеПроизводительностиКода_Пример");
	АдресВХ = ПоместитьВоВременноеХранилище(Макет.ПолучитьТекст(), ЭтаФорма.УникальныйИдентификатор);
	ПрочитатьУниверсальныйПакет(АдресВХ);
КонецПроцедуры

#КонецОбласти
