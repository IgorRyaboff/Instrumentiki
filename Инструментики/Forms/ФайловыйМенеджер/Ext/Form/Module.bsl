
// --------------------------------------------------------------------------------
// Copyright (c) 2024 Igor Ryabov (https://github.com/IgorRyaboff/Instrumentiki)
// License: https://github.com/IgorRyaboff/Instrumentiki/blob/main/LICENSE
// --------------------------------------------------------------------------------

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Объект.БезопасныйРежим Тогда
		Сообщить(НСтр("ru='Этот инструмент недоступен при работе в безопасном режиме'"));
		Отказ = Истина;
		Возврат
	КонецЕсли;
	
	ТекущаяПапка = ХранилищеОбщихНастроек.Загрузить("УправляемыеИнструментыРазработчика", "ФайловыйМенеджер_ТекущаяПапка");
	
	ЗаполнитьСодержимоеПапки();
	
	Параметры.Свойство("ФормаОткрытаДляПолученияФайла", ФормаОткрытаДляПолученияФайла);
	
	КаталогВременныхФайлов = КаталогВременныхФайлов();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТекущаяПапкаПриИзменении(Элемент)
	ЗаполнитьСодержимоеПапки();
КонецПроцедуры

&НаКлиенте
Процедура ПодзаголовокФормыПриИзменении(Элемент)
	Если ЗначениеЗаполнено(ПодзаголовокФормы) Тогда
		Заголовок = СтрШаблон(НСтр("ru='%1: Файловый менеджер'"), ПодзаголовокФормы);
	Иначе
		Заголовок = НСтр("ru='Файловый менеджер'");
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСодержимоеПапки

&НаКлиенте
Асинх Процедура СодержимоеПапкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекДанные.ЭтоФайл Тогда
		#Если ВебКлиент Тогда
			Ответ = Ждать ВопросАсинх("Скачать файл?", РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				Возврат;
			КонецЕсли;
		#КонецЕсли
		
		Состояние("Копирование файла во временное хранилище",, ТекДанные.ИмяОтносительное);
		АдресВХ = СкопироватьФайлВоВремХранилище(ТекДанные.ИмяПолное);
		Состояние();
		
		ИмяСкачиваемогоФайла = ТекДанные.ИмяОтносительное;
		Ждать ПолучитьФайлССервераАсинх(АдресВХ, ИмяСкачиваемогоФайла, Новый ПараметрыДиалогаПолученияФайлов);
		ИмяСкачиваемогоФайла = Неопределено;
		ПослеСкачиванияФайла(АдресВХ);
	Иначе
		ТекущаяПапка = ТекДанные.ИмяПолное;
		ЗаполнитьСодержимоеПапки();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СодержимоеПапкиПриАктивизацииСтроки(Элемент)
	ТекДанные = Элемент.ТекущиеДанные;
	
	Элементы.СодержимоеПапкиКонтекстноеМенюОткрытьФайлКакТекстовыйДокумент.Видимость = (ТекДанные <> Неопределено И ТекДанные.ЭтоФайл);
	Элементы.СодержимоеПапкиКонтекстноеМенюКопироватьФайлИлиКаталог.Видимость = (ТекДанные <> Неопределено И ТекДанные.ЭтоФайл);
	Элементы.СодержимоеПапкиКонтекстноеМенюПереименоватьФайл.Видимость = (ТекДанные <> Неопределено И ТекДанные.ЭтоФайл);
	Элементы.СодержимоеПапкиКонтекстноеМенюОткрытьВнешнююОбработкуИзФайла.Видимость = (ТекДанные <> Неопределено И (СтрЗаканчиваетсяНа(ТекДанные.ИмяОтносительное, ".epf") Или СтрЗаканчиваетсяНа(ТекДанные.ИмяОтносительное, ".erf")));
	Элементы.СодержимоеПапкиКонтекстноеМенюУдалитьФайл.Видимость = (ТекДанные <> Неопределено);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Перечитать(Команда)
	ЗаполнитьСодержимоеПапки();
КонецПроцедуры

&НаКлиенте
Асинх Процедура УдалитьТекущийФайлИлиКаталог(Команда)
	ТекДанные = Элементы.СодержимоеПапки.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоФайл = ТекДанные.ЭтоФайл;
	Ответ = Ждать ВопросАсинх(СтрШаблон("Вы действительно хотите удалить этот %1?", ?(ЭтоФайл, "файл", "каталог и всё его содержимое")), РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Состояние("Удаление...",, ТекДанные.ИмяОтносительное);
	УдалитьФайлИлиКаталогНаСервере(ТекДанные.ИмяПолное);
	Состояние("Удаление завершено!",, ТекДанные.ИмяОтносительное);
	ЗаполнитьСодержимоеПапки();
КонецПроцедуры

&НаКлиенте
Асинх Процедура ПереименоватьФайл(Команда)
	ТекДанные = Элементы.СодержимоеПапки.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ТекДанные.ЭтоФайл Тогда
		ПоказатьПредупреждение(, "Переименование папок не поддерживается");
		Возврат;
	КонецЕсли;
	
	ЧастиИмени = СтрРазделить(СтрЗаменить(ТекДанные.ИмяПолное, "\", "/"), "/", Ложь);
	Если ЧастиИмени.Количество() = 1 И СтрЗаканчиваетсяНа(ЧастиИмени[0], ":") Тогда
		ПоказатьПредупреждение(, "Нельзя переименовать раздел диска");
		Возврат;
	КонецЕсли;
	
	НовоеИмя = Ждать ВвестиСтрокуАсинх(ТекДанные.ИмяОтносительное, "Новое имя файла");
	Если НовоеИмя = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрНайти(НовоеИмя, "/") > 0 Или СтрНайти(НовоеИмя, "\") > 0 Тогда
		ПоказатьПредупреждение(, "Некорректное имя");
		Возврат;
	КонецЕсли;
	
	ЧастиИмени.Удалить(ЧастиИмени.ВГраница());
	СтароеИмяБезПути = ТекДанные.ИмяОтносительное;
	ЧастиИмени.Добавить(НовоеИмя);
	НовоеИмяПолное = СтрСоединить(ЧастиИмени, "/");
	
	Состояние("Переименование...",, СтрШаблон("%1 -> %2", СтароеИмяБезПути, НовоеИмя));
	ПереместитьФайлИлиКаталогНаСервере(ТекДанные.ИмяПолное, НовоеИмяПолное);
	Состояние("Переименование завершено!",, СтрШаблон("%1 -> %2", СтароеИмяБезПути, НовоеИмя));
	
	ЗаполнитьСодержимоеПапки();
	УстановитьТекущуюСтрокуПоИмениФайла(НовоеИмя);
КонецПроцедуры

&НаКлиенте
Процедура КопироватьФайлИлиКаталог(Команда)
	ТекДанные = Элементы.СодержимоеПапки.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ТекДанные.ЭтоФайл Тогда
		ПоказатьПредупреждение(, "Команда доступна только для файлов");
		Возврат;
	КонецЕсли;
	
	БуферОбмена = ТекДанные.ИмяПолное;
	Элементы.ВставитьИзБуфера.Доступность = Истина;
	Состояние("Скопировано в буфер обмена",, ТекДанные.ИмяОтносительное);
КонецПроцедуры

&НаКлиенте
Процедура ВставитьИзБуфера(Команда)
	Если ПустаяСтрока(БуферОбмена) Тогда
		ПоказатьПредупреждение(, "В буфер ничего не скопировано");
		Возврат;
	КонецЕсли;
	
	ЧастиСтарогоИмени = СтрРазделить(СтрЗаменить(БуферОбмена, "\", "/"), "/", Ложь);
	ИмяБезПути = ЧастиСтарогоИмени[ЧастиСтарогоИмени.ВГраница()];
	ЧастиНовогоИмени = СтрРазделить(СтрЗаменить(ТекущаяПапка, "\", "/"), "/", Ложь);
	ЧастиНовогоИмени.Добавить(ИмяБезПути);
	НовоеИмя = СтрСоединить(ЧастиНовогоИмени, "/");
	
	Состояние("Вставка...",, ИмяБезПути);
	КопироватьФайлИлиКаталогНаСервере(БуферОбмена, НовоеИмя);
	Состояние("Вставка завершена!",, ИмяБезПути);
	ЗаполнитьСодержимоеПапки();
	УстановитьТекущуюСтрокуПоИмениФайла(ИмяБезПути);
	
	БуферОбмена = Неопределено;
	Элементы.ВставитьИзБуфера.Доступность = Ложь;
КонецПроцедуры

&НаКлиенте
Асинх Процедура ОткрытьВнешнююОбработкуИзФайла(Команда)
	ТекДанные = Элементы.СодержимоеПапки.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоОбработка = СтрЗаканчиваетсяНа(НРег(ТекДанные.ИмяПолное), ".epf");
	ЭтоОтчет = СтрЗаканчиваетсяНа(НРег(ТекДанные.ИмяПолное), ".erf");
	
	Если Не ТекДанные.ЭтоФайл Или (Не ЭтоОбработка И Не ЭтоОтчет) Тогда
		ПоказатьПредупреждение(, "Данная команда доступна только для внешних отчётов и обработок (epf/erf)");
		Возврат;
	КонецЕсли;
	
	ОтветБР = Ждать ВопросАсинх("Использовать безопасный режим?", РежимДиалогаВопрос.ДаНет);
	БезопасныйРежим = (ОтветБР = КодВозвратаДиалога.Да);
	
	Состояние("Подключение обработки...",, ТекДанные.ИмяОтносительное);
	ИмяВО = ПодключитьВнешнийОтчетИлиОбработкуИзФайла(ТекДанные.ИмяПолное, БезопасныйРежим, ЭтаФорма.УникальныйИдентификатор);
	
	Состояние("Обработка открыта!",, ТекДанные.ИмяОтносительное);
	
	Если ЭтоОбработка Тогда
		ОткрытьФорму(СтрШаблон("ВнешняяОбработка.%1.Форма", ИмяВО));
	Иначе
		ОткрытьФорму(СтрШаблон("ВнешнийОтчет.%1.Форма", ИмяВО));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Асинх Процедура СоздатьКаталогКлиент(Команда)
	ИмяОтносительное = Ждать ВвестиСтрокуАсинх("", "Укажите имя нового каталога");
	Если ИмяОтносительное = Неопределено Или ПустаяСтрока(ИмяОтносительное) Тогда
		Возврат;
	КонецЕсли;
	
	СоздатьКаталогНаСервере(ПутьСДобавлениемЭлемента(ТекущаяПапка, ИмяОтносительное));
	ЗаполнитьСодержимоеПапки();
	Состояние("Каталог создан!",, ИмяОтносительное);
КонецПроцедуры

&НаКлиенте
Асинх Процедура ЗагрузитьФайл(Команда)
	ОписаниеПомещенногоФайла = Ждать ПоместитьФайлНаСерверАсинх(,,, Новый ПараметрыДиалогаПомещенияФайлов, ЭтотОбъект.УникальныйИдентификатор);
	Если ОписаниеПомещенногоФайла = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОтветИмяФайла = Ждать ВвестиСтрокуАсинх(ОписаниеПомещенногоФайла.СсылкаНаФайл.Имя, "Укажите имя файла");
	ПолныйПуть = ПутьСДобавлениемЭлемента(ТекущаяПапка, ОтветИмяФайла);
	
	Состояние("Загрузка файла...",, ОтветИмяФайла);
	ЗагрузитьФайлНаСервере(ОписаниеПомещенногоФайла.Адрес, ПолныйПуть);
	ЗаполнитьСодержимоеПапки();
	Состояние("Файл загружен!",, ОтветИмяФайла);
КонецПроцедуры

&НаКлиенте
Процедура СортироватьВозр(Команда)
	СортироватьТаблицуЗначений("СодержимоеПапки", "Возр");
КонецПроцедуры

&НаКлиенте
Процедура СортироватьУбыв(Команда)
	СортироватьТаблицуЗначений("СодержимоеПапки", "Убыв");
КонецПроцедуры

&НаКлиенте
Асинх Процедура ОткрытьФайлКакТекстовыйДокумент(Команда)
	ТекДанные = Элементы.СодержимоеПапки.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ТекДанные.ЭтоФайл Тогда
		ПоказатьПредупреждение(, "Команда доступна только для файлов");
		Возврат;
	КонецЕсли;
	
	Если ТекДанные.Размер > 1024 * 1024 * 10 Тогда
		ПоказатьПредупреждение(, "Файл слишком большой, просмотр в программе недоступен. Скачайте его двойным кликом в списке");
		Возврат;
	КонецЕсли;
	
	ТДок = Новый ТекстовыйДокумент;
	ТДок.ТолькоПросмотр = Истина;
	
	ДвоичныеДанные = ДвоичныеДанныеФайла(ТекДанные.ИмяПолное);
	ТДок.УстановитьТекст(ПолучитьСтрокуИзДвоичныхДанных(ДвоичныеДанные));
	
	ТДок.Показать(ТекДанные.ИмяПолное);
КонецПроцедуры

&НаКлиенте
Асинх Процедура ПерейтиВПредопределенныйКаталог(Команда)
	Список = Новый СписокЗначений;
	Список.Добавить(КаталогВременныхФайлов);
	
	Путь = Ждать ВыбратьИзМенюАсинх(Список, Элементы.ПерейтиВПредопределенныйКаталог);
	Если Путь = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяПапка = Путь;
	ЗаполнитьСодержимоеПапки();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Формирует список разделов. Применимо только для серверов на Windows
// Требуется возможность подключения КОМ-объекта Scripting.FileSystemObject
//
// Возвращаемое значение;
//  Массив - Содержит структуры со следующими свойствами:
//  * Буква - Строка - Буква диска (например, "C");
//  * Наименование - Строка - Наименование тома
//  * Размер - Число - Размер тома в байтах
&НаСервереБезКонтекста
Функция СписокРазделовWindows()
	Результат = Новый Массив;
	Если Не НаСервереWindows() Тогда
		ВызватьИсключение "Функция не должна вызываться без предварительного вызова НаСервереWindows()";
	КонецЕсли;

	Попытка
		FSO = Новый COMОбъект("Scripting.FileSystemObject");
	Исключение
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Результат.Добавить(Новый Структура("Буква, Наименование, Размер", "C", НСтр("ru = 'Не удалось получить список разделов диска: '") + ТекстОшибки, 0));
		Возврат Результат;
	КонецПопытки; 
	
	Для Каждого Диск Из FSO.Drives Цикл
		Буква = Диск.DriveLetter;
		Попытка
			Размер = Диск.TotalSize;
			Наименование = Диск.VolumeName;
		Исключение
			Размер = 0;
			Наименование = "";
		КонецПопытки;
		Результат.Добавить(Новый Структура("Буква, Наименование, Размер", Диск.DriveLetter, Наименование, Размер));
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Проверяет, какая ОС на сервере
//
// Возвращаемое значение:
//  Булево -
&НаСервереБезКонтекста
Функция НаСервереWindows()
	СистИнформация = Новый СистемнаяИнформация;
	Возврат СтрНачинаетсяС(Строка(СистИнформация.ТипПлатформы), "Windows");
КонецФункции

// Определяет корректный разделитель папок в зависимости от ОС на сервере
//
// Возвращаемое значение:
//  Строка - "\" для Windows, "/" для Linux
&НаСервереБезКонтекста
Функция РазделительЧастейПути()
	Возврат ?(НаСервереWindows(), "\", "/");
КонецФункции

// Заполняет таблицу СодержимоеФайла списоком файлов и папок директории ТекущаяПапка
//
&НаСервере
Процедура ЗаполнитьСодержимоеПапки()
	ХранилищеОбщихНастроек.Сохранить("УправляемыеИнструментыРазработчика", "ФайловыйМенеджер_ТекущаяПапка", ТекущаяПапка);
	СодержимоеПапки.Очистить();
	
	Если Не ЗначениеЗаполнено(ТекущаяПапка) Тогда
		Если НаСервереWindows() Тогда
			Разделы = СписокРазделовWindows();
			Для Каждого Диск Из Разделы Цикл
				Стр = СодержимоеПапки.Добавить();
				Стр.ИмяОтносительное = СтрШаблон("%1%2", Диск.Буква, ?(ПустаяСтрока(Диск.Наименование), "", " - " + Диск.Наименование));
				Стр.ИмяПолное = Диск.Буква + ":";
				Стр.ПредставлениеРазмера = КрасивыйРазмерФайла(Диск.Размер);
				Стр.Размер = Диск.Размер;
				Стр.ЭтоФайл = Ложь;
				Стр.ПризнакФайлПапка = 1;
			КонецЦикла;
		Иначе
			ТекущаяПапка = "/";
			ЗаполнитьСодержимоеПапки();
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Попытка
		ФайлыПапкиВТекущейПапке = НайтиФайлы(ТекущаяПапка, "*");
	Исключение
		ФайлыПапкиВТекущейПапке = Новый Массив;
	КонецПопытки;
	
	Для Каждого ФайлПапка Из ФайлыПапкиВТекущейПапке Цикл
		Если СтрЗаменить(ФайлПапка.ПолноеИмя, "//", "/") = "/." Или СтрЗаменить(ФайлПапка.ПолноеИмя, "//", "/") = "/.." Тогда
			Продолжить;
		КонецЕсли;
		
		Стр = СодержимоеПапки.Добавить();
		Стр.ИмяОтносительное = ?(ПустаяСтрока(ФайлПапка.Имя), ФайлПапка.ПолноеИмя, ФайлПапка.Имя);
		Стр.ИмяПолное = ?(СтрНачинаетсяС(ФайлПапка.ПолноеИмя, "//"), Сред(ФайлПапка.ПолноеИмя, 2), ФайлПапка.ПолноеИмя);
		
		Попытка
			Стр.ЭтоФайл = ФайлПапка.ЭтоФайл();
		Исключение
			СодержимоеПапки.Удалить(Стр);
			Продолжить;
		КонецПопытки;
		
		Стр.ПризнакФайлПапка = ?(Стр.ЭтоФайл, 0, 1);
		Если Стр.ЭтоФайл Тогда
			Стр.РасширениеФайла = Сред(НРег(ФайлПапка.Расширение), 2); // Сразу убираем точку из расширения
		КонецЕсли;
		
		Попытка
			Стр.Размер = ФайлПапка.Размер();
			Стр.ПредставлениеРазмера = КрасивыйРазмерФайла(Стр.Размер);
			Стр.Изменен = ФайлПапка.ПолучитьВремяИзменения();
		Исключение
			//
		КонецПопытки;
	КонецЦикла;
	
	СодержимоеПапки.Сортировать("ПризнакФайлПапка Убыв, ИмяОтносительное Возр");
	
	ПутьКПапкеВыше = ПутьБезПоследнегоЭлемента(ТекущаяПапка);
	Если ПутьКПапкеВыше <> ТекущаяПапка Тогда
		Стр = СодержимоеПапки.Вставить(0);
		Стр.ИмяОтносительное = "<папка выше>";
		Стр.ИмяПолное = ПутьКПапкеВыше;
		Стр.ЭтоФайл = Ложь;
		Стр.ПризнакФайлПапка = 1;
	КонецЕсли;
КонецПроцедуры

// Возвращает новый путь, к которому добавлен ещё один элемент
//
// Параметры:
//  ИсходныйПуть - Строка -
//  ДобавляемыйЭлемент - Строка - Имя файла/папки
//
// Возвращаемое значение:
//  Строка
&НаСервереБезКонтекста
Функция ПутьСДобавлениемЭлемента(ИсходныйПуть, ДобавляемыйЭлемент)
	Возврат ?(СтрЗаканчиваетсяНа(ИсходныйПуть, РазделительЧастейПути()), ИсходныйПуть + ДобавляемыйЭлемент, ИсходныйПуть + РазделительЧастейПути() + ДобавляемыйЭлемент);
КонецФункции

// Убирает последний элемент из пути к файлу/папке
//
// Параметры:
//  ИсходныйПуть - Строка -
//
// Возвращаемое значение:
//  Строка -
&НаСервереБезКонтекста
Функция ПутьБезПоследнегоЭлемента(ИсходныйПуть)
	Разд = СтрРазделить(ИсходныйПуть, РазделительЧастейПути(), Ложь);
	Если Разд.Количество() > 0 Тогда
		Разд.Удалить(Разд.ВГраница());
	КонецЕсли;
	Возврат СтрСоединить(Разд, РазделительЧастейПути());
КонецФункции

// Получает текст из заданного файла
//
// Параметры:
//  Путь - Строка - Полный путь к файлу
//
// Возвращаемое значение:
//  ТекстовыйДокумент -
&НаСервереБезКонтекста
Функция СодержимоеФайлаВТекстовыйДокумент(Путь)
	ТД = Новый ТекстовыйДокумент;
	ТД.Прочитать(Путь);
	ТД.ТолькоПросмотр = Истина;
	Возврат ТД;
КонецФункции

// Получает представление размера файла, легко читаемое человеком (например, "12,5 Мб")
//
// Параметры:
//  ИсходныйРазмер - Число - Размер в байтах
//
// Возвращаемое значение:
//  Строка -
&НаКлиентеНаСервереБезКонтекста
Функция КрасивыйРазмерФайла(ИсходныйРазмер)
	Байт = ИсходныйРазмер;
	Кб = ИсходныйРазмер / 1024;
	Мб = Кб / 1024;
	Гб = Мб / 1024;
	Тб = Гб / 1024;
	
	Если Тб >= 1 Тогда
		Возврат Формат(Тб, "ЧДЦ=1; ЧН=0; ЧГ=") + " Тб";
	ИначеЕсли Гб >= 1 Тогда
		Возврат Формат(Гб, "ЧДЦ=1; ЧН=0; ЧГ=") + " Гб";
	ИначеЕсли Мб >= 1 Тогда
		Возврат Формат(Мб, "ЧДЦ=1; ЧН=0; ЧГ=") + " Мб";
	ИначеЕсли Кб >= 1 Тогда
		Возврат Формат(Кб, "ЧДЦ=1; ЧН=0; ЧГ=") + " Кб";
	Иначе
		Возврат Формат(Байт, "ЧДЦ=1; ЧН=0; ЧГ=") + " Б";
	КонецЕсли;
КонецФункции

// Копирует файл с сервера во временное хранилище
//
// Параметры:
//  Путь - Полный путь к исходному файлу
//
// Возвращаемое значение:
//  Строка - Адрес во временном хранилище
&НаСервереБезКонтекста
Функция СкопироватьФайлВоВремХранилище(Путь)
	ДвДанные = Новый ДвоичныеДанные(Путь);
	Адрес = ПоместитьВоВременноеХранилище(ДвДанные);
	ДвДанные = Неопределено;
	Возврат Адрес;
КонецФункции

// Удаляет файл из временного хранилища
//
// Параметры:
//  АдресВХ - Адрес файла во временном хранилище
&НаСервереБезКонтекста
Процедура ПослеСкачиванияФайла(АдресВХ)
	УдалитьФайлы(АдресВХ);
КонецПроцедуры

// Показывает имя скачиваемого файла в качестве всплывающего уведомления раз в 1 секунду
// Позволяет сохранять уведомление на экране, пока файл скачивается
//
&НаКлиенте
Процедура ПоказатьСостояниеСкачиванияФайла()
	Если Не ПустаяСтрока(ИмяСкачиваемогоФайла) Тогда
		Состояние("Скачивание файла", 0, ИмяСкачиваемогоФайла);
		ПодключитьОбработчикОжидания("ПоказатьСостояниеСкачиванияФайла", 1, Истина);
	КонецЕсли;
КонецПроцедуры

// Удаляет файл/каталог с сервера
//
// Параметры:
//  ПолноеИмя - Строка - Полный путь к файлу/каталогу
//  Маска - Строка - См. одноимённый параметр стандартной процедуры "УдалитьФайлы" в синтакс-помощнике
&НаСервереБезКонтекста
Процедура УдалитьФайлИлиКаталогНаСервере(ПолноеИмя)
	УдалитьФайлы(ПолноеИмя);
КонецПроцедуры // УдалитьФайлИлиКаталогНаСервере()

// Переместить файл на сервере
//
// Параметры:
//  СтароеИмя - Строка -
//  НовоеИмя - Строка -
&НаСервереБезКонтекста
Процедура ПереместитьФайлИлиКаталогНаСервере(СтароеИмя, НовоеИмя)
	ПереместитьФайл(СтароеИмя, НовоеИмя);
КонецПроцедуры // ПереместитьФайлИлиКаталогНаСервере()

// Копировать файл на сервере
//
// Параметры:
//  СтароеИмя - Строка -
//  НовоеИмя - Строка -
&НаСервереБезКонтекста
Процедура КопироватьФайлИлиКаталогНаСервере(СтароеИмя, НовоеИмя)
	КопироватьФайл(СтароеИмя, НовоеИмя);
КонецПроцедуры // КопироватьФайлИлиКаталогНаСервере()

// Устанавливает текущую строку таблицы СодержимоеПапки
//
// Параметры:
//  ОтносительноеИмяФайла - Строка -
&НаКлиенте
Процедура УстановитьТекущуюСтрокуПоИмениФайла(ОтносительноеИмяФайла)
	Строки = СодержимоеПапки.НайтиСтроки(Новый Структура("ИмяОтносительное", ОтносительноеИмяФайла));
	Если Строки.Количество() = 1 Тогда
		Элементы.СодержимоеПапки.ТекущаяСтрока = Строки[0].ПолучитьИдентификатор();
	КонецЕсли;
КонецПроцедуры // УстановитьТекущуюСтрокуПоИмениФайла()

// Помещает файл внешнего отчёта или обработки во временное хранилище для возможности дальнейшего открытия на клиенте
//
// Параметры:
//  ИмяФайла - Строка -
//  БезопасныйРежим - Булево - Открыть внешнюю обработку в безопасном режиме
//  ИдентификаторФормы - УникальныйИдентификатор - Идентификатор текущей формы. Необходим для своевременного удаления временного файла с сервера
//
// Возвращаемое значение:
//  Строка - Имя внешней обработки
&НаСервереБезКонтекста
Функция ПодключитьВнешнийОтчетИлиОбработкуИзФайла(ИмяФайла, БезопасныйРежим, ИдентификаторФормы)
	ДвДанные = Новый ДвоичныеДанные(ИмяФайла);
	АдресВХ = ПоместитьВоВременноеХранилище(ДвДанные, ИдентификаторФормы);
	
	Если СтрЗаканчиваетсяНа(НРег(ИмяФайла), ".epf") Тогда
		ИмяВО = ВнешниеОбработки.Подключить(АдресВХ,, БезопасныйРежим);
	ИначеЕсли СтрЗаканчиваетсяНа(НРег(ИмяФайла), ".erf") Тогда
		ИмяВО = ВнешниеОтчеты.Подключить(АдресВХ,, БезопасныйРежим);
	Иначе
		ВызватьИсключение "Неподдерживаемое расширение файла " + ИмяФайла;
	КонецЕсли;
	
	Возврат ИмяВО;
КонецФункции // ПодключитьВнешнююОбработкуИзФайла()

// Создаёт новый каталог
//
// Параметры:
//  Имя - Полный путь к новому каталогу
&НаСервереБезКонтекста
Процедура СоздатьКаталогНаСервере(Имя)
	СоздатьКаталог(Имя);
КонецПроцедуры

// Записывает помещённый во временное хранилище файл
//
// Параметры:
//  АдресВХ - Строка - Адрес помещённого во временного хранилище файла
//  Путь - Строка - Путь, по которому необходимо записать файл на сервере
&НаСервереБезКонтекста
Процедура ЗагрузитьФайлНаСервере(АдресВХ, Путь)
	Данные = ПолучитьИзВременногоХранилища(АдресВХ);
	УдалитьИзВременногоХранилища(АдресВХ);
	Данные.Записать(Путь);
КонецПроцедуры

// Процедура сортировки таблицы значений
//
// Параметры:
//  ИмяТаблицыФормы - Строка - Имя элемента формы, ссылающегося на таблицу
//  Направление - Строка - "Возр" или "Убыв"
&НаСервере
Процедура СортироватьТаблицуЗначений(ИмяТаблицыФормы, Направление)
	ТаблицаФормы = Элементы[ИмяТаблицыФормы];
	ПрефиксПутиКДанным = ТаблицаФормы.ПутьКДанным + ".";
	
	ТекущаяКолонка = ТаблицаФормы.ТекущийЭлемент;
	ИмяКолонки = СтрЗаменить(ТекущаяКолонка.ПутьКДанным, ПрефиксПутиКДанным, "");
	
	Если ИмяКолонки = "ИмяОтносительное" Тогда
		ЭтотОбъект[ТаблицаФормы.ПутьКДанным].Сортировать("ПризнакФайлПапка Убыв, ИмяОтносительное " + Направление);
	ИначеЕсли ИмяКолонки = "ПредставлениеРазмера" Тогда
		ЭтотОбъект[ТаблицаФормы.ПутьКДанным].Сортировать("Размер " + Направление);
	Иначе
		ЭтотОбъект[ТаблицаФормы.ПутьКДанным].Сортировать(ИмяКолонки + " " + Направление);
	КонецЕсли;
КонецПроцедуры

//
// Параметры:
//  Путь - Строка - Путь к файлу на сервере
//
// Возвращаемое значение:
//  ДвоичныеДанные -
&НаСервереБезКонтекста
Функция ДвоичныеДанныеФайла(Путь)
	Возврат Новый ДвоичныеДанные(Путь);
КонецФункции

#КонецОбласти
